{
  "0x388c00aa777188bdaf93420171ebc6dc00cd29855a2207b61cb7af1e9c413dd9": {
    "name": "UserContract",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "UserContract",
      "sourceName": "contracts/UserContract.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "domain",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "A13e_RevokedAuthToken",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "ContractNotInitialized",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidMessageOrder",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidSessionId",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "OwnableInvalidOwner",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "OwnableUnauthorizedAccount",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "SessionAlreadyExists",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "SessionNotFound",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "SiweAuth_AddressMismatch",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "SiweAuth_ChainIdMismatch",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "SiweAuth_DomainMismatch",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "SiweAuth_Expired",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "SiweAuth_NotBeforeInFuture",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "SiweParser_InvalidAddressLength",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "SiweParser_InvalidNonce",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "UnauthorizedAccess",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "sessionId",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "messageOrder",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "name": "ChatMessageStored",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "sessionId",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "name": "ChatSessionClosed",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "sessionId",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "name": "ChatSessionCreated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "sessionId",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "name": "ChatSummaryStored",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "oldTEE",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newTEE",
              "type": "address"
            }
          ],
          "name": "TEEContractUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "subscriptionId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "name": "UserContractInitialized",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "chatMessages",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "encryptedUserMessage",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedAIResponse",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "messageOrder",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "name": "chatSessions",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "sessionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastActivity",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "messageCount",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "name": "chatSummaries",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "sessionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "encryptedSummary",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "messageCount",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "sessionId",
              "type": "bytes32"
            }
          ],
          "name": "closeSession",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "createNewSession",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "createdAt",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "sessionId",
              "type": "bytes32"
            }
          ],
          "name": "deleteSession",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "domain",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getActiveSessions",
          "outputs": [
            {
              "internalType": "bytes32[]",
              "name": "",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "token",
              "type": "bytes"
            }
          ],
          "name": "getAllSessionIds",
          "outputs": [
            {
              "internalType": "bytes32[]",
              "name": "",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "sessionId",
              "type": "bytes32"
            }
          ],
          "name": "getChatHistory",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "encryptedUserMessage",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "encryptedAIResponse",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "messageOrder",
                  "type": "uint256"
                }
              ],
              "internalType": "struct UserContract.ChatMessage[]",
              "name": "",
              "type": "tuple[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "sessionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "token",
              "type": "bytes"
            }
          ],
          "name": "getChatSummary",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "sessionId",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "encryptedSummary",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "createdAt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "messageCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct UserContract.ChatSummary",
              "name": "",
              "type": "tuple"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "sessionId",
              "type": "bytes32"
            }
          ],
          "name": "getSessionInfo",
          "outputs": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "sessionId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "createdAt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lastActivity",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "isActive",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "messageCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct UserContract.ChatSession",
              "name": "",
              "type": "tuple"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "sessionId",
              "type": "bytes32"
            }
          ],
          "name": "getSessionMessageCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getUserInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_subscriptionId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_createdAt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_totalSessions",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_subscriptionId",
              "type": "uint256"
            }
          ],
          "name": "initialize",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "isInitialized",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "siweMsg",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "v",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SignatureRSV",
              "name": "sig",
              "type": "tuple"
            }
          ],
          "name": "login",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "name": "sessionMessageCount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_teeContract",
              "type": "address"
            }
          ],
          "name": "setTEEContract",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "sessionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "encryptedUserMessage",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedAIResponse",
              "type": "bytes"
            }
          ],
          "name": "storeChatMessage",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "sessionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "encryptedSummary",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "token",
              "type": "bytes"
            }
          ],
          "name": "storeChatSummary",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "subscriptionId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "teeContract",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "user",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "userSessionIds",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80637f476b6f11610104578063b1f0f51a116100a2578063cd6dc68711610071578063cd6dc68714610485578063cf09e0d014610498578063da45b383146104a1578063f2fde38b146104f857600080fd5b8063b1f0f51a146103e0578063b8216fd7146103f3578063c2fb26a614610413578063ca3bcc1f1461041b57600080fd5b80639a9d575f116100de5780639a9d575f1461039f5780639e975d27146103b2578063a0081805146103c5578063a6ce7478146103cd57600080fd5b80637f476b6f1461036657806389543af4146103865780638da5cb5b1461038e57600080fd5b806340d996e91161017157806358dc3eb21161014b57806358dc3eb2146102f65780635d8d158514610319578063715018a61461034b57806373701fbe1461035357600080fd5b806340d996e9146102955780634f8632ba146102b857806355c02f97146102e357600080fd5b80631fe9ec2e116101ad5780631fe9ec2e146102305780632a9834b414610245578063392e53cd146102655780633ade240b1461028257600080fd5b806309c1ba2e146101d457806312daa236146101f05780631f8a3b0c14610210575b600080fd5b6101dd60055481565b6040519081526020015b60405180910390f35b6101dd6101fe3660046133e6565b600b6020526000908152604090205481565b61022361021e3660046133e6565b61050b565b6040516101e7919061344f565b61024361023e366004613532565b610754565b005b610258610253366004613696565b6109da565b6040516101e791906136d2565b6007546102729060ff1681565b60405190151581526020016101e7565b6102436102903660046133e6565b610ab0565b6102a86102a3366004613716565b610c17565b6040516101e79493929190613738565b6004546102cb906001600160a01b031681565b6040516001600160a01b0390911681526020016101e7565b6101dd6102f13660046133e6565b610d74565b6103096103043660046133e6565b610df8565b6040516101e79493929190613771565b610321610e1a565b604080516001600160a01b03909516855260208501939093529183015260608201526080016101e7565b610243610e92565b6102436103613660046137b2565b610ea6565b6103796103743660046137cf565b610f56565b6040516101e7919061382d565b6101dd611261565b6000546001600160a01b03166102cb565b600d546102cb906001600160a01b031681565b6101dd6103c03660046133e6565b61144e565b61025861146f565b6102436103db3660046133e6565b611638565b6102436103ee366004613840565b611814565b6104066104013660046138b2565b6119d2565b6040516101e791906138f8565b610379611ba2565b61045b6104293660046133e6565b6008602052600090815260409020805460018201546002830154600384015460049094015492939192909160ff169085565b6040805195865260208601949094529284019190915215156060830152608082015260a0016101e7565b61024361049336600461393e565b611c34565b6101dd60065481565b6104b46104af3660046133e6565b611d3e565b6040516101e79190600060a0820190508251825260208301516020830152604083015160408301526060830151151560608301526080830151608083015292915050565b6102436105063660046137b2565b611e5b565b6004546060906001600160a01b0316331461053957604051631a27eac360e11b815260040160405180910390fd5b60075460ff1661055c57604051635079799360e01b815260040160405180910390fd5b818061057b576040516317249bd760e11b815260040160405180910390fd5b60008381526008602052604081206001015490036105b45760405162461bcd60e51b81526004016105ab9061396a565b60405180910390fd5b600083815260096020908152604080832080548251818502810185019093528083529193909284015b82821015610747578382906000526020600020906004020160405180608001604052908160008201805461061090613995565b80601f016020809104026020016040519081016040528092919081815260200182805461063c90613995565b80156106895780601f1061065e57610100808354040283529160200191610689565b820191906000526020600020905b81548152906001019060200180831161066c57829003601f168201915b505050505081526020016001820180546106a290613995565b80601f01602080910402602001604051908101604052809291908181526020018280546106ce90613995565b801561071b5780601f106106f05761010080835404028352916020019161071b565b820191906000526020600020905b8154815290600101906020018083116106fe57829003601f168201915b5050505050815260200160028201548152602001600382015481525050815260200190600101906105dd565b5050505091505b50919050565b6004546001600160a01b0316331461077f57604051631a27eac360e11b815260040160405180910390fd5b60075460ff166107a257604051635079799360e01b815260040160405180910390fd5b84806107c1576040516317249bd760e11b815260040160405180910390fd5b60008681526008602052604081206001015490036107f15760405162461bcd60e51b81526004016105ab9061396a565b60008681526008602052604090206003015460ff166108465760405162461bcd60e51b815260206004820152601160248201527014d95cdcda5bdb881a5cc818db1bdcd959607a1b60448201526064016105ab565b6000868152600b6020908152604080832054815160a0601f8a0185900490940281018401909252608082018881529093928291908a908a9081908501838280828437600092019190915250505090825250604080516020601f890181900481028201810190925287815291810191908890889081908401838280828437600092018290525093855250504260208085019190915260409384018790528c83526009815292822080546001810182559083529290912083519394508493600490930201918291506109169082613a18565b506020820151600182019061092b9082613a18565b5060408281015160028301556060909201516003909101556000898152600b60205290812080549161095c83613aed565b9091555050600088815260086020526040812042600282015560040180549161098483613aed565b9091555050600454604080518481524260208201528a926001600160a01b0316917f32c5ff7b08c2d334ce876e7c5137698ed9cbda5ef37aa9a3ba3b3455b85bb08d910160405180910390a35050505050505050565b60045460609082906001600160a01b03163314801590610a1657506004546001600160a01b0316610a0a82611e99565b6001600160a01b031614155b15610a3457604051631a27eac360e11b815260040160405180910390fd5b60075460ff16610a5757604051635079799360e01b815260040160405180910390fd5b600c805480602002602001604051908101604052809291908181526020018280548015610aa357602002820191906000526020600020905b815481526020019060010190808311610a8f575b5050505050915050919050565b6004546001600160a01b03163314610adb57604051631a27eac360e11b815260040160405180910390fd5b60075460ff16610afe57604051635079799360e01b815260040160405180910390fd5b8080610b1d576040516317249bd760e11b815260040160405180910390fd5b6000828152600860205260408120600101549003610b4d5760405162461bcd60e51b81526004016105ab9061396a565b60008281526008602052604090206003015460ff16610ba75760405162461bcd60e51b815260206004820152601660248201527514d95cdcda5bdb88185b1c9958591e4818db1bdcd95960521b60448201526064016105ab565b6000828152600860205260409081902060038101805460ff19169055426002909101819055600454915184926001600160a01b0316917f6f3ca9e92d5454d42942b753c6b4666c2803bbcd56271d7431f2fa0d58af15a591610c0b91815260200190565b60405180910390a35050565b60096020528160005260406000208181548110610c3357600080fd5b906000526020600020906004020160009150915050806000018054610c5790613995565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8390613995565b8015610cd05780601f10610ca557610100808354040283529160200191610cd0565b820191906000526020600020905b815481529060010190602001808311610cb357829003601f168201915b505050505090806001018054610ce590613995565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1190613995565b8015610d5e5780601f10610d3357610100808354040283529160200191610d5e565b820191906000526020600020905b815481529060010190602001808311610d4157829003601f168201915b5050505050908060020154908060030154905084565b6004546000906001600160a01b03163314610da257604051631a27eac360e11b815260040160405180910390fd5b60075460ff16610dc557604051635079799360e01b815260040160405180910390fd5b8180610de4576040516317249bd760e11b815260040160405180910390fd5b50506000908152600b602052604090205490565b600a6020526000908152604090208054600182018054919291610ce590613995565b6004546000908190819081906001600160a01b03163314610e4e57604051631a27eac360e11b815260040160405180910390fd5b60075460ff16610e7157604051635079799360e01b815260040160405180910390fd5b5050600454600554600654600c546001600160a01b03909316959194509250565b610e9a611eff565b610ea46000611f2c565b565b610eae611eff565b6001600160a01b038116610f045760405162461bcd60e51b815260206004820152601c60248201527f496e76616c69642054454520636f6e747261637420616464726573730000000060448201526064016105ab565b600d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f38d1abd3b3b297938cdc6e7fbd809a8fbba7ea6dcfa546be3832c04d9f39d8cf90600090a35050565b6060610f60613278565b6000610f6b85611f7c565b8686604051602001610f7f93929190613b06565b60408051601f19818403018152828252805160208083019190912060008086528583018086529190915260ff89850135169385019390935287356060850152870135608084015292509060019060a0016020604051602081039080840390855afa158015610ff1573d6000803e3d6000fd5b5050604051601f1901516001600160a01b038116602086015291506000905061101a888861200e565b9050468160a00151146110405760405163362c833760e01b815260040160405180910390fd5b600260405161104f9190613b5a565b6040518091039020816000015180519060200120146110815760405163283d62bd60e01b815260040160405180910390fd5b8051845260208101516001600160a01b038381169116146110b5576040516305cc02e160e01b815260040160405180910390fd5b61012081015151158015906110d757506110d3816101200151612477565b4211155b156110f55760405163299d02f160e01b815260040160405180910390fd5b610100810151511561111c576000611111826101000151612477565b60408601525061112f565b6111296201518042613bd0565b60408501525b8360400151421061115357604051630b17115560e41b815260040160405180910390fd5b60408101516060850152610160810151516001600160401b0381111561117b5761117b6135ab565b6040519080825280602002602001820160405280156111ae57816020015b60608152602001906001900390816111995790505b50608085015260005b816101600151518110156112185781610160015181815181106111dc576111dc613be3565b6020026020010151856080015182815181106111fa576111fa613be3565b6020026020010181905250808061121090613aed565b9150506111b7565b5060006112546003546000801b876040516020016112369190613bf9565b60408051601f198184030181526020830190915260008252906124e6565b9998505050505050505050565b6004546000906001600160a01b0316331461128f57604051631a27eac360e11b815260040160405180910390fd5b60075460ff166112b257604051635079799360e01b815260040160405180910390fd5b600c5460045460405160609190911b6001600160601b0319166020820152426034820152605481018290526000906074016040516020818303038152906040528051906020012090505b6000818152600860205260409020600101541561136a578161131d81613aed565b60045460405160609190911b6001600160601b03191660208201524260348201526054810182905290935060740190506040516020818303038152906040528051906020012090506112fc565b6040805160a0810182528281524260208083018281528385018381526001606086018181526000608088018181528a8252600887528982208951815595518685015593516002860155905160038501805460ff19169115159190911790559151600493840155600c805491820190557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701879055600b835285812055549351918252919284926001600160a01b03909116917f3417daa22e111dfeb8d71c6b05f62a3421d2ac780a3091d4ec66406d1eb96fb7910160405180910390a35091505090565b600c818154811061145e57600080fd5b600091825260209091200154905081565b6004546060906001600160a01b0316331461149d57604051631a27eac360e11b815260040160405180910390fd5b60075460ff166114c057604051635079799360e01b815260040160405180910390fd5b600c546000906001600160401b038111156114dd576114dd6135ab565b604051908082528060200260200182016040528015611506578160200160208202803683370190505b5090506000805b600c54811015611595576000600c828154811061152c5761152c613be3565b6000918252602080832090910154808352600890915260409091206003015490915060ff1615611582578084848151811061156957611569613be3565b60209081029190910101528261157e81613aed565b9350505b508061158d81613aed565b91505061150d565b506000816001600160401b038111156115b0576115b06135ab565b6040519080825280602002602001820160405280156115d9578160200160208202803683370190505b50905060005b82811015611630578381815181106115f9576115f9613be3565b602002602001015182828151811061161357611613613be3565b60209081029190910101528061162881613aed565b9150506115df565b509250505090565b6004546001600160a01b0316331461166357604051631a27eac360e11b815260040160405180910390fd5b60075460ff1661168657604051635079799360e01b815260040160405180910390fd5b80806116a5576040516317249bd760e11b815260040160405180910390fd5b60008281526008602052604081206001015490036116d55760405162461bcd60e51b81526004016105ab9061396a565b60005b600c5481101561178e5782600c82815481106116f6576116f6613be3565b90600052602060002001540361177c57600c805461171690600190613cb3565b8154811061172657611726613be3565b9060005260206000200154600c828154811061174457611744613be3565b600091825260209091200155600c80548061176157611761613cc6565b6001900381819060005260206000200160009055905561178e565b8061178681613aed565b9150506116d8565b506000828152600860209081526040808320838155600181018490556002810184905560038101805460ff19169055600401839055600990915281206117d3916132b0565b6000828152600a60205260408120818155906117f260018301826132d1565b50600060028201819055600390910181905591825250600b6020526040812055565b60045481906001600160a01b0316331480159061184d57506004546001600160a01b031661184182611e99565b6001600160a01b031614155b1561186b57604051631a27eac360e11b815260040160405180910390fd5b60075460ff1661188e57604051635079799360e01b815260040160405180910390fd5b84806118ad576040516317249bd760e11b815260040160405180910390fd5b60008681526008602052604081206001015490036118dd5760405162461bcd60e51b81526004016105ab9061396a565b6000604051806080016040528088815260200187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509385525050426020808501919091528b835260088152604080842060040154948101949094528b8352600a815292909120835181559183015192935083926001830191506119709082613a18565b506040828101516002830155606090920151600390910155600454905142815288916001600160a01b0316907fa5bcc067c850ca99cefee70d42b9e232781e55a3165ccef97f9e19095c3610ec9060200160405180910390a350505050505050565b611a006040518060800160405280600080191681526020016060815260200160008152602001600081525090565b60045482906001600160a01b03163314801590611a3957506004546001600160a01b0316611a2d82611e99565b6001600160a01b031614155b15611a5757604051631a27eac360e11b815260040160405180910390fd5b60075460ff16611a7a57604051635079799360e01b815260040160405180910390fd5b8380611a99576040516317249bd760e11b815260040160405180910390fd5b6000858152600860205260408120600101549003611ac95760405162461bcd60e51b81526004016105ab9061396a565b600a600086815260200190815260200160002060405180608001604052908160008201548152602001600182018054611b0190613995565b80601f0160208091040260200160405190810160405280929190818152602001828054611b2d90613995565b8015611b7a5780601f10611b4f57610100808354040283529160200191611b7a565b820191906000526020600020905b815481529060010190602001808311611b5d57829003601f168201915b505050505081526020016002820154815260200160038201548152505092505b505092915050565b606060028054611bb190613995565b80601f0160208091040260200160405190810160405280929190818152602001828054611bdd90613995565b8015611c2a5780601f10611bff57610100808354040283529160200191611c2a565b820191906000526020600020905b815481529060010190602001808311611c0d57829003601f168201915b5050505050905090565b60075460ff1615611c7d5760405162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016105ab565b6001600160a01b038216611cca5760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642075736572206164647265737360601b60448201526064016105ab565b600480546001600160a01b0319166001600160a01b03841690811790915560058290554260068190556007805460ff191660011790556040805184815260208101929092527fdfe12b4770bcc8ce5467a65b351727c4adddffa6723bada19c9d18ef1c1e5731910160405180910390a25050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526004546001600160a01b03163314611d9457604051631a27eac360e11b815260040160405180910390fd5b60075460ff16611db757604051635079799360e01b815260040160405180910390fd5b8180611dd6576040516317249bd760e11b815260040160405180910390fd5b6000838152600860205260408120600101549003611e065760405162461bcd60e51b81526004016105ab9061396a565b5050600090815260086020908152604091829020825160a08101845281548152600182015492810192909252600281015492820192909252600382015460ff1615156060820152600490910154608082015290565b611e63611eff565b6001600160a01b038116611e8d57604051631e4fbdf760e01b8152600060048201526024016105ab565b611e9681611f2c565b50565b8051602080830191909120600090815260019091526040812054829060ff1615611ed6576040516313d4cf0960e31b815260040160405180910390fd5b8251600003611ee8576000915061074e565b6000611ef3846125bb565b60200151949350505050565b6000546001600160a01b03163314610ea45760405163118cdaa760e01b81523360048201526024016105ab565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606000611f898361266c565b60010190506000816001600160401b03811115611fa857611fa86135ab565b6040519080825280601f01601f191660200182016040528015611fd2576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084611fdc57509392505050565b61201661330b565b61201e61330b565b60005b838110156120af5784848281811061203b5761203b613be3565b909101356001600160f81b031916600160fd1b03905061209d5761209685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092508591506127449050565b82526120af565b806120a781613aed565b915050612021565b6120ba603282613bd0565b905061212161211c86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612106925060029150869050613bd0565b935083612114602882613bd0565b945084612744565b61281a565b6001600160a01b0316602083015261213a600282613bd0565b90508381108015612174575084848281811061215857612158613be3565b9050013560f81c60f81b6001600160f81b031916600560f91b14155b1561221d57805b8481101561221b5785858281811061219557612195613be3565b909101356001600160f81b031916600560f91b039050612209576121f286868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508692508591506127449050565b6040840152612202816001613bd0565b915061221b565b8061221381613aed565b91505061217b565b505b8061222781613aed565b91505061225185856040518060400160405280600381526020016255524960e81b81525084612955565b8360600181935082905250506122888585604051806040016040528060078152602001662b32b939b4b7b760c91b81525084612955565b83608001819350829052505060606122c286866040518060400160405280600881526020016710da185a5b88125160c21b81525085612955565b925090506122cf81612b5f565b60a08401526040805180820190915260058152644e6f6e636560d81b60208201526122fe908790879085612955565b60c0850182905290519092506008111561232b57604051632d2f00c360e21b815260040160405180910390fd5b612358868660405180604001604052806009815260200168125cdcdd595908105d60ba1b81525085612955565b8460e001819450829052505061239786866040518060400160405280600f81526020016e45787069726174696f6e2054696d6560881b81525085612955565b846101000181945082905250506123d286866040518060400160405280600a8152602001694e6f74204265666f726560b01b81525085612955565b8461012001819450829052505061240d86866040518060400160405280600a81526020016914995c5d595cdd08125160b21b81525085612955565b8461014001819450829052505060006124498787604051806040016040528060098152602001685265736f757263657360b81b81525086612955565b91505082811461246a5761245e878783612bc3565b61016086019190915292505b5091925050505b92915050565b600061247161249161248c8460006004612744565b612b5f565b6124a161248c8560056007612744565b6124b161248c866008600a612744565b6124c161248c87600b600d612744565b6124d161248c88600e6010612744565b6124e161248c8960116013612744565b612eb3565b60606000806003600160981b016001600160a01b0316878787876040516020016125139493929190613cf2565b60408051601f198184030181529082905261252d91613d2e565b600060405180830381855afa9150503d8060008114612568576040519150601f19603f3d011682016040523d82523d6000602084013e61256d565b606091505b5091509150816125b15760405162461bcd60e51b815260206004820152600f60248201526e195b98dc9e5c1d0e8819985a5b1959608a1b60448201526064016105ab565b9695505050505050565b6125c3613278565b60006125e56003546000801b856040518060200160405280600081525061306a565b90506000818060200190518101906125fd9190613e3d565b9050600260405161260e9190613b5a565b6040518091039020816000015180519060200120146126405760405163283d62bd60e01b815260040160405180910390fd5b428160400151101561266557604051630b17115560e41b815260040160405180910390fd5b9392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106126ab5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106126d7576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106126f557662386f26fc10000830492506010015b6305f5e100831061270d576305f5e100830492506008015b612710831061272157612710830492506004015b60648310612733576064830492506002015b600a83106124715760010192915050565b606060006127528484613cb3565b6001600160401b03811115612769576127696135ab565b6040519080825280601f01601f191660200182016040528015612793576020820181803683370190505b509050835b83811080156127a75750855181105b15612811578581815181106127be576127be613be3565b01602001516001600160f81b031916826127d88784613cb3565b815181106127e8576127e8613be3565b60200101906001600160f81b031916908160001a9053508061280981613aed565b915050612798565b50949350505050565b6000815160281461283e5760405163acf8696960e01b815260040160405180910390fd5b60006002835161284e9190613f0c565b6001600160401b03811115612865576128656135ab565b6040519080825280601f01601f19166020018201604052801561288f576020820181803683370190505b50905060005b600284516128a39190613f0c565b811015612941576128e1846128b9836002613f20565b6128c4906001613bd0565b815181106128d4576128d4613be3565b016020015160f81c613135565b6128f0856128c4846002613f20565b6128fb906010613f37565b6129059190613f53565b60f81b82828151811061291a5761291a613be3565b60200101906001600160f81b031916908160001a90535061293a81613aed565b9050612895565b5061294b81613f6c565b60601c9392505050565b60606000825b85811015612a705786868281811061297557612975613be3565b909101356001600160f81b031916601d60f91b039050612a5e5784805190602001206129da88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992508691506127449050565b80519060200120146129ff575050604080516020810190915260008152905081612b56565b80612a0981613aed565b9150508581108015612a435750868682818110612a2857612a28613be3565b9050013560f81c60f81b6001600160f81b031916600160fd1b145b15612a565780612a5281613aed565b9150505b809350612a70565b80612a6881613aed565b91505061295b565b85811015612b0e57868682818110612a8a57612a8a613be3565b909101356001600160f81b031916600560f91b039050612afc57612ae787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508591506127449050565b612af2826001613bd0565b9250925050612b56565b80612b0681613aed565b915050612a70565b612b5187878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508892508591506127449050565b925090505b94509492505050565b600080805b8351811015612bbc576030848281518110612b8157612b81613be3565b0160200151612b93919060f81c613cb3565b612b9e83600a613f20565b612ba89190613bd0565b915080612bb481613aed565b915050612b64565b5092915050565b6060600082815b612bd5600187613cb3565b821015612cd057868683818110612bee57612bee613be3565b9050013560f81c60f81b6001600160f81b031916602d60f81b148015612c4657508686612c1c846001613bd0565b818110612c2b57612c2b613be3565b9050013560f81c60f81b6001600160f81b031916600160fd1b145b15612c6a57612c56600283613bd0565b915080612c6281613aed565b915050612c6f565b612cd0565b8582108015612ca75750868683818110612c8b57612c8b613be3565b9050013560f81c60f81b6001600160f81b031916600a60f81b14155b15612cbe5781612cb681613aed565b925050612c6f565b81612cc881613aed565b925050612bca565b6000816001600160401b03811115612cea57612cea6135ab565b604051908082528060200260200182016040528015612d1d57816020015b6060815260200190600190039081612d085790505b50905085925060005b612d31600189613cb3565b84108015612d3f5750828114155b15612ea557888885818110612d5657612d56613be3565b9050013560f81c60f81b6001600160f81b031916602d60f81b148015612dae57508888612d84866001613bd0565b818110612d9357612d93613be3565b9050013560f81c60f81b6001600160f81b031916600160fd1b145b15612dc157612dbe846002613bd0565b96505b8784108015612df95750888885818110612ddd57612ddd613be3565b9050013560f81c60f81b6001600160f81b031916600a60f81b14155b15612e105783612e0881613aed565b945050612dc1565b612e5389898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508891506127449050565b828281518110612e6557612e65613be3565b60200260200101819052508080612e7b90613aed565b915050878403612e935783612e8f81613fa3565b9450505b83612e9d81613aed565b945050612d26565b509791965090945050505050565b60006107b25b8761ffff168161ffff161015612f0f57612ed281613219565b15612eec57612ee56301e2850083613bd0565b9150612efd565b612efa6301e1338083613bd0565b91505b80612f0781613fba565b915050612eb9565b612f17613375565b601f8152612f2489613219565b15612f3557601d6020820152612f3d565b601c60208201525b601f60408201819052601e606083018190526080830182905260a0830181905260c0830182905260e0830182905261010083018190526101208301829052610140830152610160820152600191505b8760ff168261ffff161015612ff15780612fa7600184613fdb565b61ffff16600c8110612fbb57612fbb613be3565b6020020151612fcd9062015180613ff6565b612fdd9063ffffffff1684613bd0565b925081612fe981613fba565b925050612f8c565b612ffc600188614016565b61300c9060ff1662015180613ff6565b61301c9063ffffffff1684613bd0565b925061302d60ff8716610e10613ff6565b61303d9063ffffffff1684613bd0565b925061304d60ff8616603c61402f565b61305b9061ffff1684613bd0565b925061125460ff851684613bd0565b60606000806004600160981b016001600160a01b0316878787876040516020016130979493929190613cf2565b60408051601f19818403018152908290526130b191613d2e565b600060405180830381855afa9150503d80600081146130ec576040519150601f19603f3d011682016040523d82523d6000602084013e6130f1565b606091505b5091509150816125b15760405162461bcd60e51b815260206004820152600f60248201526e191958dc9e5c1d0e8819985a5b1959608a1b60448201526064016105ab565b6000600360fc1b60f883901b6001600160f81b0319161080159061316b5750603960f81b60f883901b6001600160f81b03191611155b1561317b57612471603083614016565b606160f81b60f883901b6001600160f81b031916108015906131af5750603360f91b60f883901b6001600160f81b03191611155b156131cb5760616131c183600a613f53565b6124719190614016565b604160f81b60f883901b6001600160f81b031916108015906131ff5750602360f91b60f883901b6001600160f81b03191611155b156132115760416131c183600a613f53565b506000919050565b600061322660048361404d565b61ffff161561323757506000919050565b61324260648361404d565b61ffff161561325357506001919050565b61325f6101908361404d565b61ffff161561327057506000919050565b506001919050565b6040518060a001604052806060815260200160006001600160a01b031681526020016000815260200160608152602001606081525090565b5080546000825560040290600052602060002090810190611e969190613394565b5080546132dd90613995565b6000825580601f106132ed575050565b601f016020900490600052602060002090810190611e9691906133d1565b6040518061018001604052806060815260200160006001600160a01b03168152602001606081526020016060815260200160608152602001600081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b604051806101800160405280600c906020820280368337509192915050565b808211156133cd5760006133a882826132d1565b6133b66001830160006132d1565b506000600282018190556003820155600401613394565b5090565b5b808211156133cd57600081556001016133d2565b6000602082840312156133f857600080fd5b5035919050565b60005b8381101561341a578181015183820152602001613402565b50506000910152565b6000815180845261343b8160208601602086016133ff565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156134dc57603f1989840301855281516080815181865261349c82870182613423565b915050888201518582038a8701526134b48282613423565b838a0151878b0152606093840151939096019290925250509386019390860190600101613476565b509098975050505050505050565b60008083601f8401126134fc57600080fd5b5081356001600160401b0381111561351357600080fd5b60208301915083602082850101111561352b57600080fd5b9250929050565b60008060008060006060868803121561354a57600080fd5b8535945060208601356001600160401b038082111561356857600080fd5b61357489838a016134ea565b9096509450604088013591508082111561358d57600080fd5b5061359a888289016134ea565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156135e3576135e36135ab565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613611576136116135ab565b604052919050565b60006001600160401b03821115613632576136326135ab565b50601f01601f191660200190565b600082601f83011261365157600080fd5b813561366461365f82613619565b6135e9565b81815284602083860101111561367957600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156136a857600080fd5b81356001600160401b038111156136be57600080fd5b6136ca84828501613640565b949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561370a578351835292840192918401916001016136ee565b50909695505050505050565b6000806040838503121561372957600080fd5b50508035926020909101359150565b60808152600061374b6080830187613423565b828103602084015261375d8187613423565b604084019590955250506060015292915050565b84815260806020820152600061378a6080830186613423565b6040830194909452506060015292915050565b6001600160a01b0381168114611e9657600080fd5b6000602082840312156137c457600080fd5b81356126658161379d565b600080600083850360808112156137e557600080fd5b84356001600160401b038111156137fb57600080fd5b613807878288016134ea565b9095509350506060601f198201121561381f57600080fd5b506020840190509250925092565b6020815260006126656020830184613423565b6000806000806060858703121561385657600080fd5b8435935060208501356001600160401b038082111561387457600080fd5b613880888389016134ea565b9095509350604087013591508082111561389957600080fd5b506138a687828801613640565b91505092959194509250565b600080604083850312156138c557600080fd5b8235915060208301356001600160401b038111156138e257600080fd5b6138ee85828601613640565b9150509250929050565b6020815281516020820152600060208301516080604084015261391e60a0840182613423565b905060408401516060840152606084015160808401528091505092915050565b6000806040838503121561395157600080fd5b823561395c8161379d565b946020939093013593505050565b60208082526011908201527014d95cdcda5bdb881b9bdd08199bdd5b99607a1b604082015260600190565b600181811c908216806139a957607f821691505b60208210810361074e57634e487b7160e01b600052602260045260246000fd5b601f821115613a1357600081815260208120601f850160051c810160208610156139f05750805b601f850160051c820191505b81811015613a0f578281556001016139fc565b5050505b505050565b81516001600160401b03811115613a3157613a316135ab565b613a4581613a3f8454613995565b846139c9565b602080601f831160018114613a7a5760008415613a625750858301515b600019600386901b1c1916600185901b178555613a0f565b600085815260208120601f198616915b82811015613aa957888601518255948401946001909101908401613a8a565b5085821015613ac75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600060018201613aff57613aff613ad7565b5060010190565b7f19457468657265756d205369676e6564204d6573736167653a0a000000000000815260008451613b3e81601a8501602089016133ff565b82018385601a83013760009301601a0192835250909392505050565b6000808354613b6881613995565b60018281168015613b805760018114613b9557613bc4565b60ff1984168752821515830287019450613bc4565b8760005260208060002060005b85811015613bbb5781548a820152908401908201613ba2565b50505082870194505b50929695505050505050565b8082018082111561247157612471613ad7565b634e487b7160e01b600052603260045260246000fd5b60006020808352835160a082850152613c1560c0850182613423565b905060018060a01b0382860151166040850152604085015160608501526060850151601f1980868403016080870152613c4e8383613423565b6080880151878203830160a089015280518083529194508501925084840190600581901b8501860160005b82811015613ca55784878303018452613c93828751613423565b95880195938801939150600101613c79565b509998505050505050505050565b8181038181111561247157612471613ad7565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b848152836020820152608060408201526000613d116080830185613423565b8281036060840152613d238185613423565b979650505050505050565b60008251613d408184602087016133ff565b9190910192915050565b600082601f830112613d5b57600080fd5b8151613d6961365f82613619565b818152846020838601011115613d7e57600080fd5b6136ca8260208301602087016133ff565b8051613d9a8161379d565b919050565b600082601f830112613db057600080fd5b815160206001600160401b0380831115613dcc57613dcc6135ab565b8260051b613ddb8382016135e9565b9384528581018301938381019088861115613df557600080fd5b84880192505b85831015613e3157825184811115613e135760008081fd5b613e218a87838c0101613d4a565b8352509184019190840190613dfb565b98975050505050505050565b600060208284031215613e4f57600080fd5b81516001600160401b0380821115613e6657600080fd5b9083019060a08286031215613e7a57600080fd5b613e826135c1565b825182811115613e9157600080fd5b613e9d87828601613d4a565b825250613eac60208401613d8f565b602082015260408301516040820152606083015182811115613ecd57600080fd5b613ed987828601613d4a565b606083015250608083015182811115613ef157600080fd5b613efd87828601613d9f565b60808301525095945050505050565b600082613f1b57613f1b613cdc565b500490565b808202811582820484141761247157612471613ad7565b60ff8181168382160290811690818114612bbc57612bbc613ad7565b60ff818116838216019081111561247157612471613ad7565b805160208201516001600160601b03198082169291906014831015613f9b5780818460140360031b1b83161693505b505050919050565b600081613fb257613fb2613ad7565b506000190190565b600061ffff808316818103613fd157613fd1613ad7565b6001019392505050565b61ffff828116828216039080821115612bbc57612bbc613ad7565b63ffffffff818116838216028082169190828114611b9a57611b9a613ad7565b60ff828116828216039081111561247157612471613ad7565b61ffff818116838216028082169190828114611b9a57611b9a613ad7565b600061ffff8084168061406257614062613cdc565b9216919091069291505056fea26469706673582212200bed27265fea600a932c9c4f16ab80e84daa6f3a0e9fad9a191b1738ba02c18364736f6c63430008140033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "author": "BuidlGuidl",
        "errors": {
          "OwnableInvalidOwner(address)": [
            {
              "details": "The owner is not a valid owner account. (eg. `address(0)`)"
            }
          ],
          "OwnableUnauthorizedAccount(address)": [
            {
              "details": "The caller account is not authorized to perform an operation."
            }
          ]
        },
        "kind": "dev",
        "methods": {
          "closeSession(bytes32)": {
            "params": {
              "sessionId": "The session ID to close"
            }
          },
          "createNewSession()": {
            "returns": {
              "_0": "sessionId The new session ID"
            }
          },
          "deleteSession(bytes32)": {
            "params": {
              "sessionId": "The session ID to delete"
            }
          },
          "domain()": {
            "returns": {
              "_0": "The domain string"
            }
          },
          "getActiveSessions()": {
            "returns": {
              "_0": "Array of active session IDs"
            }
          },
          "getAllSessionIds(bytes)": {
            "returns": {
              "_0": "Array of session IDs"
            }
          },
          "getChatHistory(bytes32)": {
            "params": {
              "sessionId": "The session ID"
            },
            "returns": {
              "_0": "Array of chat messages"
            }
          },
          "getChatSummary(bytes32,bytes)": {
            "params": {
              "sessionId": "The session ID"
            },
            "returns": {
              "_0": "Chat summary"
            }
          },
          "getSessionInfo(bytes32)": {
            "params": {
              "sessionId": "The session ID"
            },
            "returns": {
              "_0": "Session information"
            }
          },
          "getSessionMessageCount(bytes32)": {
            "params": {
              "sessionId": "The session ID"
            },
            "returns": {
              "_0": "Message count"
            }
          },
          "getUserInfo()": {
            "returns": {
              "_createdAt": "Contract creation timestamp",
              "_subscriptionId": "Subscription ID",
              "_totalSessions": "Total number of sessions",
              "_user": "User address"
            }
          },
          "login(string,(bytes32,bytes32,uint256))": {
            "params": {
              "sig": "The signature of the SIWE message",
              "siweMsg": "The signed SIWE message"
            },
            "returns": {
              "_0": "The encrypted authentication token"
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "setTEEContract(address)": {
            "params": {
              "_teeContract": "TEE contract address"
            }
          },
          "storeChatMessage(bytes32,bytes,bytes)": {
            "params": {
              "encryptedAIResponse": "Encrypted AI response",
              "encryptedUserMessage": "Encrypted user message",
              "sessionId": "The session ID"
            }
          },
          "storeChatSummary(bytes32,bytes,bytes)": {
            "params": {
              "encryptedSummary": "Encrypted summary from AI",
              "sessionId": "The session ID",
              "token": "SIWE authentication token"
            }
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_2480": {
              "entryPoint": null,
              "id": 2480,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_2938": {
              "entryPoint": null,
              "id": 2938,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_9650": {
              "entryPoint": null,
              "id": 9650,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_transferOwnership_3034": {
              "entryPoint": 176,
              "id": 3034,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@randomBytes_955": {
              "entryPoint": 256,
              "id": 955,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_string_memory_ptr_fromMemory": {
              "entryPoint": 558,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 1183,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_54f87774dc8d710bae7c8849a070812ab4228b580286569c644fb9102fd93bac__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 1123,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "array_dataslot_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "clean_up_bytearray_end_slots_string_storage": {
              "entryPoint": 836,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
              "entryPoint": 742,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
              "entryPoint": 919,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 520,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 782,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_used_part_and_set_length_of_short_byte_array": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x41": {
              "entryPoint": 498,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:5509:22",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:22",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "46:95:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "63:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "70:3:22",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "75:10:22",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "66:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "66:20:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "56:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "56:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "56:31:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "103:1:22",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "106:4:22",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "96:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "96:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "96:15:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "127:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "130:4:22",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "120:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "120:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "120:15:22"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14:127:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "212:184:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "222:10:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "231:1:22",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "226:1:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "291:63:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "316:3:22"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "321:1:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "312:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "312:11:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "335:3:22"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "340:1:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "331:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "331:11:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "325:5:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "325:18:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "305:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "305:39:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "305:39:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "252:1:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "255:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "249:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "249:13:22"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "263:19:22",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "265:15:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "274:1:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "277:2:22",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "270:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "270:10:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "265:1:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "245:3:22",
                            "statements": []
                          },
                          "src": "241:113:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "374:3:22"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "379:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "370:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "370:16:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "388:1:22",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "363:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "363:27:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "363:27:22"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory_with_cleanup",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "190:3:22",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "195:3:22",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "200:6:22",
                        "type": ""
                      }
                    ],
                    "src": "146:250:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "492:806:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "538:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "547:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "550:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "540:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "540:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "540:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "513:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "522:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "509:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "509:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "534:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "505:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "505:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "502:52:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "563:30:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "583:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "577:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "577:16:22"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "567:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "602:28:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "620:2:22",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "624:1:22",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "616:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "616:10:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "628:1:22",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "612:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "612:18:22"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "606:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "657:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "666:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "669:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "659:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "659:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "659:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "645:6:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "653:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "642:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "642:14:22"
                          },
                          "nodeType": "YulIf",
                          "src": "639:34:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "682:32:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "696:9:22"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "707:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "692:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "692:22:22"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "686:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "762:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "771:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "774:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "764:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "764:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "764:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "741:2:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "745:4:22",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "737:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "737:13:22"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "752:7:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "733:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "733:27:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "726:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "726:35:22"
                          },
                          "nodeType": "YulIf",
                          "src": "723:55:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "787:19:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "803:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "797:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "797:9:22"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "791:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "829:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "831:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "831:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "831:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "821:2:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "825:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "818:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "818:10:22"
                          },
                          "nodeType": "YulIf",
                          "src": "815:36:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "860:17:22",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "874:2:22",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "870:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "870:7:22"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "864:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "886:23:22",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "906:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "900:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "900:9:22"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "890:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "918:71:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "940:6:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_3",
                                                "nodeType": "YulIdentifier",
                                                "src": "964:2:22"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "968:4:22",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "960:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "960:13:22"
                                          },
                                          {
                                            "name": "_4",
                                            "nodeType": "YulIdentifier",
                                            "src": "975:2:22"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "956:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "956:22:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "980:2:22",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "952:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "952:31:22"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "985:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "948:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "948:40:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "936:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "936:53:22"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "922:10:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1048:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1050:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1050:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1050:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1007:10:22"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1019:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1004:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1004:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1027:10:22"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1039:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1024:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1024:22:22"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "1001:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1001:46:22"
                          },
                          "nodeType": "YulIf",
                          "src": "998:72:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1086:2:22",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1090:10:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1079:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1079:22:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1079:22:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1117:6:22"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1125:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1110:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1110:18:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1110:18:22"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1174:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1183:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1186:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1176:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1176:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1176:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "1151:2:22"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "1155:2:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1147:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1147:11:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1160:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1143:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1143:20:22"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1165:7:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1140:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1140:33:22"
                          },
                          "nodeType": "YulIf",
                          "src": "1137:53:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1238:2:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1242:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1234:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1234:11:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1251:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1259:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1247:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1247:15:22"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1264:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "1199:34:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1199:68:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1199:68:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1276:16:22",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "1286:6:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1276:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "458:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "469:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "481:6:22",
                        "type": ""
                      }
                    ],
                    "src": "401:897:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1404:102:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1414:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1426:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1437:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1422:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1422:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1414:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1456:9:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1471:6:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1487:3:22",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1492:1:22",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1483:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1483:11:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1496:1:22",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1479:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1479:19:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1467:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1467:32:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1449:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1449:51:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1449:51:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1373:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1384:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1395:4:22",
                        "type": ""
                      }
                    ],
                    "src": "1303:203:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1605:203:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1615:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "1635:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1629:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1629:12:22"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "1619:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1650:32:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array",
                                    "nodeType": "YulIdentifier",
                                    "src": "1669:5:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1676:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1665:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1665:16:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1659:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1659:23:22"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "1650:5:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1719:83:22",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "1733:59:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "1746:5:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1761:1:22",
                                              "type": "",
                                              "value": "3"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "1768:4:22",
                                                  "type": "",
                                                  "value": "0x20"
                                                },
                                                {
                                                  "name": "length",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1774:6:22"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "1764:3:22"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "1764:17:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "1757:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1757:25:22"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1788:1:22",
                                              "type": "",
                                              "value": "0"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "1784:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1784:6:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "1753:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1753:38:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "1742:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1742:50:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1733:5:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1697:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1705:4:22",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "1694:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1694:16:22"
                          },
                          "nodeType": "YulIf",
                          "src": "1691:111:22"
                        }
                      ]
                    },
                    "name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "1585:5:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1595:5:22",
                        "type": ""
                      }
                    ],
                    "src": "1511:297:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1868:325:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1878:22:22",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1892:1:22",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "1895:4:22"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "1888:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1888:12:22"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "1878:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1909:38:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "1939:4:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1945:1:22",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1935:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1935:12:22"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "1913:18:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1986:31:22",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "1988:27:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "2002:6:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2010:4:22",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "1998:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1998:17:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "1988:6:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "1966:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1959:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1959:26:22"
                          },
                          "nodeType": "YulIf",
                          "src": "1956:61:22"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2076:111:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2097:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2104:3:22",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2109:10:22",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "2100:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2100:20:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2090:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2090:31:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2090:31:22"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2141:1:22",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2144:4:22",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2134:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2134:15:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2134:15:22"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2169:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2172:4:22",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2162:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2162:15:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2162:15:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "2032:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2055:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2063:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2052:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2052:14:22"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "2029:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2029:38:22"
                          },
                          "nodeType": "YulIf",
                          "src": "2026:161:22"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "1848:4:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "1857:6:22",
                        "type": ""
                      }
                    ],
                    "src": "1813:380:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2254:65:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2271:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "2274:3:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2264:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2264:14:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2264:14:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2287:26:22",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2305:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2308:4:22",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nodeType": "YulIdentifier",
                              "src": "2295:9:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2295:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "2287:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "2237:3:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "2245:4:22",
                        "type": ""
                      }
                    ],
                    "src": "2198:121:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2405:464:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2438:425:22",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2452:11:22",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2462:1:22",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulTypedName",
                                    "src": "2456:2:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2483:2:22"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "2487:5:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2476:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2476:17:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2476:17:22"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2506:31:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2528:2:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2532:4:22",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "keccak256",
                                    "nodeType": "YulIdentifier",
                                    "src": "2518:9:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2518:19:22"
                                },
                                "variables": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulTypedName",
                                    "src": "2510:4:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2550:57:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "2573:4:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2583:1:22",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "startIndex",
                                              "nodeType": "YulIdentifier",
                                              "src": "2590:10:22"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "2602:2:22",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "2586:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2586:19:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2579:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2579:27:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2569:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2569:38:22"
                                },
                                "variables": [
                                  {
                                    "name": "deleteStart",
                                    "nodeType": "YulTypedName",
                                    "src": "2554:11:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "2644:23:22",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "2646:19:22",
                                      "value": {
                                        "name": "data",
                                        "nodeType": "YulIdentifier",
                                        "src": "2661:4:22"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "deleteStart",
                                          "nodeType": "YulIdentifier",
                                          "src": "2646:11:22"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "startIndex",
                                      "nodeType": "YulIdentifier",
                                      "src": "2626:10:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2638:4:22",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "2623:2:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2623:20:22"
                                },
                                "nodeType": "YulIf",
                                "src": "2620:47:22"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2680:41:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "2694:4:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2704:1:22",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "len",
                                              "nodeType": "YulIdentifier",
                                              "src": "2711:3:22"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "2716:2:22",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "2707:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2707:12:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "2700:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2700:20:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2690:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2690:31:22"
                                },
                                "variables": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulTypedName",
                                    "src": "2684:2:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2734:24:22",
                                "value": {
                                  "name": "deleteStart",
                                  "nodeType": "YulIdentifier",
                                  "src": "2747:11:22"
                                },
                                "variables": [
                                  {
                                    "name": "start",
                                    "nodeType": "YulTypedName",
                                    "src": "2738:5:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "2832:21:22",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "2841:5:22"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "2848:2:22"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "2834:6:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2834:17:22"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "2834:17:22"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nodeType": "YulIdentifier",
                                      "src": "2782:5:22"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "2789:2:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "2779:2:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2779:13:22"
                                },
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nodeType": "YulBlock",
                                  "src": "2793:26:22",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "2795:22:22",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "2808:5:22"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2815:1:22",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2804:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2804:13:22"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "start",
                                          "nodeType": "YulIdentifier",
                                          "src": "2795:5:22"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nodeType": "YulBlock",
                                  "src": "2775:3:22",
                                  "statements": []
                                },
                                "src": "2771:82:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "len",
                                "nodeType": "YulIdentifier",
                                "src": "2421:3:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2426:2:22",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2418:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2418:11:22"
                          },
                          "nodeType": "YulIf",
                          "src": "2415:448:22"
                        }
                      ]
                    },
                    "name": "clean_up_bytearray_end_slots_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "2377:5:22",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "2384:3:22",
                        "type": ""
                      },
                      {
                        "name": "startIndex",
                        "nodeType": "YulTypedName",
                        "src": "2389:10:22",
                        "type": ""
                      }
                    ],
                    "src": "2324:545:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2959:81:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2969:65:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulIdentifier",
                                    "src": "2984:4:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "3002:1:22",
                                                "type": "",
                                                "value": "3"
                                              },
                                              {
                                                "name": "len",
                                                "nodeType": "YulIdentifier",
                                                "src": "3005:3:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "2998:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "2998:11:22"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "3015:1:22",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nodeType": "YulIdentifier",
                                              "src": "3011:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3011:6:22"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shr",
                                          "nodeType": "YulIdentifier",
                                          "src": "2994:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2994:24:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "2990:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2990:29:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2980:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2980:40:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3026:1:22",
                                    "type": "",
                                    "value": "1"
                                  },
                                  {
                                    "name": "len",
                                    "nodeType": "YulIdentifier",
                                    "src": "3029:3:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "3022:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3022:11:22"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "2977:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2977:57:22"
                          },
                          "variableNames": [
                            {
                              "name": "used",
                              "nodeType": "YulIdentifier",
                              "src": "2969:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "extract_used_part_and_set_length_of_short_byte_array",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "2936:4:22",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "2942:3:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "used",
                        "nodeType": "YulTypedName",
                        "src": "2950:4:22",
                        "type": ""
                      }
                    ],
                    "src": "2874:166:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3141:1256:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3151:24:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "3171:3:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3165:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3165:10:22"
                          },
                          "variables": [
                            {
                              "name": "newLen",
                              "nodeType": "YulTypedName",
                              "src": "3155:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3218:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "3220:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3220:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3220:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "3190:6:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3206:2:22",
                                        "type": "",
                                        "value": "64"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3210:1:22",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "3202:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3202:10:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3214:1:22",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3198:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3198:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3187:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3187:30:22"
                          },
                          "nodeType": "YulIf",
                          "src": "3184:56:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nodeType": "YulIdentifier",
                                "src": "3293:4:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nodeType": "YulIdentifier",
                                        "src": "3331:4:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sload",
                                      "nodeType": "YulIdentifier",
                                      "src": "3325:5:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3325:11:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "extract_byte_array_length",
                                  "nodeType": "YulIdentifier",
                                  "src": "3299:25:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3299:38:22"
                              },
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "3339:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "clean_up_bytearray_end_slots_string_storage",
                              "nodeType": "YulIdentifier",
                              "src": "3249:43:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3249:97:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3249:97:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3355:18:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3372:1:22",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulTypedName",
                              "src": "3359:9:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3382:23:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3401:4:22",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "srcOffset_1",
                              "nodeType": "YulTypedName",
                              "src": "3386:11:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3414:24:22",
                          "value": {
                            "name": "srcOffset_1",
                            "nodeType": "YulIdentifier",
                            "src": "3427:11:22"
                          },
                          "variableNames": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulIdentifier",
                              "src": "3414:9:22"
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3484:656:22",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "3498:35:22",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "3517:6:22"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "3529:2:22",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "3525:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3525:7:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "3513:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3513:20:22"
                                    },
                                    "variables": [
                                      {
                                        "name": "loopEnd",
                                        "nodeType": "YulTypedName",
                                        "src": "3502:7:22",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "3546:49:22",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "3590:4:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "3560:29:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3560:35:22"
                                    },
                                    "variables": [
                                      {
                                        "name": "dstPtr",
                                        "nodeType": "YulTypedName",
                                        "src": "3550:6:22",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "3608:10:22",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3617:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "3612:1:22",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "3695:172:22",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "3720:6:22"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "3738:3:22"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "3743:9:22"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "3734:3:22"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "3734:19:22"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3728:5:22"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "3728:26:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "3713:6:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3713:42:22"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "3713:42:22"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "3772:24:22",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "3786:6:22"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "3794:1:22",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "3782:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3782:14:22"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dstPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "3772:6:22"
                                            }
                                          ]
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "3813:40:22",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "3830:9:22"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "3841:11:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "3826:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3826:27:22"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcOffset",
                                              "nodeType": "YulIdentifier",
                                              "src": "3813:9:22"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "3642:1:22"
                                        },
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "3645:7:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "3639:2:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3639:14:22"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "3654:28:22",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "3656:24:22",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "3665:1:22"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "3668:11:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "3661:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3661:19:22"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "3656:1:22"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "3635:3:22",
                                      "statements": []
                                    },
                                    "src": "3631:236:22"
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "3915:166:22",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "3933:43:22",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3960:3:22"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3965:9:22"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3956:3:22"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "3956:19:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "3950:5:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3950:26:22"
                                          },
                                          "variables": [
                                            {
                                              "name": "lastValue",
                                              "nodeType": "YulTypedName",
                                              "src": "3937:9:22",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "4000:6:22"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "lastValue",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "4012:9:22"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "arguments": [
                                                                  {
                                                                    "kind": "number",
                                                                    "nodeType": "YulLiteral",
                                                                    "src": "4039:1:22",
                                                                    "type": "",
                                                                    "value": "3"
                                                                  },
                                                                  {
                                                                    "name": "newLen",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "4042:6:22"
                                                                  }
                                                                ],
                                                                "functionName": {
                                                                  "name": "shl",
                                                                  "nodeType": "YulIdentifier",
                                                                  "src": "4035:3:22"
                                                                },
                                                                "nodeType": "YulFunctionCall",
                                                                "src": "4035:14:22"
                                                              },
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "4051:3:22",
                                                                "type": "",
                                                                "value": "248"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "and",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "4031:3:22"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "4031:24:22"
                                                          },
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "4061:1:22",
                                                                "type": "",
                                                                "value": "0"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "not",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "4057:3:22"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "4057:6:22"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "shr",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "4027:3:22"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "4027:37:22"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "not",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "4023:3:22"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "4023:42:22"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "and",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "4008:3:22"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "4008:58:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "3993:6:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3993:74:22"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "3993:74:22"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "3886:7:22"
                                        },
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "3895:6:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "3883:2:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3883:19:22"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "3880:201:22"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "4101:4:22"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "4115:1:22",
                                                  "type": "",
                                                  "value": "1"
                                                },
                                                {
                                                  "name": "newLen",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "4118:6:22"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "4111:3:22"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "4111:14:22"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "4127:1:22",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "4107:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4107:22:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "4094:6:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4094:36:22"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4094:36:22"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "3477:663:22",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3482:1:22",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "4157:234:22",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "4171:14:22",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4184:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulTypedName",
                                        "src": "4175:5:22",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "4220:67:22",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "4238:35:22",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "4257:3:22"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "4262:9:22"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "4253:3:22"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "4253:19:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "4247:5:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "4247:26:22"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "4238:5:22"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "4201:6:22"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "4198:89:22"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "4307:4:22"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "4366:5:22"
                                            },
                                            {
                                              "name": "newLen",
                                              "nodeType": "YulIdentifier",
                                              "src": "4373:6:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "extract_used_part_and_set_length_of_short_byte_array",
                                            "nodeType": "YulIdentifier",
                                            "src": "4313:52:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "4313:67:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "4300:6:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "4300:81:22"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "4300:81:22"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "4149:242:22",
                              "value": "default"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "3457:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3465:2:22",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3454:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3454:14:22"
                          },
                          "nodeType": "YulSwitch",
                          "src": "3447:944:22"
                        }
                      ]
                    },
                    "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nodeType": "YulTypedName",
                        "src": "3126:4:22",
                        "type": ""
                      },
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "3132:3:22",
                        "type": ""
                      }
                    ],
                    "src": "3045:1352:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4549:318:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4566:9:22"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4577:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4559:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4559:25:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4559:25:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4604:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4615:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4600:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4600:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4620:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4593:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4593:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4593:30:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4632:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "4652:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4646:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4646:13:22"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "4636:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4679:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4690:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4675:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4675:18:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4695:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4668:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4668:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4668:34:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4750:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4758:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4746:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4746:15:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4767:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4778:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4763:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4763:18:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4783:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "4711:34:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4711:79:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4711:79:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4799:62:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4815:9:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "4834:6:22"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4842:2:22",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "4830:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4830:15:22"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4851:2:22",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "4847:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4847:7:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "4826:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4826:29:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4811:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4811:45:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4858:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4807:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4807:54:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4799:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4510:9:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "4521:6:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4529:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4540:4:22",
                        "type": ""
                      }
                    ],
                    "src": "4402:465:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5009:150:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5019:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5039:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5033:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5033:13:22"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "5023:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5094:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5102:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5090:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5090:17:22"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5109:3:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5114:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "5055:34:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5055:66:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5055:66:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5130:23:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5141:3:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5146:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5137:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5137:16:22"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "5130:3:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "4985:3:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4990:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "5001:3:22",
                        "type": ""
                      }
                    ],
                    "src": "4872:287:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5338:169:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5355:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5366:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5348:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5348:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5348:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5389:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5400:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5385:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5385:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5405:2:22",
                                "type": "",
                                "value": "19"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5378:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5378:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5378:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5428:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5439:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5424:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5424:18:22"
                              },
                              {
                                "hexValue": "72616e646f6d42797465733a206661696c6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5444:21:22",
                                "type": "",
                                "value": "randomBytes: failed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5417:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5417:49:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5417:49:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5475:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5487:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5498:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5483:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5483:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5475:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_54f87774dc8d710bae7c8849a070812ab4228b580286569c644fb9102fd93bac__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5315:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5329:4:22",
                        "type": ""
                      }
                    ],
                    "src": "5164:343:22"
                  }
                ]
              },
              "contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_2, 32), add(memPtr, 32), _3)\n        value0 := memPtr\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_uint256_t_bytes_memory_ptr__to_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 64)\n        let length := mload(value1)\n        mstore(add(headStart, 64), length)\n        copy_memory_to_memory_with_cleanup(add(value1, 32), add(headStart, 96), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 96)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_54f87774dc8d710bae7c8849a070812ab4228b580286569c644fb9102fd93bac__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"randomBytes: failed\")\n        tail := add(headStart, 96)\n    }\n}",
              "id": 22,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x4571 CODESIZE SUB DUP1 PUSH3 0x4571 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x22E JUMP JUMPDEST DUP1 CALLER DUP1 PUSH3 0x5D JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0x68 DUP2 PUSH3 0xB0 JUMP JUMPDEST POP PUSH3 0x8B PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH3 0x100 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x96 SWAP1 PUSH3 0x2E6 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH1 0x2 PUSH3 0xA7 DUP3 DUP3 PUSH3 0x397 JUMP JUMPDEST POP POP POP PUSH3 0x4BD JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH20 0x100000000000000000000000000000000000001 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x138 SWAP3 SWAP2 SWAP1 PUSH3 0x463 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x154 SWAP2 PUSH3 0x49F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x191 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x196 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH3 0x1EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x72616E646F6D42797465733A206661696C656400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH3 0x54 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x225 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x20B JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x259 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x26E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x283 JUMPI PUSH3 0x283 PUSH3 0x1F2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x2AE JUMPI PUSH3 0x2AE PUSH3 0x1F2 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH3 0x2C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2DB DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x208 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH3 0x308 JUMPI PUSH1 0x0 NOT DUP2 PUSH1 0x20 SUB PUSH1 0x3 SHL SHL DUP3 AND SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x323 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x308 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x392 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x36D JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x38E JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x379 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x3B3 JUMPI PUSH3 0x3B3 PUSH3 0x1F2 JUMP JUMPDEST PUSH3 0x3CB DUP2 PUSH3 0x3C4 DUP5 SLOAD PUSH3 0x30E JUMP JUMPDEST DUP5 PUSH3 0x344 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x403 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x3EA JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x38E JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x434 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x413 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x453 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x40 DUP5 ADD MSTORE PUSH3 0x48A DUP2 PUSH1 0x60 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH3 0x208 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x60 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH3 0x4B3 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH3 0x208 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x40A4 DUP1 PUSH3 0x4CD PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7F476B6F GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xB1F0F51A GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xCD6DC687 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xCD6DC687 EQ PUSH2 0x485 JUMPI DUP1 PUSH4 0xCF09E0D0 EQ PUSH2 0x498 JUMPI DUP1 PUSH4 0xDA45B383 EQ PUSH2 0x4A1 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB1F0F51A EQ PUSH2 0x3E0 JUMPI DUP1 PUSH4 0xB8216FD7 EQ PUSH2 0x3F3 JUMPI DUP1 PUSH4 0xC2FB26A6 EQ PUSH2 0x413 JUMPI DUP1 PUSH4 0xCA3BCC1F EQ PUSH2 0x41B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9A9D575F GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x9A9D575F EQ PUSH2 0x39F JUMPI DUP1 PUSH4 0x9E975D27 EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0xA0081805 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0xA6CE7478 EQ PUSH2 0x3CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7F476B6F EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0x89543AF4 EQ PUSH2 0x386 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x38E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x40D996E9 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x58DC3EB2 GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x58DC3EB2 EQ PUSH2 0x2F6 JUMPI DUP1 PUSH4 0x5D8D1585 EQ PUSH2 0x319 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0x73701FBE EQ PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x40D996E9 EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x4F8632BA EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0x55C02F97 EQ PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FE9EC2E GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x1FE9EC2E EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0x2A9834B4 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0x392E53CD EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0x3ADE240B EQ PUSH2 0x282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9C1BA2E EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x12DAA236 EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0x1F8A3B0C EQ PUSH2 0x210 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DD PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DD PUSH2 0x1FE CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x223 PUSH2 0x21E CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH2 0x50B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP2 SWAP1 PUSH2 0x344F JUMP JUMPDEST PUSH2 0x243 PUSH2 0x23E CALLDATASIZE PUSH1 0x4 PUSH2 0x3532 JUMP JUMPDEST PUSH2 0x754 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x258 PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0x3696 JUMP JUMPDEST PUSH2 0x9DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP2 SWAP1 PUSH2 0x36D2 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x272 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E7 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x290 CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH2 0xAB0 JUMP JUMPDEST PUSH2 0x2A8 PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3716 JUMP JUMPDEST PUSH2 0xC17 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x2CB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E7 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x2F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH2 0xD74 JUMP JUMPDEST PUSH2 0x309 PUSH2 0x304 CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH2 0xDF8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3771 JUMP JUMPDEST PUSH2 0x321 PUSH2 0xE1A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP6 AND DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x1E7 JUMP JUMPDEST PUSH2 0x243 PUSH2 0xE92 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x37B2 JUMP JUMPDEST PUSH2 0xEA6 JUMP JUMPDEST PUSH2 0x379 PUSH2 0x374 CALLDATASIZE PUSH1 0x4 PUSH2 0x37CF JUMP JUMPDEST PUSH2 0xF56 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP2 SWAP1 PUSH2 0x382D JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x1261 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2CB JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x2CB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x3C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH2 0x144E JUMP JUMPDEST PUSH2 0x258 PUSH2 0x146F JUMP JUMPDEST PUSH2 0x243 PUSH2 0x3DB CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH2 0x1638 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x3EE CALLDATASIZE PUSH1 0x4 PUSH2 0x3840 JUMP JUMPDEST PUSH2 0x1814 JUMP JUMPDEST PUSH2 0x406 PUSH2 0x401 CALLDATASIZE PUSH1 0x4 PUSH2 0x38B2 JUMP JUMPDEST PUSH2 0x19D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP2 SWAP1 PUSH2 0x38F8 JUMP JUMPDEST PUSH2 0x379 PUSH2 0x1BA2 JUMP JUMPDEST PUSH2 0x45B PUSH2 0x429 CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xFF AND SWAP1 DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x1E7 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x493 CALLDATASIZE PUSH1 0x4 PUSH2 0x393E JUMP JUMPDEST PUSH2 0x1C34 JUMP JUMPDEST PUSH2 0x1DD PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x4B4 PUSH2 0x4AF CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH2 0x1D3E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP2 SWAP1 PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x243 PUSH2 0x506 CALLDATASIZE PUSH1 0x4 PUSH2 0x37B2 JUMP JUMPDEST PUSH2 0x1E5B JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x539 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x55C JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP1 PUSH2 0x57B JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SUB PUSH2 0x5B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP1 PUSH2 0x396A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP2 SWAP4 SWAP1 SWAP3 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x747 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x610 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x63C SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x689 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x65E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x689 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x66C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x6A2 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6CE SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x71B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6F0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x71B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6FE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x5DD JUMP JUMPDEST POP POP POP POP SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x77F JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x7A2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 DUP1 PUSH2 0x7C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SUB PUSH2 0x7F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP1 PUSH2 0x396A JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH2 0x846 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x14D95CDCDA5BDB881A5CC818DB1BDCD959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH1 0xA0 PUSH1 0x1F DUP11 ADD DUP6 SWAP1 DIV SWAP1 SWAP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP3 ADD DUP9 DUP2 MSTORE SWAP1 SWAP4 SWAP3 DUP3 SWAP2 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP2 SWAP1 DUP6 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP SWAP1 DUP3 MSTORE POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F DUP10 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP8 DUP2 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 DUP6 MSTORE POP POP TIMESTAMP PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP4 DUP5 ADD DUP8 SWAP1 MSTORE DUP13 DUP4 MSTORE PUSH1 0x9 DUP2 MSTORE SWAP3 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 DUP4 MSTORE SWAP3 SWAP1 SWAP2 KECCAK256 DUP4 MLOAD SWAP4 SWAP5 POP DUP5 SWAP4 PUSH1 0x4 SWAP1 SWAP4 MUL ADD SWAP2 DUP3 SWAP2 POP PUSH2 0x916 SWAP1 DUP3 PUSH2 0x3A18 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SWAP1 PUSH2 0x92B SWAP1 DUP3 PUSH2 0x3A18 JUMP JUMPDEST POP PUSH1 0x40 DUP3 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 SWAP1 SWAP3 ADD MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0x95C DUP4 PUSH2 0x3AED JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 TIMESTAMP PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x4 ADD DUP1 SLOAD SWAP2 PUSH2 0x984 DUP4 PUSH2 0x3AED JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x4 SLOAD PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP3 ADD MSTORE DUP11 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH32 0x32C5FF7B08C2D334CE876E7C5137698ED9CBDA5EF37AA9A3BA3B3455B85BB08D SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x60 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0xA16 JUMPI POP PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA0A DUP3 PUSH2 0x1E99 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xA34 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0xA57 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xAA3 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xA8F JUMPI JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xADB JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0xAFE JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH2 0xB1D JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SUB PUSH2 0xB4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP1 PUSH2 0x396A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH2 0xBA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14D95CDCDA5BDB88185B1C9958591E4818DB1BDCD959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE TIMESTAMP PUSH1 0x2 SWAP1 SWAP2 ADD DUP2 SWAP1 SSTORE PUSH1 0x4 SLOAD SWAP2 MLOAD DUP5 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH32 0x6F3CA9E92D5454D42942B753C6B4666C2803BBCD56271D7431F2FA0D58AF15A5 SWAP2 PUSH2 0xC0B SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xC33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0xC57 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC83 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCD0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xCA5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCD0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCB3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xCE5 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD11 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD5E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD33 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD5E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD41 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 POP DUP5 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDA2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0xDC5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP1 PUSH2 0xDE4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH2 0xCE5 SWAP1 PUSH2 0x3995 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE4E JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0xE71 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0xC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0xE9A PUSH2 0x1EFF JUMP JUMPDEST PUSH2 0xEA4 PUSH1 0x0 PUSH2 0x1F2C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEAE PUSH2 0x1EFF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642054454520636F6E7472616374206164647265737300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x38D1ABD3B3B297938CDC6E7FBD809A8FBBA7EA6DCFA546BE3832C04D9F39D8CF SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF60 PUSH2 0x3278 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF6B DUP6 PUSH2 0x1F7C JUMP JUMPDEST DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF7F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3B06 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 DUP1 DUP7 MSTORE DUP6 DUP4 ADD DUP1 DUP7 MSTORE SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF DUP10 DUP6 ADD CALLDATALOAD AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP8 CALLDATALOAD PUSH1 0x60 DUP6 ADD MSTORE DUP8 ADD CALLDATALOAD PUSH1 0x80 DUP5 ADD MSTORE SWAP3 POP SWAP1 PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFF1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x20 DUP7 ADD MSTORE SWAP2 POP PUSH1 0x0 SWAP1 POP PUSH2 0x101A DUP9 DUP9 PUSH2 0x200E JUMP JUMPDEST SWAP1 POP CHAINID DUP2 PUSH1 0xA0 ADD MLOAD EQ PUSH2 0x1040 JUMPI PUSH1 0x40 MLOAD PUSH4 0x362C8337 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x40 MLOAD PUSH2 0x104F SWAP2 SWAP1 PUSH2 0x3B5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 PUSH1 0x0 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x1081 JUMPI PUSH1 0x40 MLOAD PUSH4 0x283D62BD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP5 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ PUSH2 0x10B5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5CC02E1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x120 DUP2 ADD MLOAD MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x10D7 JUMPI POP PUSH2 0x10D3 DUP2 PUSH2 0x120 ADD MLOAD PUSH2 0x2477 JUMP JUMPDEST TIMESTAMP GT ISZERO JUMPDEST ISZERO PUSH2 0x10F5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x299D02F1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x100 DUP2 ADD MLOAD MLOAD ISZERO PUSH2 0x111C JUMPI PUSH1 0x0 PUSH2 0x1111 DUP3 PUSH2 0x100 ADD MLOAD PUSH2 0x2477 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MSTORE POP PUSH2 0x112F JUMP JUMPDEST PUSH2 0x1129 PUSH3 0x15180 TIMESTAMP PUSH2 0x3BD0 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD TIMESTAMP LT PUSH2 0x1153 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB171155 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x160 DUP2 ADD MLOAD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x117B JUMPI PUSH2 0x117B PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x11AE JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1199 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 PUSH2 0x160 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x1218 JUMPI DUP2 PUSH2 0x160 ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x11DC JUMPI PUSH2 0x11DC PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x80 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11FA JUMPI PUSH2 0x11FA PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x1210 SWAP1 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x11B7 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1254 PUSH1 0x3 SLOAD PUSH1 0x0 DUP1 SHL DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1236 SWAP2 SWAP1 PUSH2 0x3BF9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP3 MSTORE SWAP1 PUSH2 0x24E6 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x128F JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x12B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC SLOAD PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x54 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x74 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD ISZERO PUSH2 0x136A JUMPI DUP2 PUSH2 0x131D DUP2 PUSH2 0x3AED JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x54 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP4 POP PUSH1 0x74 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x12FC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD DUP3 DUP2 MSTORE DUP4 DUP6 ADD DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x60 DUP7 ADD DUP2 DUP2 MSTORE PUSH1 0x0 PUSH1 0x80 DUP9 ADD DUP2 DUP2 MSTORE DUP11 DUP3 MSTORE PUSH1 0x8 DUP8 MSTORE DUP10 DUP3 KECCAK256 DUP10 MLOAD DUP2 SSTORE SWAP6 MLOAD DUP7 DUP6 ADD SSTORE SWAP4 MLOAD PUSH1 0x2 DUP7 ADD SSTORE SWAP1 MLOAD PUSH1 0x3 DUP6 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP2 MLOAD PUSH1 0x4 SWAP4 DUP5 ADD SSTORE PUSH1 0xC DUP1 SLOAD SWAP2 DUP3 ADD SWAP1 SSTORE PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 ADD DUP8 SWAP1 SSTORE PUSH1 0xB DUP4 MSTORE DUP6 DUP2 KECCAK256 SSTORE SLOAD SWAP4 MLOAD SWAP2 DUP3 MSTORE SWAP2 SWAP3 DUP5 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH32 0x3417DAA22E111DFEB8D71C6B05F62A3421D2AC780A3091D4EC66406D1EB96FB7 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0xC DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x145E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x149D JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x14C0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x14DD JUMPI PUSH2 0x14DD PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1506 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0xC SLOAD DUP2 LT ISZERO PUSH2 0x1595 JUMPI PUSH1 0x0 PUSH1 0xC DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x152C JUMPI PUSH2 0x152C PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD DUP1 DUP4 MSTORE PUSH1 0x8 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x1582 JUMPI DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1569 JUMPI PUSH2 0x1569 PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP3 PUSH2 0x157E DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP4 POP POP JUMPDEST POP DUP1 PUSH2 0x158D DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x150D JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x15B0 JUMPI PUSH2 0x15B0 PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x15D9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1630 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x15F9 JUMPI PUSH2 0x15F9 PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1613 JUMPI PUSH2 0x1613 PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x1628 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x15DF JUMP JUMPDEST POP SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1663 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x1686 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH2 0x16A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SUB PUSH2 0x16D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP1 PUSH2 0x396A JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xC SLOAD DUP2 LT ISZERO PUSH2 0x178E JUMPI DUP3 PUSH1 0xC DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x16F6 JUMPI PUSH2 0x16F6 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SUB PUSH2 0x177C JUMPI PUSH1 0xC DUP1 SLOAD PUSH2 0x1716 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x3CB3 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x1726 JUMPI PUSH2 0x1726 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0xC DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1744 JUMPI PUSH2 0x1744 PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SSTORE PUSH1 0xC DUP1 SLOAD DUP1 PUSH2 0x1761 JUMPI PUSH2 0x1761 PUSH2 0x3CC6 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE PUSH2 0x178E JUMP JUMPDEST DUP1 PUSH2 0x1786 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x16D8 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP5 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP5 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x4 ADD DUP4 SWAP1 SSTORE PUSH1 0x9 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x17D3 SWAP2 PUSH2 0x32B0 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE SWAP1 PUSH2 0x17F2 PUSH1 0x1 DUP4 ADD DUP3 PUSH2 0x32D1 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x2 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x3 SWAP1 SWAP2 ADD DUP2 SWAP1 SSTORE SWAP2 DUP3 MSTORE POP PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x184D JUMPI POP PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1841 DUP3 PUSH2 0x1E99 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x186B JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x188E JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 DUP1 PUSH2 0x18AD JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SUB PUSH2 0x18DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP1 PUSH2 0x396A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 DUP6 MSTORE POP POP TIMESTAMP PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP12 DUP4 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x4 ADD SLOAD SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP12 DUP4 MSTORE PUSH1 0xA DUP2 MSTORE SWAP3 SWAP1 SWAP2 KECCAK256 DUP4 MLOAD DUP2 SSTORE SWAP2 DUP4 ADD MLOAD SWAP3 SWAP4 POP DUP4 SWAP3 PUSH1 0x1 DUP4 ADD SWAP2 POP PUSH2 0x1970 SWAP1 DUP3 PUSH2 0x3A18 JUMP JUMPDEST POP PUSH1 0x40 DUP3 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 SWAP1 SWAP3 ADD MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE PUSH1 0x4 SLOAD SWAP1 MLOAD TIMESTAMP DUP2 MSTORE DUP9 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0xA5BCC067C850CA99CEFEE70D42B9E232781E55A3165CCEF97F9E19095C3610EC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1A00 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x1A39 JUMPI POP PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A2D DUP3 PUSH2 0x1E99 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1A57 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x1A7A JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP1 PUSH2 0x1A99 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SUB PUSH2 0x1AC9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP1 PUSH2 0x396A JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x1B01 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1B2D SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1B7A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1B4F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1B7A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1B5D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x1BB1 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1BDD SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1C2A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1BFF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1C2A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1C0D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1C7D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x105B1C9958591E481A5B9A5D1A585B1A5E9959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1CCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E76616C696420757365722061646472657373 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x5 DUP3 SWAP1 SSTORE TIMESTAMP PUSH1 0x6 DUP2 SWAP1 SSTORE PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0xDFE12B4770BCC8CE5467A65B351727C4ADDDFFA6723BADA19C9D18EF1C1E5731 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1D94 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x1DB7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP1 PUSH2 0x1DD6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SUB PUSH2 0x1E06 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP1 PUSH2 0x396A JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x1E63 PUSH2 0x1EFF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1E8D JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH2 0x1E96 DUP2 PUSH2 0x1F2C JUMP JUMPDEST POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x1ED6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x13D4CF09 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1EE8 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x74E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF3 DUP5 PUSH2 0x25BB JUMP JUMPDEST PUSH1 0x20 ADD MLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xEA4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1F89 DUP4 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1FA8 JUMPI PUSH2 0x1FA8 PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1FD2 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1FDC JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2016 PUSH2 0x330B JUMP JUMPDEST PUSH2 0x201E PUSH2 0x330B JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20AF JUMPI DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x203B JUMPI PUSH2 0x203B PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0xFD SHL SUB SWAP1 POP PUSH2 0x209D JUMPI PUSH2 0x2096 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP3 POP DUP6 SWAP2 POP PUSH2 0x2744 SWAP1 POP JUMP JUMPDEST DUP3 MSTORE PUSH2 0x20AF JUMP JUMPDEST DUP1 PUSH2 0x20A7 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2021 JUMP JUMPDEST PUSH2 0x20BA PUSH1 0x32 DUP3 PUSH2 0x3BD0 JUMP JUMPDEST SWAP1 POP PUSH2 0x2121 PUSH2 0x211C DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2106 SWAP3 POP PUSH1 0x2 SWAP2 POP DUP7 SWAP1 POP PUSH2 0x3BD0 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x2114 PUSH1 0x28 DUP3 PUSH2 0x3BD0 JUMP JUMPDEST SWAP5 POP DUP5 PUSH2 0x2744 JUMP JUMPDEST PUSH2 0x281A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x213A PUSH1 0x2 DUP3 PUSH2 0x3BD0 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT DUP1 ISZERO PUSH2 0x2174 JUMPI POP DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x2158 JUMPI PUSH2 0x2158 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x5 PUSH1 0xF9 SHL EQ ISZERO JUMPDEST ISZERO PUSH2 0x221D JUMPI DUP1 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x221B JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x2195 JUMPI PUSH2 0x2195 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x5 PUSH1 0xF9 SHL SUB SWAP1 POP PUSH2 0x2209 JUMPI PUSH2 0x21F2 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP7 SWAP3 POP DUP6 SWAP2 POP PUSH2 0x2744 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2202 DUP2 PUSH1 0x1 PUSH2 0x3BD0 JUMP JUMPDEST SWAP2 POP PUSH2 0x221B JUMP JUMPDEST DUP1 PUSH2 0x2213 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x217B JUMP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x2227 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2251 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x555249 PUSH1 0xE8 SHL DUP2 MSTORE POP DUP5 PUSH2 0x2955 JUMP JUMPDEST DUP4 PUSH1 0x60 ADD DUP2 SWAP4 POP DUP3 SWAP1 MSTORE POP POP PUSH2 0x2288 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x2B32B939B4B7B7 PUSH1 0xC9 SHL DUP2 MSTORE POP DUP5 PUSH2 0x2955 JUMP JUMPDEST DUP4 PUSH1 0x80 ADD DUP2 SWAP4 POP DUP3 SWAP1 MSTORE POP POP PUSH1 0x60 PUSH2 0x22C2 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x10DA185A5B881251 PUSH1 0xC2 SHL DUP2 MSTORE POP DUP6 PUSH2 0x2955 JUMP JUMPDEST SWAP3 POP SWAP1 POP PUSH2 0x22CF DUP2 PUSH2 0x2B5F JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH5 0x4E6F6E6365 PUSH1 0xD8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x22FE SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP6 PUSH2 0x2955 JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD DUP3 SWAP1 MSTORE SWAP1 MLOAD SWAP1 SWAP3 POP PUSH1 0x8 GT ISZERO PUSH2 0x232B JUMPI PUSH1 0x40 MLOAD PUSH4 0x2D2F00C3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2358 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x125CDCDD595908105D PUSH1 0xBA SHL DUP2 MSTORE POP DUP6 PUSH2 0x2955 JUMP JUMPDEST DUP5 PUSH1 0xE0 ADD DUP2 SWAP5 POP DUP3 SWAP1 MSTORE POP POP PUSH2 0x2397 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x45787069726174696F6E2054696D65 PUSH1 0x88 SHL DUP2 MSTORE POP DUP6 PUSH2 0x2955 JUMP JUMPDEST DUP5 PUSH2 0x100 ADD DUP2 SWAP5 POP DUP3 SWAP1 MSTORE POP POP PUSH2 0x23D2 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH10 0x4E6F74204265666F7265 PUSH1 0xB0 SHL DUP2 MSTORE POP DUP6 PUSH2 0x2955 JUMP JUMPDEST DUP5 PUSH2 0x120 ADD DUP2 SWAP5 POP DUP3 SWAP1 MSTORE POP POP PUSH2 0x240D DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH10 0x14995C5D595CDD081251 PUSH1 0xB2 SHL DUP2 MSTORE POP DUP6 PUSH2 0x2955 JUMP JUMPDEST DUP5 PUSH2 0x140 ADD DUP2 SWAP5 POP DUP3 SWAP1 MSTORE POP POP PUSH1 0x0 PUSH2 0x2449 DUP8 DUP8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x5265736F7572636573 PUSH1 0xB8 SHL DUP2 MSTORE POP DUP7 PUSH2 0x2955 JUMP JUMPDEST SWAP2 POP POP DUP3 DUP2 EQ PUSH2 0x246A JUMPI PUSH2 0x245E DUP8 DUP8 DUP4 PUSH2 0x2BC3 JUMP JUMPDEST PUSH2 0x160 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 POP JUMPDEST POP SWAP2 SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2471 PUSH2 0x2491 PUSH2 0x248C DUP5 PUSH1 0x0 PUSH1 0x4 PUSH2 0x2744 JUMP JUMPDEST PUSH2 0x2B5F JUMP JUMPDEST PUSH2 0x24A1 PUSH2 0x248C DUP6 PUSH1 0x5 PUSH1 0x7 PUSH2 0x2744 JUMP JUMPDEST PUSH2 0x24B1 PUSH2 0x248C DUP7 PUSH1 0x8 PUSH1 0xA PUSH2 0x2744 JUMP JUMPDEST PUSH2 0x24C1 PUSH2 0x248C DUP8 PUSH1 0xB PUSH1 0xD PUSH2 0x2744 JUMP JUMPDEST PUSH2 0x24D1 PUSH2 0x248C DUP9 PUSH1 0xE PUSH1 0x10 PUSH2 0x2744 JUMP JUMPDEST PUSH2 0x24E1 PUSH2 0x248C DUP10 PUSH1 0x11 PUSH1 0x13 PUSH2 0x2744 JUMP JUMPDEST PUSH2 0x2EB3 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x3 PUSH1 0x1 PUSH1 0x98 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2513 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3CF2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x252D SWAP2 PUSH2 0x3D2E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2568 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x256D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x25B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x195B98DC9E5C1D0E8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5AB JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x25C3 PUSH2 0x3278 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25E5 PUSH1 0x3 SLOAD PUSH1 0x0 DUP1 SHL DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x306A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x25FD SWAP2 SWAP1 PUSH2 0x3E3D JUMP JUMPDEST SWAP1 POP PUSH1 0x2 PUSH1 0x40 MLOAD PUSH2 0x260E SWAP2 SWAP1 PUSH2 0x3B5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 PUSH1 0x0 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x2640 JUMPI PUSH1 0x40 MLOAD PUSH4 0x283D62BD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP DUP2 PUSH1 0x40 ADD MLOAD LT ISZERO PUSH2 0x2665 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB171155 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x26AB JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x26D7 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x26F5 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x270D JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2721 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2733 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x2471 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2752 DUP5 DUP5 PUSH2 0x3CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2769 JUMPI PUSH2 0x2769 PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2793 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP4 JUMPDEST DUP4 DUP2 LT DUP1 ISZERO PUSH2 0x27A7 JUMPI POP DUP6 MLOAD DUP2 LT JUMPDEST ISZERO PUSH2 0x2811 JUMPI DUP6 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x27BE JUMPI PUSH2 0x27BE PUSH2 0x3BE3 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND DUP3 PUSH2 0x27D8 DUP8 DUP5 PUSH2 0x3CB3 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x27E8 JUMPI PUSH2 0x27E8 PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 PUSH2 0x2809 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2798 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x28 EQ PUSH2 0x283E JUMPI PUSH1 0x40 MLOAD PUSH4 0xACF86969 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP4 MLOAD PUSH2 0x284E SWAP2 SWAP1 PUSH2 0x3F0C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2865 JUMPI PUSH2 0x2865 PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x288F JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP5 MLOAD PUSH2 0x28A3 SWAP2 SWAP1 PUSH2 0x3F0C JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x2941 JUMPI PUSH2 0x28E1 DUP5 PUSH2 0x28B9 DUP4 PUSH1 0x2 PUSH2 0x3F20 JUMP JUMPDEST PUSH2 0x28C4 SWAP1 PUSH1 0x1 PUSH2 0x3BD0 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x28D4 JUMPI PUSH2 0x28D4 PUSH2 0x3BE3 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SHR PUSH2 0x3135 JUMP JUMPDEST PUSH2 0x28F0 DUP6 PUSH2 0x28C4 DUP5 PUSH1 0x2 PUSH2 0x3F20 JUMP JUMPDEST PUSH2 0x28FB SWAP1 PUSH1 0x10 PUSH2 0x3F37 JUMP JUMPDEST PUSH2 0x2905 SWAP2 SWAP1 PUSH2 0x3F53 JUMP JUMPDEST PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x291A JUMPI PUSH2 0x291A PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x293A DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP1 POP PUSH2 0x2895 JUMP JUMPDEST POP PUSH2 0x294B DUP2 PUSH2 0x3F6C JUMP JUMPDEST PUSH1 0x60 SHR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2A70 JUMPI DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x2975 JUMPI PUSH2 0x2975 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1D PUSH1 0xF9 SHL SUB SWAP1 POP PUSH2 0x2A5E JUMPI DUP5 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x29DA DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP DUP7 SWAP2 POP PUSH2 0x2744 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x29FF JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 POP DUP2 PUSH2 0x2B56 JUMP JUMPDEST DUP1 PUSH2 0x2A09 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP DUP6 DUP2 LT DUP1 ISZERO PUSH2 0x2A43 JUMPI POP DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x2A28 JUMPI PUSH2 0x2A28 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0xFD SHL EQ JUMPDEST ISZERO PUSH2 0x2A56 JUMPI DUP1 PUSH2 0x2A52 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP JUMPDEST DUP1 SWAP4 POP PUSH2 0x2A70 JUMP JUMPDEST DUP1 PUSH2 0x2A68 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x295B JUMP JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2B0E JUMPI DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x2A8A JUMPI PUSH2 0x2A8A PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x5 PUSH1 0xF9 SHL SUB SWAP1 POP PUSH2 0x2AFC JUMPI PUSH2 0x2AE7 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP9 SWAP3 POP DUP6 SWAP2 POP PUSH2 0x2744 SWAP1 POP JUMP JUMPDEST PUSH2 0x2AF2 DUP3 PUSH1 0x1 PUSH2 0x3BD0 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH2 0x2B56 JUMP JUMPDEST DUP1 PUSH2 0x2B06 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2A70 JUMP JUMPDEST PUSH2 0x2B51 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP9 SWAP3 POP DUP6 SWAP2 POP PUSH2 0x2744 SWAP1 POP JUMP JUMPDEST SWAP3 POP SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x2BBC JUMPI PUSH1 0x30 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2B81 JUMPI PUSH2 0x2B81 PUSH2 0x3BE3 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH2 0x2B93 SWAP2 SWAP1 PUSH1 0xF8 SHR PUSH2 0x3CB3 JUMP JUMPDEST PUSH2 0x2B9E DUP4 PUSH1 0xA PUSH2 0x3F20 JUMP JUMPDEST PUSH2 0x2BA8 SWAP2 SWAP1 PUSH2 0x3BD0 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x2BB4 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2B64 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 DUP2 JUMPDEST PUSH2 0x2BD5 PUSH1 0x1 DUP8 PUSH2 0x3CB3 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x2CD0 JUMPI DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x2BEE JUMPI PUSH2 0x2BEE PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x2D PUSH1 0xF8 SHL EQ DUP1 ISZERO PUSH2 0x2C46 JUMPI POP DUP7 DUP7 PUSH2 0x2C1C DUP5 PUSH1 0x1 PUSH2 0x3BD0 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x2C2B JUMPI PUSH2 0x2C2B PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0xFD SHL EQ JUMPDEST ISZERO PUSH2 0x2C6A JUMPI PUSH2 0x2C56 PUSH1 0x2 DUP4 PUSH2 0x3BD0 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x2C62 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2C6F JUMP JUMPDEST PUSH2 0x2CD0 JUMP JUMPDEST DUP6 DUP3 LT DUP1 ISZERO PUSH2 0x2CA7 JUMPI POP DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x2C8B JUMPI PUSH2 0x2C8B PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0xA PUSH1 0xF8 SHL EQ ISZERO JUMPDEST ISZERO PUSH2 0x2CBE JUMPI DUP2 PUSH2 0x2CB6 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP3 POP POP PUSH2 0x2C6F JUMP JUMPDEST DUP2 PUSH2 0x2CC8 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP3 POP POP PUSH2 0x2BCA JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2CEA JUMPI PUSH2 0x2CEA PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D1D JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2D08 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP DUP6 SWAP3 POP PUSH1 0x0 JUMPDEST PUSH2 0x2D31 PUSH1 0x1 DUP10 PUSH2 0x3CB3 JUMP JUMPDEST DUP5 LT DUP1 ISZERO PUSH2 0x2D3F JUMPI POP DUP3 DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0x2EA5 JUMPI DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x2D56 JUMPI PUSH2 0x2D56 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x2D PUSH1 0xF8 SHL EQ DUP1 ISZERO PUSH2 0x2DAE JUMPI POP DUP9 DUP9 PUSH2 0x2D84 DUP7 PUSH1 0x1 PUSH2 0x3BD0 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x2D93 JUMPI PUSH2 0x2D93 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0xFD SHL EQ JUMPDEST ISZERO PUSH2 0x2DC1 JUMPI PUSH2 0x2DBE DUP5 PUSH1 0x2 PUSH2 0x3BD0 JUMP JUMPDEST SWAP7 POP JUMPDEST DUP8 DUP5 LT DUP1 ISZERO PUSH2 0x2DF9 JUMPI POP DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x2DDD JUMPI PUSH2 0x2DDD PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0xA PUSH1 0xF8 SHL EQ ISZERO JUMPDEST ISZERO PUSH2 0x2E10 JUMPI DUP4 PUSH2 0x2E08 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP5 POP POP PUSH2 0x2DC1 JUMP JUMPDEST PUSH2 0x2E53 DUP10 DUP10 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP12 SWAP3 POP DUP9 SWAP2 POP PUSH2 0x2744 SWAP1 POP JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E65 JUMPI PUSH2 0x2E65 PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x2E7B SWAP1 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP DUP8 DUP5 SUB PUSH2 0x2E93 JUMPI DUP4 PUSH2 0x2E8F DUP2 PUSH2 0x3FA3 JUMP JUMPDEST SWAP5 POP POP JUMPDEST DUP4 PUSH2 0x2E9D DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP5 POP POP PUSH2 0x2D26 JUMP JUMPDEST POP SWAP8 SWAP2 SWAP7 POP SWAP1 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7B2 JUMPDEST DUP8 PUSH2 0xFFFF AND DUP2 PUSH2 0xFFFF AND LT ISZERO PUSH2 0x2F0F JUMPI PUSH2 0x2ED2 DUP2 PUSH2 0x3219 JUMP JUMPDEST ISZERO PUSH2 0x2EEC JUMPI PUSH2 0x2EE5 PUSH4 0x1E28500 DUP4 PUSH2 0x3BD0 JUMP JUMPDEST SWAP2 POP PUSH2 0x2EFD JUMP JUMPDEST PUSH2 0x2EFA PUSH4 0x1E13380 DUP4 PUSH2 0x3BD0 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP1 PUSH2 0x2F07 DUP2 PUSH2 0x3FBA JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2EB9 JUMP JUMPDEST PUSH2 0x2F17 PUSH2 0x3375 JUMP JUMPDEST PUSH1 0x1F DUP2 MSTORE PUSH2 0x2F24 DUP10 PUSH2 0x3219 JUMP JUMPDEST ISZERO PUSH2 0x2F35 JUMPI PUSH1 0x1D PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2F3D JUMP JUMPDEST PUSH1 0x1C PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST PUSH1 0x1F PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x1E PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP4 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x120 DUP4 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP4 ADD MSTORE PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0x1 SWAP2 POP JUMPDEST DUP8 PUSH1 0xFF AND DUP3 PUSH2 0xFFFF AND LT ISZERO PUSH2 0x2FF1 JUMPI DUP1 PUSH2 0x2FA7 PUSH1 0x1 DUP5 PUSH2 0x3FDB JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0xC DUP2 LT PUSH2 0x2FBB JUMPI PUSH2 0x2FBB PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x2FCD SWAP1 PUSH3 0x15180 PUSH2 0x3FF6 JUMP JUMPDEST PUSH2 0x2FDD SWAP1 PUSH4 0xFFFFFFFF AND DUP5 PUSH2 0x3BD0 JUMP JUMPDEST SWAP3 POP DUP2 PUSH2 0x2FE9 DUP2 PUSH2 0x3FBA JUMP JUMPDEST SWAP3 POP POP PUSH2 0x2F8C JUMP JUMPDEST PUSH2 0x2FFC PUSH1 0x1 DUP9 PUSH2 0x4016 JUMP JUMPDEST PUSH2 0x300C SWAP1 PUSH1 0xFF AND PUSH3 0x15180 PUSH2 0x3FF6 JUMP JUMPDEST PUSH2 0x301C SWAP1 PUSH4 0xFFFFFFFF AND DUP5 PUSH2 0x3BD0 JUMP JUMPDEST SWAP3 POP PUSH2 0x302D PUSH1 0xFF DUP8 AND PUSH2 0xE10 PUSH2 0x3FF6 JUMP JUMPDEST PUSH2 0x303D SWAP1 PUSH4 0xFFFFFFFF AND DUP5 PUSH2 0x3BD0 JUMP JUMPDEST SWAP3 POP PUSH2 0x304D PUSH1 0xFF DUP7 AND PUSH1 0x3C PUSH2 0x402F JUMP JUMPDEST PUSH2 0x305B SWAP1 PUSH2 0xFFFF AND DUP5 PUSH2 0x3BD0 JUMP JUMPDEST SWAP3 POP PUSH2 0x1254 PUSH1 0xFF DUP6 AND DUP5 PUSH2 0x3BD0 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x4 PUSH1 0x1 PUSH1 0x98 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3097 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3CF2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x30B1 SWAP2 PUSH2 0x3D2E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x30EC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x30F1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x25B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x191958DC9E5C1D0E8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0xF8 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND LT DUP1 ISZERO SWAP1 PUSH2 0x316B JUMPI POP PUSH1 0x39 PUSH1 0xF8 SHL PUSH1 0xF8 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND GT ISZERO JUMPDEST ISZERO PUSH2 0x317B JUMPI PUSH2 0x2471 PUSH1 0x30 DUP4 PUSH2 0x4016 JUMP JUMPDEST PUSH1 0x61 PUSH1 0xF8 SHL PUSH1 0xF8 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND LT DUP1 ISZERO SWAP1 PUSH2 0x31AF JUMPI POP PUSH1 0x33 PUSH1 0xF9 SHL PUSH1 0xF8 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND GT ISZERO JUMPDEST ISZERO PUSH2 0x31CB JUMPI PUSH1 0x61 PUSH2 0x31C1 DUP4 PUSH1 0xA PUSH2 0x3F53 JUMP JUMPDEST PUSH2 0x2471 SWAP2 SWAP1 PUSH2 0x4016 JUMP JUMPDEST PUSH1 0x41 PUSH1 0xF8 SHL PUSH1 0xF8 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND LT DUP1 ISZERO SWAP1 PUSH2 0x31FF JUMPI POP PUSH1 0x23 PUSH1 0xF9 SHL PUSH1 0xF8 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND GT ISZERO JUMPDEST ISZERO PUSH2 0x3211 JUMPI PUSH1 0x41 PUSH2 0x31C1 DUP4 PUSH1 0xA PUSH2 0x3F53 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3226 PUSH1 0x4 DUP4 PUSH2 0x404D JUMP JUMPDEST PUSH2 0xFFFF AND ISZERO PUSH2 0x3237 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3242 PUSH1 0x64 DUP4 PUSH2 0x404D JUMP JUMPDEST PUSH2 0xFFFF AND ISZERO PUSH2 0x3253 JUMPI POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x325F PUSH2 0x190 DUP4 PUSH2 0x404D JUMP JUMPDEST PUSH2 0xFFFF AND ISZERO PUSH2 0x3270 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x4 MUL SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E96 SWAP2 SWAP1 PUSH2 0x3394 JUMP JUMPDEST POP DUP1 SLOAD PUSH2 0x32DD SWAP1 PUSH2 0x3995 JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x32ED JUMPI POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E96 SWAP2 SWAP1 PUSH2 0x33D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x33CD JUMPI PUSH1 0x0 PUSH2 0x33A8 DUP3 DUP3 PUSH2 0x32D1 JUMP JUMPDEST PUSH2 0x33B6 PUSH1 0x1 DUP4 ADD PUSH1 0x0 PUSH2 0x32D1 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x2 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x4 ADD PUSH2 0x3394 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x33CD JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x33D2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x341A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3402 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x343B DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x33FF JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x34DC JUMPI PUSH1 0x3F NOT DUP10 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD PUSH1 0x80 DUP2 MLOAD DUP2 DUP7 MSTORE PUSH2 0x349C DUP3 DUP8 ADD DUP3 PUSH2 0x3423 JUMP JUMPDEST SWAP2 POP POP DUP9 DUP3 ADD MLOAD DUP6 DUP3 SUB DUP11 DUP8 ADD MSTORE PUSH2 0x34B4 DUP3 DUP3 PUSH2 0x3423 JUMP JUMPDEST DUP4 DUP11 ADD MLOAD DUP8 DUP12 ADD MSTORE PUSH1 0x60 SWAP4 DUP5 ADD MLOAD SWAP4 SWAP1 SWAP7 ADD SWAP3 SWAP1 SWAP3 MSTORE POP POP SWAP4 DUP7 ADD SWAP4 SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3476 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x34FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x352B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x354A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3574 DUP10 DUP4 DUP11 ADD PUSH2 0x34EA JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x358D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x359A DUP9 DUP3 DUP10 ADD PUSH2 0x34EA JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x35E3 JUMPI PUSH2 0x35E3 PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3611 JUMPI PUSH2 0x3611 PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x3632 JUMPI PUSH2 0x3632 PUSH2 0x35AB JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3664 PUSH2 0x365F DUP3 PUSH2 0x3619 JUMP JUMPDEST PUSH2 0x35E9 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x3679 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x36A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x36BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x36CA DUP5 DUP3 DUP6 ADD PUSH2 0x3640 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x370A JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x36EE JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3729 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x374B PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x3423 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x375D DUP2 DUP8 PUSH2 0x3423 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x378A PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x3423 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1E96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2665 DUP2 PUSH2 0x379D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0x80 DUP2 SLT ISZERO PUSH2 0x37E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x37FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3807 DUP8 DUP3 DUP9 ADD PUSH2 0x34EA JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x60 PUSH1 0x1F NOT DUP3 ADD SLT ISZERO PUSH2 0x381F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 DUP5 ADD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2665 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3423 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3856 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3874 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3880 DUP9 DUP4 DUP10 ADD PUSH2 0x34EA JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3899 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38A6 DUP8 DUP3 DUP9 ADD PUSH2 0x3640 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x38C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x38E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38EE DUP6 DUP3 DUP7 ADD PUSH2 0x3640 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x80 PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x391E PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x3423 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x395C DUP2 PUSH2 0x379D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x14D95CDCDA5BDB881B9BDD08199BDD5B99 PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x39A9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x74E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3A13 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x39F0 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3A0F JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x39FC JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3A31 JUMPI PUSH2 0x3A31 PUSH2 0x35AB JUMP JUMPDEST PUSH2 0x3A45 DUP2 PUSH2 0x3A3F DUP5 SLOAD PUSH2 0x3995 JUMP JUMPDEST DUP5 PUSH2 0x39C9 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3A7A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3A62 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x3A0F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3AA9 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x3A8A JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x3AC7 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x3AFF JUMPI PUSH2 0x3AFF PUSH2 0x3AD7 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A000000000000 DUP2 MSTORE PUSH1 0x0 DUP5 MLOAD PUSH2 0x3B3E DUP2 PUSH1 0x1A DUP6 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x33FF JUMP JUMPDEST DUP3 ADD DUP4 DUP6 PUSH1 0x1A DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP4 ADD PUSH1 0x1A ADD SWAP3 DUP4 MSTORE POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLOAD PUSH2 0x3B68 DUP2 PUSH2 0x3995 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x3B80 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x3B95 JUMPI PUSH2 0x3BC4 JUMP JUMPDEST PUSH1 0xFF NOT DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x3BC4 JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3BBB JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x3BA2 JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2471 JUMPI PUSH2 0x2471 PUSH2 0x3AD7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD PUSH1 0xA0 DUP3 DUP6 ADD MSTORE PUSH2 0x3C15 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x3423 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 DUP7 ADD MLOAD AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x1F NOT DUP1 DUP7 DUP5 SUB ADD PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x3C4E DUP4 DUP4 PUSH2 0x3423 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD MLOAD DUP8 DUP3 SUB DUP4 ADD PUSH1 0xA0 DUP10 ADD MSTORE DUP1 MLOAD DUP1 DUP4 MSTORE SWAP2 SWAP5 POP DUP6 ADD SWAP3 POP DUP5 DUP5 ADD SWAP1 PUSH1 0x5 DUP2 SWAP1 SHL DUP6 ADD DUP7 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3CA5 JUMPI DUP5 DUP8 DUP4 SUB ADD DUP5 MSTORE PUSH2 0x3C93 DUP3 DUP8 MLOAD PUSH2 0x3423 JUMP JUMPDEST SWAP6 DUP9 ADD SWAP6 SWAP4 DUP9 ADD SWAP4 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x3C79 JUMP JUMPDEST POP SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2471 JUMPI PUSH2 0x2471 PUSH2 0x3AD7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP5 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x3D11 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x3423 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x3D23 DUP2 DUP6 PUSH2 0x3423 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3D40 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x33FF JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3D5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3D69 PUSH2 0x365F DUP3 PUSH2 0x3619 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x3D7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x36CA DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x33FF JUMP JUMPDEST DUP1 MLOAD PUSH2 0x3D9A DUP2 PUSH2 0x379D JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3DB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP4 GT ISZERO PUSH2 0x3DCC JUMPI PUSH2 0x3DCC PUSH2 0x35AB JUMP JUMPDEST DUP3 PUSH1 0x5 SHL PUSH2 0x3DDB DUP4 DUP3 ADD PUSH2 0x35E9 JUMP JUMPDEST SWAP4 DUP5 MSTORE DUP6 DUP2 ADD DUP4 ADD SWAP4 DUP4 DUP2 ADD SWAP1 DUP9 DUP7 GT ISZERO PUSH2 0x3DF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP9 ADD SWAP3 POP JUMPDEST DUP6 DUP4 LT ISZERO PUSH2 0x3E31 JUMPI DUP3 MLOAD DUP5 DUP2 GT ISZERO PUSH2 0x3E13 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3E21 DUP11 DUP8 DUP4 DUP13 ADD ADD PUSH2 0x3D4A JUMP JUMPDEST DUP4 MSTORE POP SWAP2 DUP5 ADD SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0x3DFB JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3E66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xA0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x3E7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E82 PUSH2 0x35C1 JUMP JUMPDEST DUP3 MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x3E91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E9D DUP8 DUP3 DUP7 ADD PUSH2 0x3D4A JUMP JUMPDEST DUP3 MSTORE POP PUSH2 0x3EAC PUSH1 0x20 DUP5 ADD PUSH2 0x3D8F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x3ECD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3ED9 DUP8 DUP3 DUP7 ADD PUSH2 0x3D4A JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x3EF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3EFD DUP8 DUP3 DUP7 ADD PUSH2 0x3D9F JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3F1B JUMPI PUSH2 0x3F1B PUSH2 0x3CDC JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x2471 JUMPI PUSH2 0x2471 PUSH2 0x3AD7 JUMP JUMPDEST PUSH1 0xFF DUP2 DUP2 AND DUP4 DUP3 AND MUL SWAP1 DUP2 AND SWAP1 DUP2 DUP2 EQ PUSH2 0x2BBC JUMPI PUSH2 0x2BBC PUSH2 0x3AD7 JUMP JUMPDEST PUSH1 0xFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP2 GT ISZERO PUSH2 0x2471 JUMPI PUSH2 0x2471 PUSH2 0x3AD7 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP1 DUP3 AND SWAP3 SWAP2 SWAP1 PUSH1 0x14 DUP4 LT ISZERO PUSH2 0x3F9B JUMPI DUP1 DUP2 DUP5 PUSH1 0x14 SUB PUSH1 0x3 SHL SHL DUP4 AND AND SWAP4 POP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3FB2 JUMPI PUSH2 0x3FB2 PUSH2 0x3AD7 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP1 DUP4 AND DUP2 DUP2 SUB PUSH2 0x3FD1 JUMPI PUSH2 0x3FD1 PUSH2 0x3AD7 JUMP JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xFFFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x2BBC JUMPI PUSH2 0x2BBC PUSH2 0x3AD7 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 DUP2 AND DUP4 DUP3 AND MUL DUP1 DUP3 AND SWAP2 SWAP1 DUP3 DUP2 EQ PUSH2 0x1B9A JUMPI PUSH2 0x1B9A PUSH2 0x3AD7 JUMP JUMPDEST PUSH1 0xFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP2 GT ISZERO PUSH2 0x2471 JUMPI PUSH2 0x2471 PUSH2 0x3AD7 JUMP JUMPDEST PUSH2 0xFFFF DUP2 DUP2 AND DUP4 DUP3 AND MUL DUP1 DUP3 AND SWAP2 SWAP1 DUP3 DUP2 EQ PUSH2 0x1B9A JUMPI PUSH2 0x1B9A PUSH2 0x3AD7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP1 DUP5 AND DUP1 PUSH2 0x4062 JUMPI PUSH2 0x4062 PUSH2 0x3CDC JUMP JUMPDEST SWAP3 AND SWAP2 SWAP1 SWAP2 MOD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND 0xED 0x27 0x26 PUSH0 0xEA PUSH1 0xA SWAP4 0x2C SWAP13 0x4F AND 0xAB DUP1 0xE8 0x4D 0xAA PUSH16 0x3A0E9FAD9A191B1738BA02C18364736F PUSH13 0x63430008140033000000000000 ",
          "sourceMap": "364:11616:19:-:0;;;413:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;476:6;455:10;;1269:95:6;;1322:31;;-1:-1:-1;;;1322:31:6;;1350:1;1322:31;;;1449:51:22;1422:18;;1322:31:6;;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;1225:187;2796:28:5;2817:2;2796:28;;;;;;;;;;;;:20;;;:28;;:::i;:::-;2788:37;;;:::i;:::-;2769:16;:56;2835:7;:18;2845:8;2835:7;:18;:::i;:::-;;2723:137;413:73:19;364:11616;;2912:187:6;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:6;;;-1:-1:-1;;;;;;3020:17:6;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;5485:325:2:-;5590:12;5619;5633:20;1237:42;-1:-1:-1;;;;;5657:23:2;5705:8;5715:4;5694:26;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5694:26:2;;;;;;;;;;5657:73;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5618:112;;;;5748:7;5740:39;;;;-1:-1:-1;;;5740:39:2;;5366:2:22;5740:39:2;;;5348:21:22;5405:2;5385:18;;;5378:30;5444:21;5424:18;;;5417:49;5483:18;;5740:39:2;5164:343:22;5740:39:2;5796:7;5485:325;-1:-1:-1;;;;5485:325:2:o;14:127:22:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:250;231:1;241:113;255:6;252:1;249:13;241:113;;;331:11;;;325:18;312:11;;;305:39;277:2;270:10;241:113;;;-1:-1:-1;;388:1:22;370:16;;363:27;146:250::o;401:897::-;481:6;534:2;522:9;513:7;509:23;505:32;502:52;;;550:1;547;540:12;502:52;577:16;;-1:-1:-1;;;;;642:14:22;;;639:34;;;669:1;666;659:12;639:34;707:6;696:9;692:22;682:32;;752:7;745:4;741:2;737:13;733:27;723:55;;774:1;771;764:12;723:55;803:2;797:9;825:2;821;818:10;815:36;;;831:18;;:::i;:::-;906:2;900:9;874:2;960:13;;-1:-1:-1;;956:22:22;;;980:2;952:31;948:40;936:53;;;1004:18;;;1024:22;;;1001:46;998:72;;;1050:18;;:::i;:::-;1090:10;1086:2;1079:22;1125:2;1117:6;1110:18;1165:7;1160:2;1155;1151;1147:11;1143:20;1140:33;1137:53;;;1186:1;1183;1176:12;1137:53;1199:68;1264:2;1259;1251:6;1247:15;1242:2;1238;1234:11;1199:68;:::i;:::-;1286:6;401:897;-1:-1:-1;;;;;;;401:897:22:o;1511:297::-;1629:12;;1676:4;1665:16;;;1659:23;;1629:12;1694:16;;1691:111;;;1788:1;1784:6;1774;1768:4;1764:17;1761:1;1757:25;1753:38;1746:5;1742:50;1733:59;;1691:111;;1511:297;;;:::o;1813:380::-;1892:1;1888:12;;;;1935;;;1956:61;;2010:4;2002:6;1998:17;1988:27;;1956:61;2063:2;2055:6;2052:14;2032:18;2029:38;2026:161;;2109:10;2104:3;2100:20;2097:1;2090:31;2144:4;2141:1;2134:15;2172:4;2169:1;2162:15;2324:545;2426:2;2421:3;2418:11;2415:448;;;2462:1;2487:5;2483:2;2476:17;2532:4;2528:2;2518:19;2602:2;2590:10;2586:19;2583:1;2579:27;2573:4;2569:38;2638:4;2626:10;2623:20;2620:47;;;-1:-1:-1;2661:4:22;2620:47;2716:2;2711:3;2707:12;2704:1;2700:20;2694:4;2690:31;2680:41;;2771:82;2789:2;2782:5;2779:13;2771:82;;;2834:17;;;2815:1;2804:13;2771:82;;;2775:3;;;2415:448;2324:545;;;:::o;3045:1352::-;3165:10;;-1:-1:-1;;;;;3187:30:22;;3184:56;;;3220:18;;:::i;:::-;3249:97;3339:6;3299:38;3331:4;3325:11;3299:38;:::i;:::-;3293:4;3249:97;:::i;:::-;3401:4;;3465:2;3454:14;;3482:1;3477:663;;;;4184:1;4201:6;4198:89;;;-1:-1:-1;4253:19:22;;;4247:26;4198:89;-1:-1:-1;;3002:1:22;2998:11;;;2994:24;2990:29;2980:40;3026:1;3022:11;;;2977:57;4300:81;;3447:944;;3477:663;2271:1;2264:14;;;2308:4;2295:18;;-1:-1:-1;;3513:20:22;;;3631:236;3645:7;3642:1;3639:14;3631:236;;;3734:19;;;3728:26;3713:42;;3826:27;;;;3794:1;3782:14;;;;3661:19;;3631:236;;;3635:3;3895:6;3886:7;3883:19;3880:201;;;3956:19;;;3950:26;-1:-1:-1;;4039:1:22;4035:14;;;4051:3;4031:24;4027:37;4023:42;4008:58;3993:74;;3880:201;-1:-1:-1;;;;;4127:1:22;4111:14;;;4107:22;4094:36;;-1:-1:-1;3045:1352:22:o;4402:465::-;4577:6;4566:9;4559:25;4620:2;4615;4604:9;4600:18;4593:30;4540:4;4652:6;4646:13;4695:6;4690:2;4679:9;4675:18;4668:34;4711:79;4783:6;4778:2;4767:9;4763:18;4758:2;4750:6;4746:15;4711:79;:::i;:::-;4851:2;4830:15;-1:-1:-1;;4826:29:22;4811:45;;;;4858:2;4807:54;;4402:465;-1:-1:-1;;;4402:465:22:o;4872:287::-;5001:3;5039:6;5033:13;5055:66;5114:6;5109:3;5102:4;5094:6;5090:17;5055:66;:::i;:::-;5137:16;;;;;4872:287;-1:-1:-1;;4872:287:22:o;5164:343::-;364:11616:19;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_checkOwner_2972": {
              "entryPoint": 7935,
              "id": 2972,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_fromHexChar_1623": {
              "entryPoint": 12597,
              "id": 1623,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_hexStringToAddress_1516": {
              "entryPoint": 10266,
              "id": 1516,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_msgSender_3446": {
              "entryPoint": null,
              "id": 3446,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_parseArray_2002": {
              "entryPoint": 11203,
              "id": 2002,
              "parameterSlots": 3,
              "returnSlots": 2
            },
            "@_parseField_1834": {
              "entryPoint": 10581,
              "id": 1834,
              "parameterSlots": 4,
              "returnSlots": 2
            },
            "@_parseUint_1722": {
              "entryPoint": 11103,
              "id": 1722,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_substr_1674": {
              "entryPoint": 10052,
              "id": 1674,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_transferOwnership_3034": {
              "entryPoint": 7980,
              "id": 3034,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@authMsgSender_2760": {
              "entryPoint": 7833,
              "id": 2760,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@chatMessages_9698": {
              "entryPoint": 3095,
              "id": 9698,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@chatSessions_9692": {
              "entryPoint": null,
              "id": 9692,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@chatSummaries_9703": {
              "entryPoint": 3576,
              "id": 9703,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@closeSession_10376": {
              "entryPoint": 2736,
              "id": 10376,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@createNewSession_9987": {
              "entryPoint": 4705,
              "id": 9987,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@createdAt_9656": {
              "entryPoint": null,
              "id": 9656,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@decodeAndValidateToken_2886": {
              "entryPoint": 9659,
              "id": 2886,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@decrypt_1133": {
              "entryPoint": 12394,
              "id": 1133,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@deleteSession_10457": {
              "entryPoint": 5688,
              "id": 10457,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@domain_2726": {
              "entryPoint": 7074,
              "id": 2726,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@encrypt_1096": {
              "entryPoint": 9446,
              "id": 1096,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@getActiveSessions_10322": {
              "entryPoint": 5231,
              "id": 10322,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getAllSessionIds_10550": {
              "entryPoint": 2522,
              "id": 10550,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getChatHistory_10162": {
              "entryPoint": 1291,
              "id": 10162,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getChatSummary_10196": {
              "entryPoint": 6610,
              "id": 10196,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getSessionInfo_10227": {
              "entryPoint": 7486,
              "id": 10227,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getSessionMessageCount_10533": {
              "entryPoint": 3444,
              "id": 10533,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getUserInfo_10513": {
              "entryPoint": 3610,
              "id": 10513,
              "parameterSlots": 0,
              "returnSlots": 4
            },
            "@initialize_9896": {
              "entryPoint": 7220,
              "id": 9896,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@isInitialized_9658": {
              "entryPoint": null,
              "id": 9658,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@isLeapYear_42": {
              "entryPoint": 12825,
              "id": 42,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@log10_6492": {
              "entryPoint": 9836,
              "id": 6492,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@login_2717": {
              "entryPoint": 3926,
              "id": 2717,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@owner_2955": {
              "entryPoint": null,
              "id": 2955,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@parseSiweMsg_2268": {
              "entryPoint": 8206,
              "id": 2268,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@renounceOwnership_2986": {
              "entryPoint": 3730,
              "id": 2986,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@sessionMessageCount_9707": {
              "entryPoint": null,
              "id": 9707,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@setTEEContract_10489": {
              "entryPoint": 3750,
              "id": 10489,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@storeChatMessage_10074": {
              "entryPoint": 1876,
              "id": 10074,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "@storeChatSummary_10130": {
              "entryPoint": 6164,
              "id": 10130,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@subscriptionId_9654": {
              "entryPoint": null,
              "id": 9654,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@teeContract_9712": {
              "entryPoint": null,
              "id": 9712,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@timestampFromIso_2341": {
              "entryPoint": 9335,
              "id": 2341,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@toString_3751": {
              "entryPoint": 8060,
              "id": 3751,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@toTimestamp_238": {
              "entryPoint": 11955,
              "id": 238,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "@transferOwnership_3014": {
              "entryPoint": 7771,
              "id": 3014,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@userSessionIds_9710": {
              "entryPoint": 5198,
              "id": 9710,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@user_9652": {
              "entryPoint": null,
              "id": 9652,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "abi_decode_address_fromMemory": {
              "entryPoint": 15759,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_array_string_dyn_fromMemory": {
              "entryPoint": 15775,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_bytes": {
              "entryPoint": 13888,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_bytes_calldata": {
              "entryPoint": 13546,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_string_fromMemory": {
              "entryPoint": 15690,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 14258,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 14654,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes32": {
              "entryPoint": 13286,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes32t_bytes_calldata_ptrt_bytes_calldata_ptr": {
              "entryPoint": 13618,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 5
            },
            "abi_decode_tuple_t_bytes32t_bytes_calldata_ptrt_bytes_memory_ptr": {
              "entryPoint": 14400,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_bytes32t_bytes_memory_ptr": {
              "entryPoint": 14514,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes32t_uint256": {
              "entryPoint": 14102,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes_memory_ptr": {
              "entryPoint": 13974,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_string_calldata_ptrt_struct$_SignatureRSV_$250_calldata_ptr": {
              "entryPoint": 14287,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_struct$_AuthToken_$2430_memory_ptr_fromMemory": {
              "entryPoint": 15933,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_bytes": {
              "entryPoint": 13347,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 15662,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_bytes_storage_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 15194,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4_t_string_memory_ptr_t_string_calldata_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 15110,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_bytes32_$dyn_memory_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 14034,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_struct$_ChatMessage_$9678_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_ChatMessage_$9678_memory_ptr_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 13391,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes32_t_bytes32_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 15602,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_bytes_memory_ptr_t_uint256_t_uint256__to_t_bytes32_t_bytes_memory_ptr_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": 14193,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_bool_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 14381,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes_memory_ptr_t_bytes_memory_ptr_t_uint256_t_uint256__to_t_bytes_memory_ptr_t_bytes_memory_ptr_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": 14136,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1b66197486f9dea70286f19d4796d61200b37418a2b5efcb2cce46cc727c84b8__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 14698,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1f57e86588d4056fbc66a1ccbde1e5364452891f7334f70d5376cb310a8a3993__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_5614603d541e467d6f35299b6c494d6d7c96318fd9033e95f551373c3052a781__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7be940dd03837bee181e8c67faa08642c7a9eb2e139954242cb43d55a98c2ea9__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_903e0471dcbfc795d05065e8a540355c389c64753c3dd674c3f3e786b2d3807c__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_c0079c4aac0fe11a16d41c79fa5fe321c6273ce75f0a1b2bcf70ebd0dcd76d28__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e0e5889a2fbe7e35307fbd9d22e70cdfcd4e151ef85cecb5e8062e51b2d2ec2a__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_struct$_AuthToken_$2430_memory_ptr__to_t_struct$_AuthToken_$2430_memory_ptr__fromStack_reversed": {
              "entryPoint": 15353,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_struct$_ChatSession_$9669_memory_ptr__to_t_struct$_ChatSession_$9669_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_struct$_ChatSummary_$9687_memory_ptr__to_t_struct$_ChatSummary_$9687_memory_ptr__fromStack_reversed": {
              "entryPoint": 14584,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 13801,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_memory_4036": {
              "entryPoint": 13761,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_allocation_size_bytes": {
              "entryPoint": 13849,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_dataslot_bytes_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 15312,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint8": {
              "entryPoint": 16211,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 16140,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint16": {
              "entryPoint": 16431,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 16160,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint32": {
              "entryPoint": 16374,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint8": {
              "entryPoint": 16183,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint16": {
              "entryPoint": 16347,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 15539,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint8": {
              "entryPoint": 16406,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "clean_up_bytearray_end_slots_bytes_storage": {
              "entryPoint": 14793,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes20": {
              "entryPoint": 16236,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage": {
              "entryPoint": 14872,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 13311,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "decrement_t_uint256": {
              "entryPoint": 16291,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_byte_array_length": {
              "entryPoint": 14741,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_used_part_and_set_length_of_short_byte_array": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "increment_t_uint16": {
              "entryPoint": 16314,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 15085,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mod_t_uint16": {
              "entryPoint": 16461,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 15063,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x12": {
              "entryPoint": 15580,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x31": {
              "entryPoint": 15558,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 15331,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 13739,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_address": {
              "entryPoint": 14237,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:28628:22",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:22",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "115:76:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "125:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "137:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "148:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "133:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "133:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "125:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "167:9:22"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "178:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "160:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "160:25:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "160:25:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "84:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "95:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "106:4:22",
                        "type": ""
                      }
                    ],
                    "src": "14:177:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "266:110:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "312:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "321:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "324:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "314:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "314:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "314:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "287:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "296:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "283:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "283:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "308:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "279:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "279:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "276:52:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "337:33:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "360:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "347:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "347:23:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "337:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "232:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "243:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "255:6:22",
                        "type": ""
                      }
                    ],
                    "src": "196:180:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "447:184:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "457:10:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "466:1:22",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "461:1:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "526:63:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "551:3:22"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "556:1:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "547:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "547:11:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "570:3:22"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "575:1:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "566:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "566:11:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "560:5:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "560:18:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "540:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "540:39:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "540:39:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "487:1:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "490:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "484:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "484:13:22"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "498:19:22",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "500:15:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "509:1:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "512:2:22",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "505:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "505:10:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "500:1:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "480:3:22",
                            "statements": []
                          },
                          "src": "476:113:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "609:3:22"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "614:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "605:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "605:16:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "623:1:22",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "598:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "598:27:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "598:27:22"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory_with_cleanup",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "425:3:22",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "430:3:22",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "435:6:22",
                        "type": ""
                      }
                    ],
                    "src": "381:250:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "685:221:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "695:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "715:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "709:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "709:12:22"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "699:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "737:3:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "742:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "730:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "730:19:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "730:19:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "797:5:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "804:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "793:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "793:16:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "815:3:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "820:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "811:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "811:14:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "827:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "758:34:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "758:76:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "758:76:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "843:57:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "858:3:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "871:6:22"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "879:2:22",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "867:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "867:15:22"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "888:2:22",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "884:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "884:7:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "863:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "863:29:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "854:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "854:39:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "895:4:22",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "850:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "850:50:22"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "843:3:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "662:5:22",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "669:3:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "677:3:22",
                        "type": ""
                      }
                    ],
                    "src": "636:270:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1120:1145:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1130:12:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1140:2:22",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1134:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1151:32:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1169:9:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1180:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1165:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1165:18:22"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "1155:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1199:9:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1210:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1192:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1192:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1192:21:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1222:17:22",
                          "value": {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "1233:6:22"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nodeType": "YulTypedName",
                              "src": "1226:3:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1248:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1268:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1262:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1262:13:22"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "1252:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "1291:6:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1299:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1284:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1284:22:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1284:22:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1315:12:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1325:2:22",
                            "type": "",
                            "value": "64"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "1319:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1336:25:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1347:9:22"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1358:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1343:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1343:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "1336:3:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1370:53:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1392:9:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1407:1:22",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "1410:6:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "1403:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1403:14:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1388:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1388:30:22"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1420:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1384:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1384:39:22"
                          },
                          "variables": [
                            {
                              "name": "tail_2",
                              "nodeType": "YulTypedName",
                              "src": "1374:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1432:29:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1450:6:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1458:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1446:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1446:15:22"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "1436:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1470:10:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1479:1:22",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "1474:1:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1538:698:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "1559:3:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "tail_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "1572:6:22"
                                            },
                                            {
                                              "name": "headStart",
                                              "nodeType": "YulIdentifier",
                                              "src": "1580:9:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "1568:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1568:22:22"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1596:2:22",
                                              "type": "",
                                              "value": "63"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "1592:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1592:7:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1564:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1564:36:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1552:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1552:49:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1552:49:22"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1614:23:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "1630:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "1624:5:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1624:13:22"
                                },
                                "variables": [
                                  {
                                    "name": "_3",
                                    "nodeType": "YulTypedName",
                                    "src": "1618:2:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1650:14:22",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "1660:4:22",
                                  "type": "",
                                  "value": "0x80"
                                },
                                "variables": [
                                  {
                                    "name": "_4",
                                    "nodeType": "YulTypedName",
                                    "src": "1654:2:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1677:29:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "1703:2:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "1697:5:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1697:9:22"
                                },
                                "variables": [
                                  {
                                    "name": "memberValue0",
                                    "nodeType": "YulTypedName",
                                    "src": "1681:12:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "tail_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "1726:6:22"
                                    },
                                    {
                                      "name": "_4",
                                      "nodeType": "YulIdentifier",
                                      "src": "1734:2:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1719:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1719:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1719:18:22"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1750:61:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "memberValue0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1781:12:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "1799:6:22"
                                        },
                                        {
                                          "name": "_4",
                                          "nodeType": "YulIdentifier",
                                          "src": "1807:2:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1795:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1795:15:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_bytes",
                                    "nodeType": "YulIdentifier",
                                    "src": "1764:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1764:47:22"
                                },
                                "variables": [
                                  {
                                    "name": "tail_3",
                                    "nodeType": "YulTypedName",
                                    "src": "1754:6:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1824:40:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "1856:2:22"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "1860:2:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1852:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1852:11:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "1846:5:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1846:18:22"
                                },
                                "variables": [
                                  {
                                    "name": "memberValue0_1",
                                    "nodeType": "YulTypedName",
                                    "src": "1828:14:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "1888:6:22"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "1896:2:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1884:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1884:15:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "tail_3",
                                          "nodeType": "YulIdentifier",
                                          "src": "1905:6:22"
                                        },
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "1913:6:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sub",
                                        "nodeType": "YulIdentifier",
                                        "src": "1901:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1901:19:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1877:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1877:44:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1877:44:22"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "1934:54:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "memberValue0_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1965:14:22"
                                    },
                                    {
                                      "name": "tail_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "1981:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_bytes",
                                    "nodeType": "YulIdentifier",
                                    "src": "1948:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1948:40:22"
                                },
                                "variables": [
                                  {
                                    "name": "tail_4",
                                    "nodeType": "YulTypedName",
                                    "src": "1938:6:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "2012:6:22"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "2020:2:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2008:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2008:15:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "_3",
                                              "nodeType": "YulIdentifier",
                                              "src": "2035:2:22"
                                            },
                                            {
                                              "name": "_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "2039:2:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "2031:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2031:11:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "2025:5:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2025:18:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2001:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2001:43:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2001:43:22"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "2057:14:22",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "2067:4:22",
                                  "type": "",
                                  "value": "0x60"
                                },
                                "variables": [
                                  {
                                    "name": "_5",
                                    "nodeType": "YulTypedName",
                                    "src": "2061:2:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "tail_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "2095:6:22"
                                        },
                                        {
                                          "name": "_5",
                                          "nodeType": "YulIdentifier",
                                          "src": "2103:2:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2091:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2091:15:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "_3",
                                              "nodeType": "YulIdentifier",
                                              "src": "2118:2:22"
                                            },
                                            {
                                              "name": "_5",
                                              "nodeType": "YulIdentifier",
                                              "src": "2122:2:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "2114:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2114:11:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "2108:5:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2108:18:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2084:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2084:43:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2084:43:22"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "2140:16:22",
                                "value": {
                                  "name": "tail_4",
                                  "nodeType": "YulIdentifier",
                                  "src": "2150:6:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "tail_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "2140:6:22"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "2169:25:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "2183:6:22"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2191:2:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2179:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2179:15:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "2169:6:22"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "2207:19:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "2218:3:22"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "2223:2:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2214:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2214:12:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "2207:3:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "1500:1:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1503:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "1497:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1497:13:22"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "1511:18:22",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "1513:14:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "1522:1:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1525:1:22",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1518:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1518:9:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "1513:1:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "1493:3:22",
                            "statements": []
                          },
                          "src": "1489:747:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2245:14:22",
                          "value": {
                            "name": "tail_2",
                            "nodeType": "YulIdentifier",
                            "src": "2253:6:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2245:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_struct$_ChatMessage_$9678_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_ChatMessage_$9678_memory_ptr_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1089:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1100:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1111:4:22",
                        "type": ""
                      }
                    ],
                    "src": "911:1354:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2342:275:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2391:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2400:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2403:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2393:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2393:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2393:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2370:6:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2378:4:22",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2366:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2366:17:22"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "2385:3:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2362:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2362:27:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2355:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2355:35:22"
                          },
                          "nodeType": "YulIf",
                          "src": "2352:55:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2416:30:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2439:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2426:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2426:20:22"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "2416:6:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2489:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2498:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2501:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2491:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2491:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2491:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2461:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2469:18:22",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2458:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2458:30:22"
                          },
                          "nodeType": "YulIf",
                          "src": "2455:50:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2514:29:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2530:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2538:4:22",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2526:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2526:17:22"
                          },
                          "variableNames": [
                            {
                              "name": "arrayPos",
                              "nodeType": "YulIdentifier",
                              "src": "2514:8:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2595:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2604:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2607:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2597:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2597:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2597:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2566:6:22"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "2574:6:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2562:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2562:19:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2583:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2558:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2558:30:22"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "2590:3:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2555:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2555:39:22"
                          },
                          "nodeType": "YulIf",
                          "src": "2552:59:22"
                        }
                      ]
                    },
                    "name": "abi_decode_bytes_calldata",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2305:6:22",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2313:3:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "arrayPos",
                        "nodeType": "YulTypedName",
                        "src": "2321:8:22",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "2331:6:22",
                        "type": ""
                      }
                    ],
                    "src": "2270:347:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2764:643:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2810:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2819:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2822:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2812:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2812:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2812:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2785:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2794:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2781:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2781:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2806:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2777:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2777:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "2774:52:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2835:33:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2858:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2845:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2845:23:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2835:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2877:46:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2908:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2919:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2904:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2904:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2891:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2891:32:22"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "2881:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2932:28:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2942:18:22",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2936:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2987:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2996:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2999:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2989:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2989:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2989:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2975:6:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "2983:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2972:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2972:14:22"
                          },
                          "nodeType": "YulIf",
                          "src": "2969:34:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3012:84:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3068:9:22"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3079:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3064:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3064:22:22"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3088:7:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "3038:25:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3038:58:22"
                          },
                          "variables": [
                            {
                              "name": "value1_1",
                              "nodeType": "YulTypedName",
                              "src": "3016:8:22",
                              "type": ""
                            },
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "3026:8:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3105:18:22",
                          "value": {
                            "name": "value1_1",
                            "nodeType": "YulIdentifier",
                            "src": "3115:8:22"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "3105:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3132:18:22",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "3142:8:22"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "3132:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3159:48:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3192:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3203:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3188:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3188:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3175:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3175:32:22"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "3163:8:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3236:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3245:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3248:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3238:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3238:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3238:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "3222:8:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3232:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3219:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3219:16:22"
                          },
                          "nodeType": "YulIf",
                          "src": "3216:36:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3261:86:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3317:9:22"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3328:8:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3313:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3313:24:22"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3339:7:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "3287:25:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3287:60:22"
                          },
                          "variables": [
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "3265:8:22",
                              "type": ""
                            },
                            {
                              "name": "value4_1",
                              "nodeType": "YulTypedName",
                              "src": "3275:8:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3356:18:22",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "3366:8:22"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "3356:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3383:18:22",
                          "value": {
                            "name": "value4_1",
                            "nodeType": "YulIdentifier",
                            "src": "3393:8:22"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "3383:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_bytes_calldata_ptrt_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2698:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2709:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2721:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2729:6:22",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2737:6:22",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "2745:6:22",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "2753:6:22",
                        "type": ""
                      }
                    ],
                    "src": "2622:785:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3444:95:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3461:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3468:3:22",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3473:10:22",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "3464:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3464:20:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3454:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3454:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3454:31:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3501:1:22",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3504:4:22",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3494:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3494:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3494:15:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3525:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3528:4:22",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "3518:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3518:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3518:15:22"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "3412:127:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3590:207:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3600:19:22",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3616:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3610:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3610:9:22"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "3600:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3628:35:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "3650:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3658:4:22",
                                "type": "",
                                "value": "0xa0"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3646:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3646:17:22"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "3632:10:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3738:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "3740:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3740:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3740:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3681:10:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3693:18:22",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3678:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3678:34:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3717:10:22"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3729:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3714:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3714:22:22"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "3675:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3675:62:22"
                          },
                          "nodeType": "YulIf",
                          "src": "3672:88:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3776:2:22",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "3780:10:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3769:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3769:22:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3769:22:22"
                        }
                      ]
                    },
                    "name": "allocate_memory_4036",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "3579:6:22",
                        "type": ""
                      }
                    ],
                    "src": "3544:253:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3847:230:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3857:19:22",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3873:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3867:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3867:9:22"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "3857:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3885:58:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "3907:6:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "size",
                                        "nodeType": "YulIdentifier",
                                        "src": "3923:4:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3929:2:22",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "3919:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3919:13:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "3938:2:22",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "3934:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3934:7:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3915:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3915:27:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3903:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3903:40:22"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "3889:10:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4018:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "4020:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4020:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4020:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3961:10:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3973:18:22",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3958:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3958:34:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "3997:10:22"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "4009:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3994:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3994:22:22"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "3955:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3955:62:22"
                          },
                          "nodeType": "YulIf",
                          "src": "3952:88:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4056:2:22",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "4060:10:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4049:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4049:22:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4049:22:22"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "3827:4:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "3836:6:22",
                        "type": ""
                      }
                    ],
                    "src": "3802:275:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4139:129:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4183:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "4185:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4185:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4185:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4155:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4163:18:22",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4152:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4152:30:22"
                          },
                          "nodeType": "YulIf",
                          "src": "4149:56:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4214:48:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "4234:6:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4242:2:22",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4230:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4230:15:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4251:2:22",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "4247:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4247:7:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4226:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4226:29:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4257:4:22",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4222:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4222:40:22"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "4214:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "4119:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "4130:4:22",
                        "type": ""
                      }
                    ],
                    "src": "4082:186:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4325:410:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4374:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4383:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4386:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4376:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4376:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4376:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "4353:6:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4361:4:22",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4349:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4349:17:22"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "4368:3:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "4345:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4345:27:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "4338:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4338:35:22"
                          },
                          "nodeType": "YulIf",
                          "src": "4335:55:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4399:30:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "4422:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4409:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4409:20:22"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "4403:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4438:63:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4497:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_bytes",
                                  "nodeType": "YulIdentifier",
                                  "src": "4469:27:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4469:31:22"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "4453:15:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4453:48:22"
                          },
                          "variables": [
                            {
                              "name": "array_1",
                              "nodeType": "YulTypedName",
                              "src": "4442:7:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array_1",
                                "nodeType": "YulIdentifier",
                                "src": "4517:7:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4526:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4510:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4510:19:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4510:19:22"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4577:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4586:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4589:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4579:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4579:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4579:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "4552:6:22"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4560:2:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4548:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4548:15:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4565:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4544:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4544:26:22"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "4572:3:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4541:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4541:35:22"
                          },
                          "nodeType": "YulIf",
                          "src": "4538:55:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4619:7:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4628:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4615:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4615:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "4639:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4647:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4635:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4635:17:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4654:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "4602:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4602:55:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4602:55:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "array_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4681:7:22"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "4690:2:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4677:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4677:16:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4695:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4673:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4673:27:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4702:1:22",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4666:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4666:38:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4666:38:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4713:16:22",
                          "value": {
                            "name": "array_1",
                            "nodeType": "YulIdentifier",
                            "src": "4722:7:22"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "4713:5:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_bytes",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "4299:6:22",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "4307:3:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "4315:5:22",
                        "type": ""
                      }
                    ],
                    "src": "4273:462:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4819:241:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4865:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4874:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4877:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4867:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4867:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4867:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4840:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4849:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4836:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4836:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4861:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4832:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4832:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "4829:52:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4890:37:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4917:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4904:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4904:23:22"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "4894:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4970:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4979:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4982:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4972:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4972:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4972:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "4942:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4950:18:22",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4939:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4939:30:22"
                          },
                          "nodeType": "YulIf",
                          "src": "4936:50:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4995:59:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5026:9:22"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "5037:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5022:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5022:22:22"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "5046:7:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "5005:16:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5005:49:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4995:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4785:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4796:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4808:6:22",
                        "type": ""
                      }
                    ],
                    "src": "4740:320:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5216:481:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5226:12:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5236:2:22",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "5230:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5247:32:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5265:9:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5276:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5261:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5261:18:22"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "5251:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5295:9:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5306:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5288:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5288:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5288:21:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5318:17:22",
                          "value": {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "5329:6:22"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nodeType": "YulTypedName",
                              "src": "5322:3:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5344:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5364:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5358:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5358:13:22"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "5348:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "5387:6:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5395:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5380:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5380:22:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5380:22:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5411:25:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5422:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5433:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5418:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5418:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "5411:3:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5445:29:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "5463:6:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "5471:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5459:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5459:15:22"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "5449:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5483:10:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "5492:1:22",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "5487:1:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5551:120:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "5572:3:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "5583:6:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "5577:5:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "5577:13:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "5565:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5565:26:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5565:26:22"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "5604:19:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "5615:3:22"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5620:2:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5611:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5611:12:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5604:3:22"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "5636:25:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "5650:6:22"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "5658:2:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5646:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5646:15:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "5636:6:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "5513:1:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5516:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "5510:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5510:13:22"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "5524:18:22",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "5526:14:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "5535:1:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5538:1:22",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5531:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5531:9:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "5526:1:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "5506:3:22",
                            "statements": []
                          },
                          "src": "5502:169:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5680:11:22",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "5688:3:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5680:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_bytes32_$dyn_memory_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5185:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5196:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5207:4:22",
                        "type": ""
                      }
                    ],
                    "src": "5065:632:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5797:92:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5807:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5819:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5830:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5815:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5815:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5807:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5849:9:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "5874:6:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "5867:6:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5867:14:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "5860:6:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5860:22:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5842:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5842:41:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5842:41:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5766:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5777:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5788:4:22",
                        "type": ""
                      }
                    ],
                    "src": "5702:187:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5981:161:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6027:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6036:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6039:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6029:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6029:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6029:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6002:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6011:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5998:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5998:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6023:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5994:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5994:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "5991:52:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6052:33:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6075:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6062:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6062:23:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6052:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6094:42:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6121:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6132:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6117:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6117:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6104:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6104:32:22"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "6094:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5939:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5950:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5962:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5970:6:22",
                        "type": ""
                      }
                    ],
                    "src": "5894:248:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6368:300:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6385:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6396:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6378:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6378:22:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6378:22:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6409:59:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6440:6:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6452:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6463:3:22",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6448:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6448:19:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "6423:16:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6423:45:22"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "6413:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6488:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6499:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6484:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6484:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6508:6:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6516:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6504:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6504:22:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6477:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6477:50:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6477:50:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6536:40:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "6561:6:22"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "6569:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "6544:16:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6544:32:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6536:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6596:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6607:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6592:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6592:18:22"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "6612:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6585:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6585:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6585:34:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6639:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6650:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6635:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6635:18:22"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "6655:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6628:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6628:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6628:34:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes_memory_ptr_t_bytes_memory_ptr_t_uint256_t_uint256__to_t_bytes_memory_ptr_t_bytes_memory_ptr_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6313:9:22",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "6324:6:22",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "6332:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6340:6:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6348:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6359:4:22",
                        "type": ""
                      }
                    ],
                    "src": "6147:521:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6774:102:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6784:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6796:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6807:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6792:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6792:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6784:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6826:9:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6841:6:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6857:3:22",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6862:1:22",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "6853:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6853:11:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6866:1:22",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "6849:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6849:19:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6837:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6837:32:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6819:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6819:51:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6819:51:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6743:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6754:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6765:4:22",
                        "type": ""
                      }
                    ],
                    "src": "6673:203:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7084:229:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7101:9:22"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7112:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7094:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7094:25:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7094:25:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7139:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7150:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7135:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7135:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7155:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7128:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7128:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7128:31:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7168:53:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "7193:6:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7205:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7216:3:22",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7201:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7201:19:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "7176:16:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7176:45:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7168:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7241:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7252:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7237:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7237:18:22"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "7257:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7230:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7230:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7230:34:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7284:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7295:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7280:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7280:18:22"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "7300:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7273:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7273:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7273:34:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_bytes_memory_ptr_t_uint256_t_uint256__to_t_bytes32_t_bytes_memory_ptr_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7029:9:22",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7040:6:22",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7048:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7056:6:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7064:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7075:4:22",
                        "type": ""
                      }
                    ],
                    "src": "6881:432:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7503:232:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7513:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7525:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7536:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7521:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7521:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7513:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7556:9:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7571:6:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7587:3:22",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7592:1:22",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "7583:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7583:11:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7596:1:22",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "7579:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7579:19:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7567:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7567:32:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7549:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7549:51:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7549:51:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7620:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7631:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7616:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7616:18:22"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "7636:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7609:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7609:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7609:34:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7663:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7674:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7659:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7659:18:22"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "7679:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7652:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7652:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7652:34:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7706:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7717:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7702:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7702:18:22"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "7722:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7695:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7695:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7695:34:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7448:9:22",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7459:6:22",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7467:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7475:6:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7483:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7494:4:22",
                        "type": ""
                      }
                    ],
                    "src": "7318:417:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7785:86:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7849:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7858:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7861:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7851:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7851:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7851:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "7808:5:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "7819:5:22"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "7834:3:22",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "7839:1:22",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "7830:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "7830:11:22"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7843:1:22",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "7826:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7826:19:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "7815:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7815:31:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "7805:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7805:42:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "7798:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7798:50:22"
                          },
                          "nodeType": "YulIf",
                          "src": "7795:70:22"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "7774:5:22",
                        "type": ""
                      }
                    ],
                    "src": "7740:131:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7946:177:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7992:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8001:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8004:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "7994:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7994:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7994:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7967:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7976:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7963:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7963:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7988:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7959:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7959:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "7956:52:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8017:36:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8043:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8030:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8030:23:22"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "8021:5:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "8087:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "8062:24:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8062:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8062:31:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8102:15:22",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "8112:5:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "8102:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7912:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7923:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7935:6:22",
                        "type": ""
                      }
                    ],
                    "src": "7876:247:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8266:433:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8276:33:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8290:7:22"
                              },
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8299:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "8286:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8286:23:22"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "8280:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8334:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8343:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8346:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8336:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8336:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8336:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "8325:2:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8329:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "8321:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8321:12:22"
                          },
                          "nodeType": "YulIf",
                          "src": "8318:32:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8359:37:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8386:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "8373:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8373:23:22"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "8363:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8439:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8448:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8451:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8441:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8441:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8441:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "8411:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8419:18:22",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "8408:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8408:30:22"
                          },
                          "nodeType": "YulIf",
                          "src": "8405:50:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8464:84:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8520:9:22"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "8531:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8516:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8516:22:22"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "8540:7:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "8490:25:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8490:58:22"
                          },
                          "variables": [
                            {
                              "name": "value0_1",
                              "nodeType": "YulTypedName",
                              "src": "8468:8:22",
                              "type": ""
                            },
                            {
                              "name": "value1_1",
                              "nodeType": "YulTypedName",
                              "src": "8478:8:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8557:18:22",
                          "value": {
                            "name": "value0_1",
                            "nodeType": "YulIdentifier",
                            "src": "8567:8:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "8557:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8584:18:22",
                          "value": {
                            "name": "value1_1",
                            "nodeType": "YulIdentifier",
                            "src": "8594:8:22"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "8584:6:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "8640:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8649:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "8652:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "8642:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "8642:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "8642:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "8622:2:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8630:2:22",
                                        "type": "",
                                        "value": "31"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "8626:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8626:7:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8618:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8618:16:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8636:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "8614:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8614:25:22"
                          },
                          "nodeType": "YulIf",
                          "src": "8611:45:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8665:28:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8679:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8690:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8675:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8675:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "8665:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_calldata_ptrt_struct$_SignatureRSV_$250_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8216:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "8227:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8239:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8247:6:22",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "8255:6:22",
                        "type": ""
                      }
                    ],
                    "src": "8128:571:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8823:98:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8840:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8851:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8833:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8833:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8833:21:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8863:52:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8888:6:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8900:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8911:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8896:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8896:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "8871:16:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8871:44:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8863:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8792:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8803:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8814:4:22",
                        "type": ""
                      }
                    ],
                    "src": "8704:217:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9027:76:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9037:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9049:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9060:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9045:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9045:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9037:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9079:9:22"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9090:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9072:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9072:25:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9072:25:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8996:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9007:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9018:4:22",
                        "type": ""
                      }
                    ],
                    "src": "8926:177:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9178:110:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9224:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9233:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9236:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9226:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9226:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9226:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9199:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9208:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9195:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9195:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9220:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9191:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9191:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "9188:52:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9249:33:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9272:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9259:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9259:23:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "9249:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9144:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "9155:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9167:6:22",
                        "type": ""
                      }
                    ],
                    "src": "9108:180:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9425:564:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9471:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9480:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9483:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9473:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9473:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9473:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9446:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9455:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9442:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9442:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9467:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9438:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9438:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "9435:52:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9496:33:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9519:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9506:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9506:23:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "9496:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9538:46:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9569:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9580:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9565:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9565:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9552:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9552:32:22"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "9542:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9593:28:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "9603:18:22",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "9597:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9648:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9657:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9660:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9650:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9650:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9650:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "9636:6:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9644:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9633:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9633:14:22"
                          },
                          "nodeType": "YulIf",
                          "src": "9630:34:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9673:84:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9729:9:22"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "9740:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9725:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9725:22:22"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "9749:7:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "9699:25:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9699:58:22"
                          },
                          "variables": [
                            {
                              "name": "value1_1",
                              "nodeType": "YulTypedName",
                              "src": "9677:8:22",
                              "type": ""
                            },
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "9687:8:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9766:18:22",
                          "value": {
                            "name": "value1_1",
                            "nodeType": "YulIdentifier",
                            "src": "9776:8:22"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "9766:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9793:18:22",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "9803:8:22"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "9793:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9820:48:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9853:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9864:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9849:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9849:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9836:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9836:32:22"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "9824:8:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9897:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9906:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9909:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9899:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9899:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9899:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "9883:8:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "9893:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9880:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9880:16:22"
                          },
                          "nodeType": "YulIf",
                          "src": "9877:36:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9922:61:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9953:9:22"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9964:8:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9949:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9949:24:22"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "9975:7:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "9932:16:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9932:51:22"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "9922:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_bytes_calldata_ptrt_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9367:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "9378:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9390:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9398:6:22",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "9406:6:22",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "9414:6:22",
                        "type": ""
                      }
                    ],
                    "src": "9293:696:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10090:292:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10136:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10145:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10148:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10138:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10138:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10138:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10111:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10120:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10107:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10107:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10132:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "10103:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10103:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "10100:52:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10161:33:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10184:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10171:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10171:23:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "10161:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10203:46:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10234:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10245:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10230:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10230:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "10217:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10217:32:22"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "10207:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10292:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10301:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10304:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10294:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10294:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10294:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "10264:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10272:18:22",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10261:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10261:30:22"
                          },
                          "nodeType": "YulIf",
                          "src": "10258:50:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10317:59:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10348:9:22"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "10359:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10344:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10344:22:22"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "10368:7:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "10327:16:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10327:49:22"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "10317:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10048:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "10059:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10071:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10079:6:22",
                        "type": ""
                      }
                    ],
                    "src": "9994:388:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10546:396:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10563:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10574:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10556:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10556:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10556:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10597:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10608:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10593:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10593:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "10619:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "10613:5:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10613:13:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10586:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10586:41:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10586:41:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10636:42:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "10666:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10674:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10662:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10662:15:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "10656:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10656:22:22"
                          },
                          "variables": [
                            {
                              "name": "memberValue0",
                              "nodeType": "YulTypedName",
                              "src": "10640:12:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10698:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10709:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10694:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10694:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10714:4:22",
                                "type": "",
                                "value": "0x80"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10687:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10687:32:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10687:32:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10728:65:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "memberValue0",
                                "nodeType": "YulIdentifier",
                                "src": "10759:12:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10777:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10788:3:22",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10773:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10773:19:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "10742:16:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10742:51:22"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "10732:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10813:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10824:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10809:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10809:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "10839:6:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10847:2:22",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10835:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10835:15:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "10829:5:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10829:22:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10802:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10802:50:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10802:50:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10872:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10883:4:22",
                                    "type": "",
                                    "value": "0x80"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10868:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10868:20:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "10900:6:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "10908:2:22",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10896:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10896:15:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "10890:5:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10890:22:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10861:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10861:52:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10861:52:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10922:14:22",
                          "value": {
                            "name": "tail_1",
                            "nodeType": "YulIdentifier",
                            "src": "10930:6:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10922:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_struct$_ChatSummary_$9687_memory_ptr__to_t_struct$_ChatSummary_$9687_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10515:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10526:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10537:4:22",
                        "type": ""
                      }
                    ],
                    "src": "10387:555:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11068:98:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11085:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11096:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11078:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11078:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11078:21:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11108:52:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "11133:6:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11145:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11156:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11141:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11141:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "11116:16:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11116:44:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11108:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11037:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11048:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11059:4:22",
                        "type": ""
                      }
                    ],
                    "src": "10947:219:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11378:266:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11388:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11400:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11411:3:22",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11396:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11396:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11388:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11431:9:22"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "11442:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11424:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11424:25:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11424:25:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11469:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11480:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11465:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11465:18:22"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "11485:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11458:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11458:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11458:34:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11512:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11523:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11508:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11508:18:22"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "11528:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11501:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11501:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11501:34:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11555:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11566:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11551:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11551:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value3",
                                        "nodeType": "YulIdentifier",
                                        "src": "11585:6:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "11578:6:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11578:14:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "11571:6:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11571:22:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11544:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11544:50:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11544:50:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11614:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11625:3:22",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11610:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11610:19:22"
                              },
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "11631:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11603:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11603:35:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11603:35:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_bool_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11315:9:22",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "11326:6:22",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "11334:6:22",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "11342:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "11350:6:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11358:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11369:4:22",
                        "type": ""
                      }
                    ],
                    "src": "11171:473:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11736:228:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11782:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11791:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11794:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11784:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11784:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11784:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "11757:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11766:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "11753:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11753:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11778:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "11749:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11749:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "11746:52:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11807:36:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11833:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11820:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11820:23:22"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "11811:5:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "11877:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "11852:24:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11852:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11852:31:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11892:15:22",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "11902:5:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "11892:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11916:42:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11943:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11954:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11939:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11939:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "11926:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11926:32:22"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "11916:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11694:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "11705:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "11717:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "11725:6:22",
                        "type": ""
                      }
                    ],
                    "src": "11649:315:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12128:352:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12138:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12150:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12161:3:22",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12146:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12146:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12138:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12181:9:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "12198:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "12192:5:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12192:13:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12174:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12174:32:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12174:32:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12226:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12237:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12222:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12222:20:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "12254:6:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12262:4:22",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12250:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12250:17:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "12244:5:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12244:24:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12215:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12215:54:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12215:54:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12289:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12300:4:22",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12285:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12285:20:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "12317:6:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12325:4:22",
                                        "type": "",
                                        "value": "0x40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12313:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12313:17:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "12307:5:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12307:24:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12278:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12278:54:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12278:54:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12352:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12363:4:22",
                                    "type": "",
                                    "value": "0x60"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12348:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12348:20:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "value0",
                                                "nodeType": "YulIdentifier",
                                                "src": "12394:6:22"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "12402:4:22",
                                                "type": "",
                                                "value": "0x60"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "12390:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "12390:17:22"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mload",
                                          "nodeType": "YulIdentifier",
                                          "src": "12384:5:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "12384:24:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "12377:6:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12377:32:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "12370:6:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12370:40:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12341:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12341:70:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12341:70:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12431:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12442:4:22",
                                    "type": "",
                                    "value": "0x80"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12427:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12427:20:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "12459:6:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12467:4:22",
                                        "type": "",
                                        "value": "0x80"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12455:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12455:17:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "12449:5:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12449:24:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12420:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12420:54:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12420:54:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_struct$_ChatSession_$9669_memory_ptr__to_t_struct$_ChatSession_$9669_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12097:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12108:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12119:4:22",
                        "type": ""
                      }
                    ],
                    "src": "11969:511:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12659:167:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12676:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12687:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12669:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12669:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12669:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12710:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12721:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12706:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12706:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12726:2:22",
                                "type": "",
                                "value": "17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12699:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12699:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12699:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12749:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12760:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12745:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12745:18:22"
                              },
                              {
                                "hexValue": "53657373696f6e206e6f7420666f756e64",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12765:19:22",
                                "type": "",
                                "value": "Session not found"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12738:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12738:47:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12738:47:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12794:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12806:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12817:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12802:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12802:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12794:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1b66197486f9dea70286f19d4796d61200b37418a2b5efcb2cce46cc727c84b8__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12636:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12650:4:22",
                        "type": ""
                      }
                    ],
                    "src": "12485:341:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12886:325:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12896:22:22",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12910:1:22",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "12913:4:22"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "12906:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12906:12:22"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "12896:6:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12927:38:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "12957:4:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12963:1:22",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "12953:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12953:12:22"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "12931:18:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13004:31:22",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "13006:27:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "13020:6:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13028:4:22",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "13016:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13016:17:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "13006:6:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "12984:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "12977:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12977:26:22"
                          },
                          "nodeType": "YulIf",
                          "src": "12974:61:22"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13094:111:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13115:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13122:3:22",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13127:10:22",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "13118:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13118:20:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13108:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13108:31:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13108:31:22"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13159:1:22",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13162:4:22",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13152:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13152:15:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13152:15:22"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13187:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13190:4:22",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "13180:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13180:15:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13180:15:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "13050:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "13073:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13081:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "13070:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13070:14:22"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "13047:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13047:38:22"
                          },
                          "nodeType": "YulIf",
                          "src": "13044:161:22"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "12866:4:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "12875:6:22",
                        "type": ""
                      }
                    ],
                    "src": "12831:380:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13390:167:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13407:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13418:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13400:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13400:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13400:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13441:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13452:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13437:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13437:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13457:2:22",
                                "type": "",
                                "value": "17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13430:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13430:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13430:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13480:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13491:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13476:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13476:18:22"
                              },
                              {
                                "hexValue": "53657373696f6e20697320636c6f736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13496:19:22",
                                "type": "",
                                "value": "Session is closed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13469:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13469:47:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13469:47:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13525:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13537:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13548:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13533:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13533:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13525:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e0e5889a2fbe7e35307fbd9d22e70cdfcd4e151ef85cecb5e8062e51b2d2ec2a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13367:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13381:4:22",
                        "type": ""
                      }
                    ],
                    "src": "13216:341:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13617:65:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13634:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "13637:3:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13627:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13627:14:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13627:14:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13650:26:22",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13668:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13671:4:22",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nodeType": "YulIdentifier",
                              "src": "13658:9:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13658:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "13650:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_bytes_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "13600:3:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "13608:4:22",
                        "type": ""
                      }
                    ],
                    "src": "13562:120:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13767:464:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "13800:425:22",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "13814:11:22",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "13824:1:22",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulTypedName",
                                    "src": "13818:2:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "13845:2:22"
                                    },
                                    {
                                      "name": "array",
                                      "nodeType": "YulIdentifier",
                                      "src": "13849:5:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "13838:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13838:17:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "13838:17:22"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "13868:31:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "13890:2:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "13894:4:22",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "keccak256",
                                    "nodeType": "YulIdentifier",
                                    "src": "13880:9:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13880:19:22"
                                },
                                "variables": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulTypedName",
                                    "src": "13872:4:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "13912:57:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "13935:4:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "13945:1:22",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "startIndex",
                                              "nodeType": "YulIdentifier",
                                              "src": "13952:10:22"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "13964:2:22",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "13948:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "13948:19:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "13941:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13941:27:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "13931:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13931:38:22"
                                },
                                "variables": [
                                  {
                                    "name": "deleteStart",
                                    "nodeType": "YulTypedName",
                                    "src": "13916:11:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "14006:23:22",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "14008:19:22",
                                      "value": {
                                        "name": "data",
                                        "nodeType": "YulIdentifier",
                                        "src": "14023:4:22"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "deleteStart",
                                          "nodeType": "YulIdentifier",
                                          "src": "14008:11:22"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "startIndex",
                                      "nodeType": "YulIdentifier",
                                      "src": "13988:10:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14000:4:22",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "13985:2:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "13985:20:22"
                                },
                                "nodeType": "YulIf",
                                "src": "13982:47:22"
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "14042:41:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "data",
                                      "nodeType": "YulIdentifier",
                                      "src": "14056:4:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "14066:1:22",
                                          "type": "",
                                          "value": "5"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "len",
                                              "nodeType": "YulIdentifier",
                                              "src": "14073:3:22"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "14078:2:22",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "14069:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "14069:12:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shr",
                                        "nodeType": "YulIdentifier",
                                        "src": "14062:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14062:20:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "14052:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14052:31:22"
                                },
                                "variables": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulTypedName",
                                    "src": "14046:2:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "14096:24:22",
                                "value": {
                                  "name": "deleteStart",
                                  "nodeType": "YulIdentifier",
                                  "src": "14109:11:22"
                                },
                                "variables": [
                                  {
                                    "name": "start",
                                    "nodeType": "YulTypedName",
                                    "src": "14100:5:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "14194:21:22",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "14203:5:22"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "14210:2:22"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sstore",
                                          "nodeType": "YulIdentifier",
                                          "src": "14196:6:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "14196:17:22"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "14196:17:22"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nodeType": "YulIdentifier",
                                      "src": "14144:5:22"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "14151:2:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nodeType": "YulIdentifier",
                                    "src": "14141:2:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14141:13:22"
                                },
                                "nodeType": "YulForLoop",
                                "post": {
                                  "nodeType": "YulBlock",
                                  "src": "14155:26:22",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "14157:22:22",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "start",
                                            "nodeType": "YulIdentifier",
                                            "src": "14170:5:22"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "14177:1:22",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "14166:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "14166:13:22"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "start",
                                          "nodeType": "YulIdentifier",
                                          "src": "14157:5:22"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "pre": {
                                  "nodeType": "YulBlock",
                                  "src": "14137:3:22",
                                  "statements": []
                                },
                                "src": "14133:82:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "len",
                                "nodeType": "YulIdentifier",
                                "src": "13783:3:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13788:2:22",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "13780:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13780:11:22"
                          },
                          "nodeType": "YulIf",
                          "src": "13777:448:22"
                        }
                      ]
                    },
                    "name": "clean_up_bytearray_end_slots_bytes_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "13739:5:22",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "13746:3:22",
                        "type": ""
                      },
                      {
                        "name": "startIndex",
                        "nodeType": "YulTypedName",
                        "src": "13751:10:22",
                        "type": ""
                      }
                    ],
                    "src": "13687:544:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14321:81:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14331:65:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "data",
                                    "nodeType": "YulIdentifier",
                                    "src": "14346:4:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "14364:1:22",
                                                "type": "",
                                                "value": "3"
                                              },
                                              {
                                                "name": "len",
                                                "nodeType": "YulIdentifier",
                                                "src": "14367:3:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "14360:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "14360:11:22"
                                          },
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "14377:1:22",
                                                "type": "",
                                                "value": "0"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "not",
                                              "nodeType": "YulIdentifier",
                                              "src": "14373:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "14373:6:22"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shr",
                                          "nodeType": "YulIdentifier",
                                          "src": "14356:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "14356:24:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "14352:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14352:29:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "14342:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14342:40:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14388:1:22",
                                    "type": "",
                                    "value": "1"
                                  },
                                  {
                                    "name": "len",
                                    "nodeType": "YulIdentifier",
                                    "src": "14391:3:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "14384:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14384:11:22"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "14339:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14339:57:22"
                          },
                          "variableNames": [
                            {
                              "name": "used",
                              "nodeType": "YulIdentifier",
                              "src": "14331:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "extract_used_part_and_set_length_of_short_byte_array",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "14298:4:22",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nodeType": "YulTypedName",
                        "src": "14304:3:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "used",
                        "nodeType": "YulTypedName",
                        "src": "14312:4:22",
                        "type": ""
                      }
                    ],
                    "src": "14236:166:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14501:1254:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14511:24:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "14531:3:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "14525:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14525:10:22"
                          },
                          "variables": [
                            {
                              "name": "newLen",
                              "nodeType": "YulTypedName",
                              "src": "14515:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14578:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "14580:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14580:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "14580:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "14550:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14558:18:22",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "14547:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14547:30:22"
                          },
                          "nodeType": "YulIf",
                          "src": "14544:56:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nodeType": "YulIdentifier",
                                "src": "14652:4:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nodeType": "YulIdentifier",
                                        "src": "14690:4:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sload",
                                      "nodeType": "YulIdentifier",
                                      "src": "14684:5:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "14684:11:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "extract_byte_array_length",
                                  "nodeType": "YulIdentifier",
                                  "src": "14658:25:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14658:38:22"
                              },
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "14698:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "clean_up_bytearray_end_slots_bytes_storage",
                              "nodeType": "YulIdentifier",
                              "src": "14609:42:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14609:96:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14609:96:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14714:18:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14731:1:22",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulTypedName",
                              "src": "14718:9:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14741:23:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "14760:4:22",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "srcOffset_1",
                              "nodeType": "YulTypedName",
                              "src": "14745:11:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14773:24:22",
                          "value": {
                            "name": "srcOffset_1",
                            "nodeType": "YulIdentifier",
                            "src": "14786:11:22"
                          },
                          "variableNames": [
                            {
                              "name": "srcOffset",
                              "nodeType": "YulIdentifier",
                              "src": "14773:9:22"
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "14843:655:22",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "14857:35:22",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "14876:6:22"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "14888:2:22",
                                              "type": "",
                                              "value": "31"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "14884:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "14884:7:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "14872:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14872:20:22"
                                    },
                                    "variables": [
                                      {
                                        "name": "loopEnd",
                                        "nodeType": "YulTypedName",
                                        "src": "14861:7:22",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "14905:48:22",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "14948:4:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_bytes_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "14919:28:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14919:34:22"
                                    },
                                    "variables": [
                                      {
                                        "name": "dstPtr",
                                        "nodeType": "YulTypedName",
                                        "src": "14909:6:22",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "14966:10:22",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14975:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "14970:1:22",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "15053:172:22",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "15078:6:22"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "15096:3:22"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "15101:9:22"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "15092:3:22"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "15092:19:22"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15086:5:22"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "15086:26:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "15071:6:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15071:42:22"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "15071:42:22"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "15130:24:22",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "15144:6:22"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "15152:1:22",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "15140:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15140:14:22"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dstPtr",
                                              "nodeType": "YulIdentifier",
                                              "src": "15130:6:22"
                                            }
                                          ]
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "15171:40:22",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcOffset",
                                                "nodeType": "YulIdentifier",
                                                "src": "15188:9:22"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "15199:11:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "15184:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15184:27:22"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcOffset",
                                              "nodeType": "YulIdentifier",
                                              "src": "15171:9:22"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "15000:1:22"
                                        },
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "15003:7:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "14997:2:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "14997:14:22"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "15012:28:22",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "15014:24:22",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "15023:1:22"
                                              },
                                              {
                                                "name": "srcOffset_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "15026:11:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "15019:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15019:19:22"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "15014:1:22"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "14993:3:22",
                                      "statements": []
                                    },
                                    "src": "14989:236:22"
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "15273:166:22",
                                      "statements": [
                                        {
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "15291:43:22",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "15318:3:22"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "15323:9:22"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15314:3:22"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "15314:19:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "15308:5:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15308:26:22"
                                          },
                                          "variables": [
                                            {
                                              "name": "lastValue",
                                              "nodeType": "YulTypedName",
                                              "src": "15295:9:22",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nodeType": "YulIdentifier",
                                                "src": "15358:6:22"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "lastValue",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "15370:9:22"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "arguments": [
                                                          {
                                                            "arguments": [
                                                              {
                                                                "arguments": [
                                                                  {
                                                                    "kind": "number",
                                                                    "nodeType": "YulLiteral",
                                                                    "src": "15397:1:22",
                                                                    "type": "",
                                                                    "value": "3"
                                                                  },
                                                                  {
                                                                    "name": "newLen",
                                                                    "nodeType": "YulIdentifier",
                                                                    "src": "15400:6:22"
                                                                  }
                                                                ],
                                                                "functionName": {
                                                                  "name": "shl",
                                                                  "nodeType": "YulIdentifier",
                                                                  "src": "15393:3:22"
                                                                },
                                                                "nodeType": "YulFunctionCall",
                                                                "src": "15393:14:22"
                                                              },
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "15409:3:22",
                                                                "type": "",
                                                                "value": "248"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "and",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "15389:3:22"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "15389:24:22"
                                                          },
                                                          {
                                                            "arguments": [
                                                              {
                                                                "kind": "number",
                                                                "nodeType": "YulLiteral",
                                                                "src": "15419:1:22",
                                                                "type": "",
                                                                "value": "0"
                                                              }
                                                            ],
                                                            "functionName": {
                                                              "name": "not",
                                                              "nodeType": "YulIdentifier",
                                                              "src": "15415:3:22"
                                                            },
                                                            "nodeType": "YulFunctionCall",
                                                            "src": "15415:6:22"
                                                          }
                                                        ],
                                                        "functionName": {
                                                          "name": "shr",
                                                          "nodeType": "YulIdentifier",
                                                          "src": "15385:3:22"
                                                        },
                                                        "nodeType": "YulFunctionCall",
                                                        "src": "15385:37:22"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "not",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "15381:3:22"
                                                    },
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "15381:42:22"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "and",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15366:3:22"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "15366:58:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "15351:6:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15351:74:22"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "15351:74:22"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "loopEnd",
                                          "nodeType": "YulIdentifier",
                                          "src": "15244:7:22"
                                        },
                                        {
                                          "name": "newLen",
                                          "nodeType": "YulIdentifier",
                                          "src": "15253:6:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "15241:2:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15241:19:22"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "15238:201:22"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "15459:4:22"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "15473:1:22",
                                                  "type": "",
                                                  "value": "1"
                                                },
                                                {
                                                  "name": "newLen",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15476:6:22"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "15469:3:22"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "15469:14:22"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "15485:1:22",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "15465:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "15465:22:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "15452:6:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15452:36:22"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15452:36:22"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "14836:662:22",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14841:1:22",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "15515:234:22",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "15529:14:22",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "15542:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulTypedName",
                                        "src": "15533:5:22",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "15578:67:22",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "15596:35:22",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "15615:3:22"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "15620:9:22"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "15611:3:22"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "15611:19:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nodeType": "YulIdentifier",
                                              "src": "15605:5:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "15605:26:22"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "15596:5:22"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "name": "newLen",
                                      "nodeType": "YulIdentifier",
                                      "src": "15559:6:22"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "15556:89:22"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nodeType": "YulIdentifier",
                                          "src": "15665:4:22"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nodeType": "YulIdentifier",
                                              "src": "15724:5:22"
                                            },
                                            {
                                              "name": "newLen",
                                              "nodeType": "YulIdentifier",
                                              "src": "15731:6:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "extract_used_part_and_set_length_of_short_byte_array",
                                            "nodeType": "YulIdentifier",
                                            "src": "15671:52:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "15671:67:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "15658:6:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "15658:81:22"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "15658:81:22"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "15507:242:22",
                              "value": "default"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nodeType": "YulIdentifier",
                                "src": "14816:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14824:2:22",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "14813:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14813:14:22"
                          },
                          "nodeType": "YulSwitch",
                          "src": "14806:943:22"
                        }
                      ]
                    },
                    "name": "copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nodeType": "YulTypedName",
                        "src": "14486:4:22",
                        "type": ""
                      },
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "14492:3:22",
                        "type": ""
                      }
                    ],
                    "src": "14407:1348:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15792:95:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15809:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15816:3:22",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15821:10:22",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "15812:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15812:20:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15802:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15802:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15802:31:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15849:1:22",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15852:4:22",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15842:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15842:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15842:15:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15873:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15876:4:22",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "15866:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15866:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15866:15:22"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "15760:127:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15939:88:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "15970:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "15972:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15972:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "15972:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "15955:5:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15966:1:22",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "15962:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15962:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "15952:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15952:17:22"
                          },
                          "nodeType": "YulIf",
                          "src": "15949:43:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16001:20:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "16012:5:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16019:1:22",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16008:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16008:13:22"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "16001:3:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "15921:5:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "15931:3:22",
                        "type": ""
                      }
                    ],
                    "src": "15892:135:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16161:119:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16171:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16183:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16194:2:22",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16179:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16179:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16171:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16213:9:22"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "16224:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16206:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16206:25:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16206:25:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16251:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16262:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16247:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16247:18:22"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "16267:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16240:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16240:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16240:34:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16122:9:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "16133:6:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "16141:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16152:4:22",
                        "type": ""
                      }
                    ],
                    "src": "16032:248:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16459:172:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16476:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16487:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16469:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16469:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16469:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16510:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16521:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16506:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16506:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16526:2:22",
                                "type": "",
                                "value": "22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16499:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16499:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16499:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16549:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16560:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16545:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16545:18:22"
                              },
                              {
                                "hexValue": "53657373696f6e20616c726561647920636c6f736564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16565:24:22",
                                "type": "",
                                "value": "Session already closed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16538:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16538:52:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16538:52:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16599:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16611:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16622:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16607:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16607:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16599:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_c0079c4aac0fe11a16d41c79fa5fe321c6273ce75f0a1b2bcf70ebd0dcd76d28__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16436:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16450:4:22",
                        "type": ""
                      }
                    ],
                    "src": "16285:346:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16810:178:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16827:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16838:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16820:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16820:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16820:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16861:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16872:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16857:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16857:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16877:2:22",
                                "type": "",
                                "value": "28"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16850:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16850:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16850:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16900:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16911:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16896:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16896:18:22"
                              },
                              {
                                "hexValue": "496e76616c69642054454520636f6e74726163742061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16916:30:22",
                                "type": "",
                                "value": "Invalid TEE contract address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16889:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16889:58:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16889:58:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16956:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16968:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16979:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16964:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16964:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16956:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7be940dd03837bee181e8c67faa08642c7a9eb2e139954242cb43d55a98c2ea9__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16787:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16801:4:22",
                        "type": ""
                      }
                    ],
                    "src": "16636:352:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17291:383:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "17308:3:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17313:66:22",
                                "type": "",
                                "value": "0x19457468657265756d205369676e6564204d6573736167653a0a000000000000"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17301:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17301:79:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17301:79:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17389:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "17409:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "17403:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17403:13:22"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "17393:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "17464:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17472:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17460:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17460:17:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "17483:3:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17488:2:22",
                                    "type": "",
                                    "value": "26"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17479:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17479:12:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "17493:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "17425:34:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17425:75:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17425:75:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17509:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "17523:3:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "17528:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17519:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17519:16:22"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "17513:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "17561:2:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17565:2:22",
                                    "type": "",
                                    "value": "26"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17557:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17557:11:22"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "17570:6:22"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "17578:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nodeType": "YulIdentifier",
                              "src": "17544:12:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17544:41:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17544:41:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17594:34:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "17612:2:22"
                                  },
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "17616:6:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17608:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17608:15:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17625:2:22",
                                "type": "",
                                "value": "26"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17604:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17604:24:22"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "17598:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "17644:2:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17648:1:22",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17637:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17637:13:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17637:13:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17659:9:22",
                          "value": {
                            "name": "_2",
                            "nodeType": "YulIdentifier",
                            "src": "17666:2:22"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "17659:3:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4_t_string_memory_ptr_t_string_calldata_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "17251:3:22",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "17256:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "17264:6:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17272:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "17283:3:22",
                        "type": ""
                      }
                    ],
                    "src": "16993:681:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17860:217:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17870:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17882:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17893:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17878:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17878:19:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17870:4:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17913:9:22"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "17924:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17906:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17906:25:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17906:25:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17951:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17962:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17947:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17947:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "17971:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17979:4:22",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "17967:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17967:17:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17940:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17940:45:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17940:45:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18005:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18016:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18001:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18001:18:22"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "18021:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17994:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17994:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17994:34:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18048:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18059:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18044:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18044:18:22"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "18064:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18037:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18037:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18037:34:22"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17805:9:22",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "17816:6:22",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "17824:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "17832:6:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17840:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17851:4:22",
                        "type": ""
                      }
                    ],
                    "src": "17679:398:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18220:706:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18230:12:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18241:1:22",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "ret",
                              "nodeType": "YulTypedName",
                              "src": "18234:3:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18251:30:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "18274:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "sload",
                              "nodeType": "YulIdentifier",
                              "src": "18268:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18268:13:22"
                          },
                          "variables": [
                            {
                              "name": "slotValue",
                              "nodeType": "YulTypedName",
                              "src": "18255:9:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18290:50:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "18330:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "extract_byte_array_length",
                              "nodeType": "YulIdentifier",
                              "src": "18304:25:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18304:36:22"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "18294:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "18349:11:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "18359:1:22",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "18353:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "18410:126:22",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "18431:3:22"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "slotValue",
                                              "nodeType": "YulIdentifier",
                                              "src": "18440:9:22"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "18455:3:22",
                                                  "type": "",
                                                  "value": "255"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "18451:3:22"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "18451:8:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "18436:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "18436:24:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "18424:6:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18424:37:22"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "18424:37:22"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "18474:52:22",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "18485:3:22"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "length",
                                              "nodeType": "YulIdentifier",
                                              "src": "18494:6:22"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "arguments": [
                                                    {
                                                      "name": "length",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "18516:6:22"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "iszero",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "18509:6:22"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "18509:14:22"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "iszero",
                                                "nodeType": "YulIdentifier",
                                                "src": "18502:6:22"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "18502:22:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mul",
                                            "nodeType": "YulIdentifier",
                                            "src": "18490:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "18490:35:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "18481:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18481:45:22"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "18474:3:22"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "18403:133:22",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18408:1:22",
                                "type": "",
                                "value": "0"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "18552:349:22",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "18573:1:22",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "18576:6:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "18566:6:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18566:17:22"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "18566:17:22"
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "18596:14:22",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18606:4:22",
                                      "type": "",
                                      "value": "0x20"
                                    },
                                    "variables": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulTypedName",
                                        "src": "18600:2:22",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "18623:31:22",
                                    "value": {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "18648:1:22",
                                          "type": "",
                                          "value": "0"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "18651:2:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "keccak256",
                                        "nodeType": "YulIdentifier",
                                        "src": "18638:9:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18638:16:22"
                                    },
                                    "variables": [
                                      {
                                        "name": "dataPos",
                                        "nodeType": "YulTypedName",
                                        "src": "18627:7:22",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "18667:10:22",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "18676:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "18671:1:22",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "18744:111:22",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "pos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "18773:3:22"
                                                  },
                                                  {
                                                    "name": "i",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "18778:1:22"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "18769:3:22"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "18769:11:22"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "dataPos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "18788:7:22"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "18782:5:22"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "18782:14:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "18762:6:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "18762:35:22"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "18762:35:22"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "18814:27:22",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dataPos",
                                                "nodeType": "YulIdentifier",
                                                "src": "18829:7:22"
                                              },
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "18838:2:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "18825:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "18825:16:22"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dataPos",
                                              "nodeType": "YulIdentifier",
                                              "src": "18814:7:22"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "18701:1:22"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "18704:6:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "18698:2:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18698:13:22"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "18712:19:22",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "18714:15:22",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "18723:1:22"
                                              },
                                              {
                                                "name": "_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "18726:2:22"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "18719:3:22"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "18719:10:22"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "18714:1:22"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "18694:3:22",
                                      "statements": []
                                    },
                                    "src": "18690:165:22"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "18868:23:22",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "18879:3:22"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "18884:6:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "18875:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "18875:16:22"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "18868:3:22"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "18545:356:22",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18550:1:22",
                                "type": "",
                                "value": "1"
                              }
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "18380:9:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "18391:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "18376:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18376:18:22"
                          },
                          "nodeType": "YulSwitch",
                          "src": "18369:532:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18910:10:22",
                          "value": {
                            "name": "ret",
                            "nodeType": "YulIdentifier",
                            "src": "18917:3:22"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "18910:3:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_storage_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "18196:3:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18201:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "18212:3:22",
                        "type": ""
                      }
                    ],
                    "src": "18082:844:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18979:77:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "18989:16:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "19000:1:22"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "19003:1:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18996:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18996:9:22"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "18989:3:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "19028:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "19030:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "19030:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "19030:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "19020:1:22"
                              },
                              {
                                "name": "sum",
                                "nodeType": "YulIdentifier",
                                "src": "19023:3:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "19017:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19017:10:22"
                          },
                          "nodeType": "YulIf",
                          "src": "19014:36:22"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "18962:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "18965:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "18971:3:22",
                        "type": ""
                      }
                    ],
                    "src": "18931:125:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19093:95:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19110:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19117:3:22",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19122:10:22",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "19113:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19113:20:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19103:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19103:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19103:31:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19150:1:22",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19153:4:22",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19143:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19143:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19143:15:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19174:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19177:4:22",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "19167:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19167:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19167:15:22"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "19061:127:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19348:1228:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19358:12:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "19368:2:22",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "19362:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19386:9:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "19397:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19379:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19379:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19379:21:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19409:33:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "19435:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "19429:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19429:13:22"
                          },
                          "variables": [
                            {
                              "name": "memberValue0",
                              "nodeType": "YulTypedName",
                              "src": "19413:12:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19462:9:22"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "19473:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19458:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19458:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19478:4:22",
                                "type": "",
                                "value": "0xa0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19451:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19451:32:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19451:32:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19492:65:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "memberValue0",
                                "nodeType": "YulIdentifier",
                                "src": "19523:12:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19541:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19552:3:22",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19537:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19537:19:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "19506:16:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19506:51:22"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "19496:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19577:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19588:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19573:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19573:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "19607:6:22"
                                          },
                                          {
                                            "name": "_1",
                                            "nodeType": "YulIdentifier",
                                            "src": "19615:2:22"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "19603:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "19603:15:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "19597:5:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19597:22:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "19629:3:22",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "19634:1:22",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "19625:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "19625:11:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19638:1:22",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "19621:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19621:19:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "19593:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19593:48:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19566:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19566:76:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19566:76:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19662:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19673:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19658:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19658:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "19688:6:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "19696:2:22",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "19684:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19684:15:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "19678:5:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19678:22:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19651:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19651:50:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19651:50:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19710:44:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "19742:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19750:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19738:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19738:15:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "19732:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19732:22:22"
                          },
                          "variables": [
                            {
                              "name": "memberValue0_1",
                              "nodeType": "YulTypedName",
                              "src": "19714:14:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19763:17:22",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19777:2:22",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "19773:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19773:7:22"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "19767:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19800:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19811:3:22",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19796:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19796:19:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "19825:6:22"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "19833:9:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "19821:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "19821:22:22"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "19845:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19817:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19817:31:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19789:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19789:60:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19789:60:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19858:54:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "memberValue0_1",
                                "nodeType": "YulIdentifier",
                                "src": "19889:14:22"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "19905:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "19872:16:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19872:40:22"
                          },
                          "variables": [
                            {
                              "name": "tail_2",
                              "nodeType": "YulTypedName",
                              "src": "19862:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "19921:45:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "19953:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19961:3:22",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19949:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19949:16:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "19943:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19943:23:22"
                          },
                          "variables": [
                            {
                              "name": "memberValue0_2",
                              "nodeType": "YulTypedName",
                              "src": "19925:14:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19986:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19997:4:22",
                                    "type": "",
                                    "value": "0xa0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19982:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19982:20:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "20012:6:22"
                                      },
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "20020:9:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "20008:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20008:22:22"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "20032:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20004:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20004:31:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19975:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19975:61:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19975:61:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20045:17:22",
                          "value": {
                            "name": "tail_2",
                            "nodeType": "YulIdentifier",
                            "src": "20056:6:22"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nodeType": "YulTypedName",
                              "src": "20049:3:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20071:35:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "memberValue0_2",
                                "nodeType": "YulIdentifier",
                                "src": "20091:14:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "20085:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20085:21:22"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "20075:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "20122:6:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "20130:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20115:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20115:22:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20115:22:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20146:22:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail_2",
                                "nodeType": "YulIdentifier",
                                "src": "20157:6:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "20165:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20153:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20153:15:22"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "20146:3:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20177:50:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "tail_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "20199:6:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20211:1:22",
                                        "type": "",
                                        "value": "5"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "20214:6:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "20207:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20207:14:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20195:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20195:27:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "20224:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20191:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20191:36:22"
                          },
                          "variables": [
                            {
                              "name": "tail_3",
                              "nodeType": "YulTypedName",
                              "src": "20181:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20236:37:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "memberValue0_2",
                                "nodeType": "YulIdentifier",
                                "src": "20254:14:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "20270:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20250:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20250:23:22"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "20240:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20282:10:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20291:1:22",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "20286:1:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20350:197:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "20371:3:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "tail_3",
                                              "nodeType": "YulIdentifier",
                                              "src": "20384:6:22"
                                            },
                                            {
                                              "name": "tail_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "20392:6:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "sub",
                                            "nodeType": "YulIdentifier",
                                            "src": "20380:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "20380:19:22"
                                        },
                                        {
                                          "name": "_2",
                                          "nodeType": "YulIdentifier",
                                          "src": "20401:2:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "20376:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "20376:28:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "20364:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20364:41:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20364:41:22"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "20418:49:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "srcPtr",
                                          "nodeType": "YulIdentifier",
                                          "src": "20451:6:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "20445:5:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "20445:13:22"
                                    },
                                    {
                                      "name": "tail_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "20460:6:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encode_bytes",
                                    "nodeType": "YulIdentifier",
                                    "src": "20428:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20428:39:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "tail_3",
                                    "nodeType": "YulIdentifier",
                                    "src": "20418:6:22"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "20480:25:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "20494:6:22"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "20502:2:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "20490:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20490:15:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "20480:6:22"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "20518:19:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "20529:3:22"
                                    },
                                    {
                                      "name": "_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "20534:2:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "20525:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20525:12:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "20518:3:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "20312:1:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "20315:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "20309:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20309:13:22"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "20323:18:22",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "20325:14:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "20334:1:22"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "20337:1:22",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "20330:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20330:9:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "20325:1:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "20305:3:22",
                            "statements": []
                          },
                          "src": "20301:246:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20556:14:22",
                          "value": {
                            "name": "tail_3",
                            "nodeType": "YulIdentifier",
                            "src": "20564:6:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20556:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_struct$_AuthToken_$2430_memory_ptr__to_t_struct$_AuthToken_$2430_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19317:9:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19328:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19339:4:22",
                        "type": ""
                      }
                    ],
                    "src": "19193:1383:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20756:184:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "20773:3:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20786:2:22",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "20790:6:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "20782:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20782:15:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "20803:26:22",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "20799:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "20799:31:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20778:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20778:53:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20766:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20766:66:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20766:66:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "20852:3:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20857:2:22",
                                    "type": "",
                                    "value": "20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20848:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20848:12:22"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "20862:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20841:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20841:28:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20841:28:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "20889:3:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20894:2:22",
                                    "type": "",
                                    "value": "52"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20885:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20885:12:22"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "20899:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20878:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20878:28:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20878:28:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20915:19:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "20926:3:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20931:2:22",
                                "type": "",
                                "value": "84"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20922:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20922:12:22"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "20915:3:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "20716:3:22",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "20721:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20729:6:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20737:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "20748:3:22",
                        "type": ""
                      }
                    ],
                    "src": "20581:359:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20994:79:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "21004:17:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "21016:1:22"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "21019:1:22"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "21012:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21012:9:22"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "21004:4:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21045:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "21047:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21047:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21047:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "21036:4:22"
                              },
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "21042:1:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "21033:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21033:11:22"
                          },
                          "nodeType": "YulIf",
                          "src": "21030:37:22"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "20976:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "20979:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "20985:4:22",
                        "type": ""
                      }
                    ],
                    "src": "20945:128:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21110:95:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21127:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21134:3:22",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21139:10:22",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "21130:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21130:20:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21120:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21120:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21120:31:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21167:1:22",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21170:4:22",
                                "type": "",
                                "value": "0x31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21160:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21160:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21160:15:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21191:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21194:4:22",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "21184:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21184:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21184:15:22"
                        }
                      ]
                    },
                    "name": "panic_error_0x31",
                    "nodeType": "YulFunctionDefinition",
                    "src": "21078:127:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21384:169:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21401:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21412:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21394:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21394:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21394:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21435:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21446:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21431:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21431:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21451:2:22",
                                "type": "",
                                "value": "19"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21424:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21424:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21424:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21474:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21485:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21470:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21470:18:22"
                              },
                              {
                                "hexValue": "416c726561647920696e697469616c697a6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21490:21:22",
                                "type": "",
                                "value": "Already initialized"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21463:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21463:49:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21463:49:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21521:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21533:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21544:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21529:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21529:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21521:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21361:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21375:4:22",
                        "type": ""
                      }
                    ],
                    "src": "21210:343:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21732:170:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21749:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21760:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21742:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21742:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21742:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21783:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21794:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21779:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21779:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21799:2:22",
                                "type": "",
                                "value": "20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21772:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21772:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21772:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21822:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21833:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21818:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21818:18:22"
                              },
                              {
                                "hexValue": "496e76616c696420757365722061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21838:22:22",
                                "type": "",
                                "value": "Invalid user address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21811:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21811:50:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21811:50:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21870:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21882:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21893:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21878:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21878:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21870:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1f57e86588d4056fbc66a1ccbde1e5364452891f7334f70d5376cb310a8a3993__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21709:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21723:4:22",
                        "type": ""
                      }
                    ],
                    "src": "21558:344:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21939:95:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21956:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21963:3:22",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21968:10:22",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "21959:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21959:20:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21949:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21949:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21949:31:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21996:1:22",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21999:4:22",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21989:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21989:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21989:15:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22020:1:22",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22023:4:22",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "22013:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22013:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22013:15:22"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "21907:127:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22260:300:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22277:9:22"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "22288:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22270:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22270:25:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22270:25:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22315:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22326:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22311:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22311:18:22"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "22331:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22304:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22304:34:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22304:34:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22358:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22369:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22354:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22354:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22374:3:22",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22347:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22347:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22347:31:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22387:59:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "22418:6:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22430:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22441:3:22",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22426:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22426:19:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "22401:16:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22401:45:22"
                          },
                          "variables": [
                            {
                              "name": "tail_1",
                              "nodeType": "YulTypedName",
                              "src": "22391:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22466:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22477:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22462:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22462:18:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "22486:6:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22494:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "22482:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22482:22:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22455:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22455:50:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22455:50:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22514:40:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "22539:6:22"
                              },
                              {
                                "name": "tail_1",
                                "nodeType": "YulIdentifier",
                                "src": "22547:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_bytes",
                              "nodeType": "YulIdentifier",
                              "src": "22522:16:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22522:32:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22514:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes32_t_bytes32_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22205:9:22",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "22216:6:22",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "22224:6:22",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "22232:6:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22240:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22251:4:22",
                        "type": ""
                      }
                    ],
                    "src": "22039:521:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22702:150:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "22712:27:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "22732:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "22726:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22726:13:22"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "22716:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "22787:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22795:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22783:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22783:17:22"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "22802:3:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "22807:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "22748:34:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22748:66:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22748:66:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22823:23:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "22834:3:22"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "22839:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22830:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22830:16:22"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "22823:3:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "22678:3:22",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "22683:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "22694:3:22",
                        "type": ""
                      }
                    ],
                    "src": "22565:287:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23031:165:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23048:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23059:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23041:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23041:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23041:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23082:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23093:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23078:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23078:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23098:2:22",
                                "type": "",
                                "value": "15"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23071:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23071:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23071:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23121:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23132:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23117:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23117:18:22"
                              },
                              {
                                "hexValue": "656e63727970743a206661696c6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "23137:17:22",
                                "type": "",
                                "value": "encrypt: failed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23110:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23110:45:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23110:45:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23164:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23176:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23187:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23172:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23172:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23164:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_5614603d541e467d6f35299b6c494d6d7c96318fd9033e95f551373c3052a781__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23008:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23022:4:22",
                        "type": ""
                      }
                    ],
                    "src": "22857:339:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23265:378:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23314:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23323:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23326:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "23316:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23316:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "23316:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "23293:6:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "23301:4:22",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "23289:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23289:17:22"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "23308:3:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "23285:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23285:27:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "23278:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23278:35:22"
                          },
                          "nodeType": "YulIf",
                          "src": "23275:55:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23339:23:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "23355:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "23349:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23349:13:22"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "23343:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23371:63:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "23430:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_bytes",
                                  "nodeType": "YulIdentifier",
                                  "src": "23402:27:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23402:31:22"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "23386:15:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23386:48:22"
                          },
                          "variables": [
                            {
                              "name": "array_1",
                              "nodeType": "YulTypedName",
                              "src": "23375:7:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array_1",
                                "nodeType": "YulIdentifier",
                                "src": "23450:7:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "23459:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23443:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23443:19:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23443:19:22"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23510:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23519:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23522:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "23512:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23512:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "23512:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "23485:6:22"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "23493:2:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "23481:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23481:15:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23498:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23477:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23477:26:22"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "23505:3:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "23474:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23474:35:22"
                          },
                          "nodeType": "YulIf",
                          "src": "23471:55:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "23574:6:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23582:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23570:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23570:17:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "array_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "23593:7:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23602:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23589:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23589:18:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "23609:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nodeType": "YulIdentifier",
                              "src": "23535:34:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23535:77:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23535:77:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23621:16:22",
                          "value": {
                            "name": "array_1",
                            "nodeType": "YulIdentifier",
                            "src": "23630:7:22"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "23621:5:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_string_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "23239:6:22",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "23247:3:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "23255:5:22",
                        "type": ""
                      }
                    ],
                    "src": "23201:442:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23708:78:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "23718:22:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "23733:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "23727:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23727:13:22"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "23718:5:22"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "23774:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "23749:24:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23749:31:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23749:31:22"
                        }
                      ]
                    },
                    "name": "abi_decode_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "23687:6:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "23698:5:22",
                        "type": ""
                      }
                    ],
                    "src": "23648:138:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23865:877:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "23914:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23923:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "23926:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "23916:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "23916:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "23916:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "23893:6:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "23901:4:22",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "23889:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "23889:17:22"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "23908:3:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "23885:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23885:27:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "23878:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23878:35:22"
                          },
                          "nodeType": "YulIf",
                          "src": "23875:55:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23939:23:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "23955:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "23949:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23949:13:22"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "23943:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23971:14:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "23981:4:22",
                            "type": "",
                            "value": "0x20"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "23975:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "23994:28:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24004:18:22",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "23998:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "24045:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "24047:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "24047:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "24047:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "24037:2:22"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "24041:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "24034:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24034:10:22"
                          },
                          "nodeType": "YulIf",
                          "src": "24031:36:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "24076:20:22",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24090:1:22",
                                "type": "",
                                "value": "5"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "24093:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "24086:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24086:10:22"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "24080:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "24105:39:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "24136:2:22"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "24140:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24132:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24132:11:22"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "24116:15:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24116:28:22"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "24109:3:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "24153:16:22",
                          "value": {
                            "name": "dst",
                            "nodeType": "YulIdentifier",
                            "src": "24166:3:22"
                          },
                          "variables": [
                            {
                              "name": "dst_1",
                              "nodeType": "YulTypedName",
                              "src": "24157:5:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "24185:3:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "24190:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24178:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24178:15:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24178:15:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24202:19:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "24213:3:22"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "24218:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24209:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24209:12:22"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "24202:3:22"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "24230:38:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "24252:6:22"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "24260:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24248:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24248:15:22"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "24265:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24244:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24244:24:22"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "24234:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "24296:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "24305:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "24308:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "24298:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "24298:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "24298:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "24283:6:22"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "24291:3:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "24280:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24280:15:22"
                          },
                          "nodeType": "YulIf",
                          "src": "24277:35:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "24321:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "24336:6:22"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "24344:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24332:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24332:15:22"
                          },
                          "variables": [
                            {
                              "name": "src",
                              "nodeType": "YulTypedName",
                              "src": "24325:3:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "24412:301:22",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "24426:29:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "24451:3:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "24445:5:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "24445:10:22"
                                },
                                "variables": [
                                  {
                                    "name": "innerOffset",
                                    "nodeType": "YulTypedName",
                                    "src": "24430:11:22",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "24503:74:22",
                                  "statements": [
                                    {
                                      "nodeType": "YulVariableDeclaration",
                                      "src": "24521:11:22",
                                      "value": {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "24531:1:22",
                                        "type": "",
                                        "value": "0"
                                      },
                                      "variables": [
                                        {
                                          "name": "_5",
                                          "nodeType": "YulTypedName",
                                          "src": "24525:2:22",
                                          "type": ""
                                        }
                                      ]
                                    },
                                    {
                                      "expression": {
                                        "arguments": [
                                          {
                                            "name": "_5",
                                            "nodeType": "YulIdentifier",
                                            "src": "24556:2:22"
                                          },
                                          {
                                            "name": "_5",
                                            "nodeType": "YulIdentifier",
                                            "src": "24560:2:22"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "revert",
                                          "nodeType": "YulIdentifier",
                                          "src": "24549:6:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "24549:14:22"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "24549:14:22"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "innerOffset",
                                      "nodeType": "YulIdentifier",
                                      "src": "24474:11:22"
                                    },
                                    {
                                      "name": "_3",
                                      "nodeType": "YulIdentifier",
                                      "src": "24487:2:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "24471:2:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "24471:19:22"
                                },
                                "nodeType": "YulIf",
                                "src": "24468:109:22"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "24597:3:22"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "offset",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "24639:6:22"
                                                },
                                                {
                                                  "name": "innerOffset",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "24647:11:22"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "24635:3:22"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "24635:24:22"
                                            },
                                            {
                                              "name": "_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "24661:2:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "24631:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "24631:33:22"
                                        },
                                        {
                                          "name": "end",
                                          "nodeType": "YulIdentifier",
                                          "src": "24666:3:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "abi_decode_string_fromMemory",
                                        "nodeType": "YulIdentifier",
                                        "src": "24602:28:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "24602:68:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "24590:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "24590:81:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "24590:81:22"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "24684:19:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "24695:3:22"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "24700:2:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "24691:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "24691:12:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "24684:3:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "24367:3:22"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "24372:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "24364:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24364:15:22"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "24380:23:22",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "24382:19:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "24393:3:22"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "24398:2:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "24389:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "24389:12:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "24382:3:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "24360:3:22",
                            "statements": []
                          },
                          "src": "24356:357:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24722:14:22",
                          "value": {
                            "name": "dst_1",
                            "nodeType": "YulIdentifier",
                            "src": "24731:5:22"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "24722:5:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_array_string_dyn_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "23839:6:22",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "23847:3:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "23855:5:22",
                        "type": ""
                      }
                    ],
                    "src": "23791:951:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24855:1003:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "24901:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "24910:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "24913:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "24903:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "24903:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "24903:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "24876:7:22"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24885:9:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "24872:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24872:23:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24897:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "24868:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24868:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "24865:52:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "24926:30:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24946:9:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "24940:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24940:16:22"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "24930:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "24965:28:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "24975:18:22",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "24969:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "25020:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "25029:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "25032:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "25022:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "25022:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "25022:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "25008:6:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "25016:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "25005:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25005:14:22"
                          },
                          "nodeType": "YulIf",
                          "src": "25002:34:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "25045:32:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25059:9:22"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "25070:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25055:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25055:22:22"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "25049:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "25117:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "25126:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "25129:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "25119:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "25119:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "25119:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "25097:7:22"
                                  },
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "25106:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "25093:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25093:16:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25111:4:22",
                                "type": "",
                                "value": "0xa0"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "25089:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25089:27:22"
                          },
                          "nodeType": "YulIf",
                          "src": "25086:47:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "25142:35:22",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "allocate_memory_4036",
                              "nodeType": "YulIdentifier",
                              "src": "25155:20:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25155:22:22"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "25146:5:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "25186:25:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "25208:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "25202:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25202:9:22"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "25190:8:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "25240:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "25249:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "25252:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "25242:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "25242:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "25242:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "25226:8:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "25236:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "25223:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25223:16:22"
                          },
                          "nodeType": "YulIf",
                          "src": "25220:36:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "25272:5:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "25312:2:22"
                                      },
                                      {
                                        "name": "offset_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "25316:8:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "25308:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25308:17:22"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "25327:7:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_string_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "25279:28:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25279:56:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25265:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25265:71:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25265:71:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "25356:5:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25363:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25352:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25352:14:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "25402:2:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "25406:2:22",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "25398:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25398:11:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "25368:29:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25368:42:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25345:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25345:66:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25345:66:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "25431:5:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25438:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25427:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25427:14:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "25453:2:22"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "25457:2:22",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "25449:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25449:11:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "25443:5:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25443:18:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25420:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25420:42:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25420:42:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "25471:34:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "25497:2:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25501:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25493:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25493:11:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "25487:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25487:18:22"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "25475:8:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "25534:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "25543:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "25546:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "25536:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "25536:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "25536:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "25520:8:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "25530:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "25517:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25517:16:22"
                          },
                          "nodeType": "YulIf",
                          "src": "25514:36:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "25570:5:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25577:2:22",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25566:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25566:14:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "25615:2:22"
                                      },
                                      {
                                        "name": "offset_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "25619:8:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "25611:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25611:17:22"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "25630:7:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_string_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "25582:28:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25582:56:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25559:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25559:80:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25559:80:22"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "25648:35:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "25674:2:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25678:3:22",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25670:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25670:12:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "25664:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25664:19:22"
                          },
                          "variables": [
                            {
                              "name": "offset_3",
                              "nodeType": "YulTypedName",
                              "src": "25652:8:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "25712:16:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "25721:1:22",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "25724:1:22",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "25714:6:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "25714:12:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "25714:12:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_3",
                                "nodeType": "YulIdentifier",
                                "src": "25698:8:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "25708:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "25695:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25695:16:22"
                          },
                          "nodeType": "YulIf",
                          "src": "25692:36:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "25748:5:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25755:3:22",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25744:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25744:15:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "25804:2:22"
                                      },
                                      {
                                        "name": "offset_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "25808:8:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "25800:3:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "25800:17:22"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "25819:7:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_array_string_dyn_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "25761:38:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25761:66:22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25737:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25737:91:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25737:91:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25837:15:22",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "25847:5:22"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "25837:6:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_AuthToken_$2430_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24821:9:22",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "24832:7:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "24844:6:22",
                        "type": ""
                      }
                    ],
                    "src": "24747:1111:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25909:74:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "25932:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "25934:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "25934:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "25934:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "25929:1:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "25922:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25922:9:22"
                          },
                          "nodeType": "YulIf",
                          "src": "25919:35:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "25963:14:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "25972:1:22"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "25975:1:22"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "25968:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25968:9:22"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "25963:1:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "25894:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "25897:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "25903:1:22",
                        "type": ""
                      }
                    ],
                    "src": "25863:120:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26040:116:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "26050:20:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "26065:1:22"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "26068:1:22"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "26061:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26061:9:22"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "26050:7:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26128:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "26130:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26130:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26130:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "26099:1:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "26092:6:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "26092:9:22"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "y",
                                        "nodeType": "YulIdentifier",
                                        "src": "26106:1:22"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "name": "product",
                                            "nodeType": "YulIdentifier",
                                            "src": "26113:7:22"
                                          },
                                          {
                                            "name": "x",
                                            "nodeType": "YulIdentifier",
                                            "src": "26122:1:22"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "div",
                                          "nodeType": "YulIdentifier",
                                          "src": "26109:3:22"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "26109:15:22"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "eq",
                                      "nodeType": "YulIdentifier",
                                      "src": "26103:2:22"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "26103:22:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "or",
                                  "nodeType": "YulIdentifier",
                                  "src": "26089:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26089:37:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "26082:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26082:45:22"
                          },
                          "nodeType": "YulIf",
                          "src": "26079:71:22"
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "26019:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "26022:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "26028:7:22",
                        "type": ""
                      }
                    ],
                    "src": "25988:168:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26211:175:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26221:50:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "26248:1:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26251:4:22",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "26244:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26244:12:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "26262:1:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26265:4:22",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "26258:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26258:12:22"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "26240:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26240:31:22"
                          },
                          "variables": [
                            {
                              "name": "product_raw",
                              "nodeType": "YulTypedName",
                              "src": "26225:11:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26280:33:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "product_raw",
                                "nodeType": "YulIdentifier",
                                "src": "26295:11:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26308:4:22",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "26291:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26291:22:22"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "26280:7:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26358:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "26360:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26360:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26360:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "product",
                                    "nodeType": "YulIdentifier",
                                    "src": "26335:7:22"
                                  },
                                  {
                                    "name": "product_raw",
                                    "nodeType": "YulIdentifier",
                                    "src": "26344:11:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "26332:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26332:24:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "26325:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26325:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "26322:58:22"
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "26190:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "26193:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "26199:7:22",
                        "type": ""
                      }
                    ],
                    "src": "26161:225:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26437:102:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "26447:38:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "26462:1:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26465:4:22",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "26458:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26458:12:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "26476:1:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26479:4:22",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "26472:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26472:12:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26454:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26454:31:22"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "26447:3:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26511:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "26513:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26513:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26513:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "sum",
                                "nodeType": "YulIdentifier",
                                "src": "26500:3:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26505:4:22",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "26497:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26497:13:22"
                          },
                          "nodeType": "YulIf",
                          "src": "26494:39:22"
                        }
                      ]
                    },
                    "name": "checked_add_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "26420:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "26423:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "26429:3:22",
                        "type": ""
                      }
                    ],
                    "src": "26391:148:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26638:281:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26648:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "26668:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "26662:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26662:12:22"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "26652:6:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26683:33:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "array",
                                    "nodeType": "YulIdentifier",
                                    "src": "26703:5:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "26710:4:22",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "26699:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26699:16:22"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "26693:5:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26693:23:22"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "26687:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "26725:41:22",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26739:26:22",
                                "type": "",
                                "value": "0xffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "26735:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26735:31:22"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "26729:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26775:20:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "26788:2:22"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "26792:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "26784:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26784:11:22"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "26775:5:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26830:83:22",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "26844:59:22",
                                "value": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "26861:2:22"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "26873:1:22",
                                                  "type": "",
                                                  "value": "3"
                                                },
                                                {
                                                  "arguments": [
                                                    {
                                                      "kind": "number",
                                                      "nodeType": "YulLiteral",
                                                      "src": "26880:2:22",
                                                      "type": "",
                                                      "value": "20"
                                                    },
                                                    {
                                                      "name": "length",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "26884:6:22"
                                                    }
                                                  ],
                                                  "functionName": {
                                                    "name": "sub",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "26876:3:22"
                                                  },
                                                  "nodeType": "YulFunctionCall",
                                                  "src": "26876:15:22"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "shl",
                                                "nodeType": "YulIdentifier",
                                                "src": "26869:3:22"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "26869:23:22"
                                            },
                                            {
                                              "name": "_2",
                                              "nodeType": "YulIdentifier",
                                              "src": "26894:2:22"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "shl",
                                            "nodeType": "YulIdentifier",
                                            "src": "26865:3:22"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "26865:32:22"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nodeType": "YulIdentifier",
                                        "src": "26857:3:22"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "26857:41:22"
                                    },
                                    {
                                      "name": "_2",
                                      "nodeType": "YulIdentifier",
                                      "src": "26900:2:22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "26853:3:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26853:50:22"
                                },
                                "variableNames": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "26844:5:22"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "26810:6:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26818:2:22",
                                "type": "",
                                "value": "20"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "26807:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26807:14:22"
                          },
                          "nodeType": "YulIf",
                          "src": "26804:109:22"
                        }
                      ]
                    },
                    "name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes20",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "26618:5:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "26628:5:22",
                        "type": ""
                      }
                    ],
                    "src": "26544:375:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26971:89:22",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26998:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "27000:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "27000:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "27000:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "26991:5:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "26984:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26984:13:22"
                          },
                          "nodeType": "YulIf",
                          "src": "26981:39:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27029:25:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "27040:5:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27051:1:22",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "27047:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27047:6:22"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27036:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27036:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "27029:3:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "decrement_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "26953:5:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "26963:3:22",
                        "type": ""
                      }
                    ],
                    "src": "26924:136:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27111:151:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "27121:16:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27131:6:22",
                            "type": "",
                            "value": "0xffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "27125:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "27146:29:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "27165:5:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "27172:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "27161:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27161:14:22"
                          },
                          "variables": [
                            {
                              "name": "value_1",
                              "nodeType": "YulTypedName",
                              "src": "27150:7:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "27203:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "27205:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "27205:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "27205:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "27190:7:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "27199:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "27187:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27187:15:22"
                          },
                          "nodeType": "YulIf",
                          "src": "27184:41:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27234:22:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "value_1",
                                "nodeType": "YulIdentifier",
                                "src": "27245:7:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27254:1:22",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27241:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27241:15:22"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "27234:3:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint16",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "27093:5:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "27103:3:22",
                        "type": ""
                      }
                    ],
                    "src": "27065:197:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27315:123:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "27325:16:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27335:6:22",
                            "type": "",
                            "value": "0xffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "27329:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27350:35:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "27366:1:22"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27369:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "27362:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27362:10:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "27378:1:22"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27381:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "27374:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27374:10:22"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "27358:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27358:27:22"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "27350:4:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "27410:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "27412:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "27412:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "27412:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "27400:4:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "27406:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "27397:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27397:12:22"
                          },
                          "nodeType": "YulIf",
                          "src": "27394:38:22"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint16",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "27297:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "27300:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "27306:4:22",
                        "type": ""
                      }
                    ],
                    "src": "27267:171:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27494:198:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "27504:20:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27514:10:22",
                            "type": "",
                            "value": "0xffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "27508:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "27533:46:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "27560:1:22"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27563:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "27556:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27556:10:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "27572:1:22"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27575:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "27568:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27568:10:22"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "27552:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27552:27:22"
                          },
                          "variables": [
                            {
                              "name": "product_raw",
                              "nodeType": "YulTypedName",
                              "src": "27537:11:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27588:31:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "product_raw",
                                "nodeType": "YulIdentifier",
                                "src": "27603:11:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "27616:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "27599:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27599:20:22"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "27588:7:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "27664:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "27666:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "27666:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "27666:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "product",
                                    "nodeType": "YulIdentifier",
                                    "src": "27641:7:22"
                                  },
                                  {
                                    "name": "product_raw",
                                    "nodeType": "YulIdentifier",
                                    "src": "27650:11:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "27638:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27638:24:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "27631:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27631:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "27628:58:22"
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "27473:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "27476:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "27482:7:22",
                        "type": ""
                      }
                    ],
                    "src": "27443:249:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27744:104:22",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "27754:39:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "27770:1:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27773:4:22",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "27766:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27766:12:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "27784:1:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27787:4:22",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "27780:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27780:12:22"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "27762:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27762:31:22"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "27754:4:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "27820:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "27822:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "27822:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "27822:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nodeType": "YulIdentifier",
                                "src": "27808:4:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27814:4:22",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "27805:2:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27805:14:22"
                          },
                          "nodeType": "YulIf",
                          "src": "27802:40:22"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "27726:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "27729:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "27735:4:22",
                        "type": ""
                      }
                    ],
                    "src": "27697:151:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27904:194:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "27914:16:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "27924:6:22",
                            "type": "",
                            "value": "0xffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "27918:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "27939:46:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "27966:1:22"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27969:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "27962:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27962:10:22"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "27978:1:22"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "27981:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "27974:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27974:10:22"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "27958:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27958:27:22"
                          },
                          "variables": [
                            {
                              "name": "product_raw",
                              "nodeType": "YulTypedName",
                              "src": "27943:11:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27994:31:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "product_raw",
                                "nodeType": "YulIdentifier",
                                "src": "28009:11:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "28022:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "28005:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28005:20:22"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "27994:7:22"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "28070:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "28072:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "28072:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "28072:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "product",
                                    "nodeType": "YulIdentifier",
                                    "src": "28047:7:22"
                                  },
                                  {
                                    "name": "product_raw",
                                    "nodeType": "YulIdentifier",
                                    "src": "28056:11:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "28044:2:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28044:24:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "28037:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28037:32:22"
                          },
                          "nodeType": "YulIf",
                          "src": "28034:58:22"
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint16",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "27883:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "27886:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "27892:7:22",
                        "type": ""
                      }
                    ],
                    "src": "27853:245:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28277:165:22",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28294:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28305:2:22",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28287:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28287:21:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28287:21:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28328:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28339:2:22",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28324:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28324:18:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28344:2:22",
                                "type": "",
                                "value": "15"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28317:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28317:30:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28317:30:22"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "28367:9:22"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "28378:2:22",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "28363:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28363:18:22"
                              },
                              {
                                "hexValue": "646563727970743a206661696c6564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "28383:17:22",
                                "type": "",
                                "value": "decrypt: failed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "28356:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28356:45:22"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28356:45:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28410:26:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "28422:9:22"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28433:2:22",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28418:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28418:18:22"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "28410:4:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_903e0471dcbfc795d05065e8a540355c389c64753c3dd674c3f3e786b2d3807c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "28254:9:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "28268:4:22",
                        "type": ""
                      }
                    ],
                    "src": "28103:339:22"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28484:142:22",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "28494:16:22",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "28504:6:22",
                            "type": "",
                            "value": "0xffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "28498:2:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "28519:21:22",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "28534:1:22"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "28537:2:22"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "28530:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28530:10:22"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "28523:3:22",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "28564:22:22",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "28566:16:22"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "28566:18:22"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "28566:18:22"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "28559:3:22"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "28552:6:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28552:11:22"
                          },
                          "nodeType": "YulIf",
                          "src": "28549:37:22"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28595:25:22",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "28608:1:22"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "28611:2:22"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "28604:3:22"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "28604:10:22"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "28616:3:22"
                              }
                            ],
                            "functionName": {
                              "name": "mod",
                              "nodeType": "YulIdentifier",
                              "src": "28600:3:22"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28600:20:22"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "28595:1:22"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mod_t_uint16",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "28469:1:22",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "28472:1:22",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "28478:1:22",
                        "type": ""
                      }
                    ],
                    "src": "28447:179:22"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_array$_t_struct$_ChatMessage_$9678_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_ChatMessage_$9678_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let tail_2 := add(add(headStart, shl(5, length)), _2)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_2, headStart), not(63)))\n            let _3 := mload(srcPtr)\n            let _4 := 0x80\n            let memberValue0 := mload(_3)\n            mstore(tail_2, _4)\n            let tail_3 := abi_encode_bytes(memberValue0, add(tail_2, _4))\n            let memberValue0_1 := mload(add(_3, _1))\n            mstore(add(tail_2, _1), sub(tail_3, tail_2))\n            let tail_4 := abi_encode_bytes(memberValue0_1, tail_3)\n            mstore(add(tail_2, _2), mload(add(_3, _2)))\n            let _5 := 0x60\n            mstore(add(tail_2, _5), mload(add(_3, _5)))\n            tail_2 := tail_4\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_2\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function allocate_memory_4036() -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, 0xa0)\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function allocate_memory(size) -> memPtr\n    {\n        memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n    function array_allocation_size_bytes(length) -> size\n    {\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        size := add(and(add(length, 31), not(31)), 0x20)\n    }\n    function abi_decode_bytes(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        calldatacopy(add(array_1, 0x20), add(offset, 0x20), _1)\n        mstore(add(add(array_1, _1), 0x20), 0)\n        array := array_1\n    }\n    function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_array$_t_bytes32_$dyn_memory_ptr__to_t_array$_t_bytes32_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_bytes_memory_ptr_t_uint256_t_uint256__to_t_bytes_memory_ptr_t_bytes_memory_ptr_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 128)\n        let tail_1 := abi_encode_bytes(value0, add(headStart, 128))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_bytes(value1, tail_1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes_memory_ptr_t_uint256_t_uint256__to_t_bytes32_t_bytes_memory_ptr_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 128)\n        tail := abi_encode_bytes(value1, add(headStart, 128))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_string_calldata_ptrt_struct$_SignatureRSV_$250_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        let _1 := sub(dataEnd, headStart)\n        if slt(_1, 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        if slt(add(_1, not(31)), 96) { revert(0, 0) }\n        value2 := add(headStart, 32)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_calldata_ptrt_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value3 := abi_decode_bytes(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_tuple_t_bytes32t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value1 := abi_decode_bytes(add(headStart, offset), dataEnd)\n    }\n    function abi_encode_tuple_t_struct$_ChatSummary_$9687_memory_ptr__to_t_struct$_ChatSummary_$9687_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), mload(value0))\n        let memberValue0 := mload(add(value0, 32))\n        mstore(add(headStart, 64), 0x80)\n        let tail_1 := abi_encode_bytes(memberValue0, add(headStart, 160))\n        mstore(add(headStart, 96), mload(add(value0, 64)))\n        mstore(add(headStart, 0x80), mload(add(value0, 96)))\n        tail := tail_1\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256_t_bool_t_uint256__to_t_bytes32_t_uint256_t_uint256_t_bool_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), iszero(iszero(value3)))\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_struct$_ChatSession_$9669_memory_ptr__to_t_struct$_ChatSession_$9669_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, mload(value0))\n        mstore(add(headStart, 0x20), mload(add(value0, 0x20)))\n        mstore(add(headStart, 0x40), mload(add(value0, 0x40)))\n        mstore(add(headStart, 0x60), iszero(iszero(mload(add(value0, 0x60)))))\n        mstore(add(headStart, 0x80), mload(add(value0, 0x80)))\n    }\n    function abi_encode_tuple_t_stringliteral_1b66197486f9dea70286f19d4796d61200b37418a2b5efcb2cce46cc727c84b8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Session not found\")\n        tail := add(headStart, 96)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_e0e5889a2fbe7e35307fbd9d22e70cdfcd4e151ef85cecb5e8062e51b2d2ec2a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Session is closed\")\n        tail := add(headStart, 96)\n    }\n    function array_dataslot_bytes_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_bytes_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_bytes_memory_ptr_to_t_bytes_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_bytes_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_bytes_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_c0079c4aac0fe11a16d41c79fa5fe321c6273ce75f0a1b2bcf70ebd0dcd76d28__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Session already closed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7be940dd03837bee181e8c67faa08642c7a9eb2e139954242cb43d55a98c2ea9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Invalid TEE contract address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4_t_string_memory_ptr_t_string_calldata_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, 0x19457468657265756d205369676e6564204d6573736167653a0a000000000000)\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), add(pos, 26), length)\n        let _1 := add(pos, length)\n        calldatacopy(add(_1, 26), value1, value2)\n        let _2 := add(add(_1, value2), 26)\n        mstore(_2, 0)\n        end := _2\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_packed_t_bytes_storage_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := extract_byte_array_length(slotValue)\n        let _1 := 1\n        switch and(slotValue, _1)\n        case 0 {\n            mstore(pos, and(slotValue, not(255)))\n            ret := add(pos, mul(length, iszero(iszero(length))))\n        }\n        case 1 {\n            mstore(0, value0)\n            let _2 := 0x20\n            let dataPos := keccak256(0, _2)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _2) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(pos, length)\n        }\n        end := ret\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_struct$_AuthToken_$2430_memory_ptr__to_t_struct$_AuthToken_$2430_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let memberValue0 := mload(value0)\n        mstore(add(headStart, _1), 0xa0)\n        let tail_1 := abi_encode_bytes(memberValue0, add(headStart, 192))\n        mstore(add(headStart, 64), and(mload(add(value0, _1)), sub(shl(160, 1), 1)))\n        mstore(add(headStart, 96), mload(add(value0, 64)))\n        let memberValue0_1 := mload(add(value0, 96))\n        let _2 := not(31)\n        mstore(add(headStart, 128), add(sub(tail_1, headStart), _2))\n        let tail_2 := abi_encode_bytes(memberValue0_1, tail_1)\n        let memberValue0_2 := mload(add(value0, 128))\n        mstore(add(headStart, 0xa0), add(sub(tail_2, headStart), _2))\n        let pos := tail_2\n        let length := mload(memberValue0_2)\n        mstore(tail_2, length)\n        pos := add(tail_2, _1)\n        let tail_3 := add(add(tail_2, shl(5, length)), _1)\n        let srcPtr := add(memberValue0_2, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, add(sub(tail_3, tail_2), _2))\n            tail_3 := abi_encode_bytes(mload(srcPtr), tail_3)\n            srcPtr := add(srcPtr, _1)\n            pos := add(pos, _1)\n        }\n        tail := tail_3\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), not(0xffffffffffffffffffffffff)))\n        mstore(add(pos, 20), value1)\n        mstore(add(pos, 52), value2)\n        end := add(pos, 84)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_d3814fd4e72cfd7651525eee846049aca388165c613a1085fb56751abcdd36c0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Already initialized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1f57e86588d4056fbc66a1ccbde1e5364452891f7334f70d5376cb310a8a3993__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Invalid user address\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes_memory_ptr_t_bytes_memory_ptr__to_t_bytes32_t_bytes32_t_bytes_memory_ptr_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 128)\n        let tail_1 := abi_encode_bytes(value2, add(headStart, 128))\n        mstore(add(headStart, 96), sub(tail_1, headStart))\n        tail := abi_encode_bytes(value3, tail_1)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_5614603d541e467d6f35299b6c494d6d7c96318fd9033e95f551373c3052a781__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"encrypt: failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let array_1 := allocate_memory(array_allocation_size_bytes(_1))\n        mstore(array_1, _1)\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(offset, 0x20), add(array_1, 0x20), _1)\n        array := array_1\n    }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        validator_revert_address(value)\n    }\n    function abi_decode_array_string_dyn_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := 0x20\n        let _3 := 0xffffffffffffffff\n        if gt(_1, _3) { panic_error_0x41() }\n        let _4 := shl(5, _1)\n        let dst := allocate_memory(add(_4, _2))\n        let dst_1 := dst\n        mstore(dst, _1)\n        dst := add(dst, _2)\n        let srcEnd := add(add(offset, _4), _2)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, _2)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            let innerOffset := mload(src)\n            if gt(innerOffset, _3)\n            {\n                let _5 := 0\n                revert(_5, _5)\n            }\n            mstore(dst, abi_decode_string_fromMemory(add(add(offset, innerOffset), _2), end))\n            dst := add(dst, _2)\n        }\n        array := dst_1\n    }\n    function abi_decode_tuple_t_struct$_AuthToken_$2430_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 0xa0) { revert(0, 0) }\n        let value := allocate_memory_4036()\n        let offset_1 := mload(_2)\n        if gt(offset_1, _1) { revert(0, 0) }\n        mstore(value, abi_decode_string_fromMemory(add(_2, offset_1), dataEnd))\n        mstore(add(value, 32), abi_decode_address_fromMemory(add(_2, 32)))\n        mstore(add(value, 64), mload(add(_2, 64)))\n        let offset_2 := mload(add(_2, 96))\n        if gt(offset_2, _1) { revert(0, 0) }\n        mstore(add(value, 96), abi_decode_string_fromMemory(add(_2, offset_2), dataEnd))\n        let offset_3 := mload(add(_2, 128))\n        if gt(offset_3, _1) { revert(0, 0) }\n        mstore(add(value, 128), abi_decode_array_string_dyn_fromMemory(add(_2, offset_3), dataEnd))\n        value0 := value\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint8(x, y) -> product\n    {\n        let product_raw := mul(and(x, 0xff), and(y, 0xff))\n        product := and(product_raw, 0xff)\n        if iszero(eq(product, product_raw)) { panic_error_0x11() }\n    }\n    function checked_add_t_uint8(x, y) -> sum\n    {\n        sum := add(and(x, 0xff), and(y, 0xff))\n        if gt(sum, 0xff) { panic_error_0x11() }\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes20(array) -> value\n    {\n        let length := mload(array)\n        let _1 := mload(add(array, 0x20))\n        let _2 := not(0xffffffffffffffffffffffff)\n        value := and(_1, _2)\n        if lt(length, 20)\n        {\n            value := and(and(_1, shl(shl(3, sub(20, length)), _2)), _2)\n        }\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function increment_t_uint16(value) -> ret\n    {\n        let _1 := 0xffff\n        let value_1 := and(value, _1)\n        if eq(value_1, _1) { panic_error_0x11() }\n        ret := add(value_1, 1)\n    }\n    function checked_sub_t_uint16(x, y) -> diff\n    {\n        let _1 := 0xffff\n        diff := sub(and(x, _1), and(y, _1))\n        if gt(diff, _1) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint32(x, y) -> product\n    {\n        let _1 := 0xffffffff\n        let product_raw := mul(and(x, _1), and(y, _1))\n        product := and(product_raw, _1)\n        if iszero(eq(product, product_raw)) { panic_error_0x11() }\n    }\n    function checked_sub_t_uint8(x, y) -> diff\n    {\n        diff := sub(and(x, 0xff), and(y, 0xff))\n        if gt(diff, 0xff) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint16(x, y) -> product\n    {\n        let _1 := 0xffff\n        let product_raw := mul(and(x, _1), and(y, _1))\n        product := and(product_raw, _1)\n        if iszero(eq(product, product_raw)) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_903e0471dcbfc795d05065e8a540355c389c64753c3dd674c3f3e786b2d3807c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"decrypt: failed\")\n        tail := add(headStart, 96)\n    }\n    function mod_t_uint16(x, y) -> r\n    {\n        let _1 := 0xffff\n        let y_1 := and(y, _1)\n        if iszero(y_1) { panic_error_0x12() }\n        r := mod(and(x, _1), y_1)\n    }\n}",
              "id": 22,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7F476B6F GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xB1F0F51A GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xCD6DC687 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xCD6DC687 EQ PUSH2 0x485 JUMPI DUP1 PUSH4 0xCF09E0D0 EQ PUSH2 0x498 JUMPI DUP1 PUSH4 0xDA45B383 EQ PUSH2 0x4A1 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB1F0F51A EQ PUSH2 0x3E0 JUMPI DUP1 PUSH4 0xB8216FD7 EQ PUSH2 0x3F3 JUMPI DUP1 PUSH4 0xC2FB26A6 EQ PUSH2 0x413 JUMPI DUP1 PUSH4 0xCA3BCC1F EQ PUSH2 0x41B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9A9D575F GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x9A9D575F EQ PUSH2 0x39F JUMPI DUP1 PUSH4 0x9E975D27 EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0xA0081805 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0xA6CE7478 EQ PUSH2 0x3CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7F476B6F EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0x89543AF4 EQ PUSH2 0x386 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x38E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x40D996E9 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x58DC3EB2 GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x58DC3EB2 EQ PUSH2 0x2F6 JUMPI DUP1 PUSH4 0x5D8D1585 EQ PUSH2 0x319 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0x73701FBE EQ PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x40D996E9 EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0x4F8632BA EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0x55C02F97 EQ PUSH2 0x2E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FE9EC2E GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x1FE9EC2E EQ PUSH2 0x230 JUMPI DUP1 PUSH4 0x2A9834B4 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0x392E53CD EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0x3ADE240B EQ PUSH2 0x282 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9C1BA2E EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x12DAA236 EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0x1F8A3B0C EQ PUSH2 0x210 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DD PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DD PUSH2 0x1FE CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x223 PUSH2 0x21E CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH2 0x50B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP2 SWAP1 PUSH2 0x344F JUMP JUMPDEST PUSH2 0x243 PUSH2 0x23E CALLDATASIZE PUSH1 0x4 PUSH2 0x3532 JUMP JUMPDEST PUSH2 0x754 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x258 PUSH2 0x253 CALLDATASIZE PUSH1 0x4 PUSH2 0x3696 JUMP JUMPDEST PUSH2 0x9DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP2 SWAP1 PUSH2 0x36D2 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x272 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E7 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x290 CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH2 0xAB0 JUMP JUMPDEST PUSH2 0x2A8 PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3716 JUMP JUMPDEST PUSH2 0xC17 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3738 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x2CB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E7 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x2F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH2 0xD74 JUMP JUMPDEST PUSH2 0x309 PUSH2 0x304 CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH2 0xDF8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3771 JUMP JUMPDEST PUSH2 0x321 PUSH2 0xE1A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP6 AND DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x1E7 JUMP JUMPDEST PUSH2 0x243 PUSH2 0xE92 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x361 CALLDATASIZE PUSH1 0x4 PUSH2 0x37B2 JUMP JUMPDEST PUSH2 0xEA6 JUMP JUMPDEST PUSH2 0x379 PUSH2 0x374 CALLDATASIZE PUSH1 0x4 PUSH2 0x37CF JUMP JUMPDEST PUSH2 0xF56 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP2 SWAP1 PUSH2 0x382D JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x1261 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2CB JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x2CB SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x1DD PUSH2 0x3C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH2 0x144E JUMP JUMPDEST PUSH2 0x258 PUSH2 0x146F JUMP JUMPDEST PUSH2 0x243 PUSH2 0x3DB CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH2 0x1638 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x3EE CALLDATASIZE PUSH1 0x4 PUSH2 0x3840 JUMP JUMPDEST PUSH2 0x1814 JUMP JUMPDEST PUSH2 0x406 PUSH2 0x401 CALLDATASIZE PUSH1 0x4 PUSH2 0x38B2 JUMP JUMPDEST PUSH2 0x19D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP2 SWAP1 PUSH2 0x38F8 JUMP JUMPDEST PUSH2 0x379 PUSH2 0x1BA2 JUMP JUMPDEST PUSH2 0x45B PUSH2 0x429 CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xFF AND SWAP1 DUP6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH2 0x1E7 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x493 CALLDATASIZE PUSH1 0x4 PUSH2 0x393E JUMP JUMPDEST PUSH2 0x1C34 JUMP JUMPDEST PUSH2 0x1DD PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x4B4 PUSH2 0x4AF CALLDATASIZE PUSH1 0x4 PUSH2 0x33E6 JUMP JUMPDEST PUSH2 0x1D3E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E7 SWAP2 SWAP1 PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD ISZERO ISZERO PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x243 PUSH2 0x506 CALLDATASIZE PUSH1 0x4 PUSH2 0x37B2 JUMP JUMPDEST PUSH2 0x1E5B JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x539 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x55C JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP1 PUSH2 0x57B JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SUB PUSH2 0x5B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP1 PUSH2 0x396A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP3 MLOAD DUP2 DUP6 MUL DUP2 ADD DUP6 ADD SWAP1 SWAP4 MSTORE DUP1 DUP4 MSTORE SWAP2 SWAP4 SWAP1 SWAP3 DUP5 ADD JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 0x747 JUMPI DUP4 DUP3 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD DUP1 SLOAD PUSH2 0x610 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x63C SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x689 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x65E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x689 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x66C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x6A2 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6CE SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x71B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6F0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x71B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6FE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE POP POP DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x5DD JUMP JUMPDEST POP POP POP POP SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x77F JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x7A2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 DUP1 PUSH2 0x7C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SUB PUSH2 0x7F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP1 PUSH2 0x396A JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH2 0x846 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x14D95CDCDA5BDB881A5CC818DB1BDCD959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD DUP2 MLOAD PUSH1 0xA0 PUSH1 0x1F DUP11 ADD DUP6 SWAP1 DIV SWAP1 SWAP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP3 ADD DUP9 DUP2 MSTORE SWAP1 SWAP4 SWAP3 DUP3 SWAP2 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP2 SWAP1 DUP6 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP POP SWAP1 DUP3 MSTORE POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F DUP10 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP8 DUP2 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 DUP6 MSTORE POP POP TIMESTAMP PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP4 DUP5 ADD DUP8 SWAP1 MSTORE DUP13 DUP4 MSTORE PUSH1 0x9 DUP2 MSTORE SWAP3 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 DUP4 MSTORE SWAP3 SWAP1 SWAP2 KECCAK256 DUP4 MLOAD SWAP4 SWAP5 POP DUP5 SWAP4 PUSH1 0x4 SWAP1 SWAP4 MUL ADD SWAP2 DUP3 SWAP2 POP PUSH2 0x916 SWAP1 DUP3 PUSH2 0x3A18 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP3 ADD SWAP1 PUSH2 0x92B SWAP1 DUP3 PUSH2 0x3A18 JUMP JUMPDEST POP PUSH1 0x40 DUP3 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 SWAP1 SWAP3 ADD MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD SWAP2 PUSH2 0x95C DUP4 PUSH2 0x3AED JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 TIMESTAMP PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x4 ADD DUP1 SLOAD SWAP2 PUSH2 0x984 DUP4 PUSH2 0x3AED JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x4 SLOAD PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP3 ADD MSTORE DUP11 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH32 0x32C5FF7B08C2D334CE876E7C5137698ED9CBDA5EF37AA9A3BA3B3455B85BB08D SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x60 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0xA16 JUMPI POP PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xA0A DUP3 PUSH2 0x1E99 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xA34 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0xA57 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xAA3 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xA8F JUMPI JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xADB JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0xAFE JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH2 0xB1D JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SUB PUSH2 0xB4D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP1 PUSH2 0x396A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x3 ADD SLOAD PUSH1 0xFF AND PUSH2 0xBA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x14D95CDCDA5BDB88185B1C9958591E4818DB1BDCD959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE TIMESTAMP PUSH1 0x2 SWAP1 SWAP2 ADD DUP2 SWAP1 SSTORE PUSH1 0x4 SLOAD SWAP2 MLOAD DUP5 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH32 0x6F3CA9E92D5454D42942B753C6B4666C2803BBCD56271D7431F2FA0D58AF15A5 SWAP2 PUSH2 0xC0B SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xC33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x0 SWAP2 POP SWAP2 POP POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0xC57 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xC83 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xCD0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xCA5 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xCD0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xCB3 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0xCE5 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xD11 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xD5E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xD33 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xD5E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xD41 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 POP DUP5 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xDA2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0xDC5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP1 PUSH2 0xDE4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD DUP1 SLOAD SWAP2 SWAP3 SWAP2 PUSH2 0xCE5 SWAP1 PUSH2 0x3995 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xE4E JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0xE71 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x6 SLOAD PUSH1 0xC SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0xE9A PUSH2 0x1EFF JUMP JUMPDEST PUSH2 0xEA4 PUSH1 0x0 PUSH2 0x1F2C JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xEAE PUSH2 0x1EFF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xF04 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642054454520636F6E7472616374206164647265737300000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x38D1ABD3B3B297938CDC6E7FBD809A8FBBA7EA6DCFA546BE3832C04D9F39D8CF SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF60 PUSH2 0x3278 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF6B DUP6 PUSH2 0x1F7C JUMP JUMPDEST DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xF7F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3B06 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 DUP1 DUP7 MSTORE DUP6 DUP4 ADD DUP1 DUP7 MSTORE SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xFF DUP10 DUP6 ADD CALLDATALOAD AND SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP8 CALLDATALOAD PUSH1 0x60 DUP6 ADD MSTORE DUP8 ADD CALLDATALOAD PUSH1 0x80 DUP5 ADD MSTORE SWAP3 POP SWAP1 PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFF1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x20 DUP7 ADD MSTORE SWAP2 POP PUSH1 0x0 SWAP1 POP PUSH2 0x101A DUP9 DUP9 PUSH2 0x200E JUMP JUMPDEST SWAP1 POP CHAINID DUP2 PUSH1 0xA0 ADD MLOAD EQ PUSH2 0x1040 JUMPI PUSH1 0x40 MLOAD PUSH4 0x362C8337 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x40 MLOAD PUSH2 0x104F SWAP2 SWAP1 PUSH2 0x3B5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 PUSH1 0x0 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x1081 JUMPI PUSH1 0x40 MLOAD PUSH4 0x283D62BD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP5 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ PUSH2 0x10B5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5CC02E1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x120 DUP2 ADD MLOAD MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0x10D7 JUMPI POP PUSH2 0x10D3 DUP2 PUSH2 0x120 ADD MLOAD PUSH2 0x2477 JUMP JUMPDEST TIMESTAMP GT ISZERO JUMPDEST ISZERO PUSH2 0x10F5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x299D02F1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x100 DUP2 ADD MLOAD MLOAD ISZERO PUSH2 0x111C JUMPI PUSH1 0x0 PUSH2 0x1111 DUP3 PUSH2 0x100 ADD MLOAD PUSH2 0x2477 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MSTORE POP PUSH2 0x112F JUMP JUMPDEST PUSH2 0x1129 PUSH3 0x15180 TIMESTAMP PUSH2 0x3BD0 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE JUMPDEST DUP4 PUSH1 0x40 ADD MLOAD TIMESTAMP LT PUSH2 0x1153 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB171155 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x160 DUP2 ADD MLOAD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x117B JUMPI PUSH2 0x117B PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x11AE JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1199 JUMPI SWAP1 POP JUMPDEST POP PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 PUSH2 0x160 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x1218 JUMPI DUP2 PUSH2 0x160 ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x11DC JUMPI PUSH2 0x11DC PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x80 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11FA JUMPI PUSH2 0x11FA PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x1210 SWAP1 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x11B7 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1254 PUSH1 0x3 SLOAD PUSH1 0x0 DUP1 SHL DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1236 SWAP2 SWAP1 PUSH2 0x3BF9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP3 MSTORE SWAP1 PUSH2 0x24E6 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x128F JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x12B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC SLOAD PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x54 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x74 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD ISZERO PUSH2 0x136A JUMPI DUP2 PUSH2 0x131D DUP2 PUSH2 0x3AED JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0x20 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x54 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP4 POP PUSH1 0x74 ADD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x12FC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE TIMESTAMP PUSH1 0x20 DUP1 DUP4 ADD DUP3 DUP2 MSTORE DUP4 DUP6 ADD DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x60 DUP7 ADD DUP2 DUP2 MSTORE PUSH1 0x0 PUSH1 0x80 DUP9 ADD DUP2 DUP2 MSTORE DUP11 DUP3 MSTORE PUSH1 0x8 DUP8 MSTORE DUP10 DUP3 KECCAK256 DUP10 MLOAD DUP2 SSTORE SWAP6 MLOAD DUP7 DUP6 ADD SSTORE SWAP4 MLOAD PUSH1 0x2 DUP7 ADD SSTORE SWAP1 MLOAD PUSH1 0x3 DUP6 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP2 MLOAD PUSH1 0x4 SWAP4 DUP5 ADD SSTORE PUSH1 0xC DUP1 SLOAD SWAP2 DUP3 ADD SWAP1 SSTORE PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 ADD DUP8 SWAP1 SSTORE PUSH1 0xB DUP4 MSTORE DUP6 DUP2 KECCAK256 SSTORE SLOAD SWAP4 MLOAD SWAP2 DUP3 MSTORE SWAP2 SWAP3 DUP5 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH32 0x3417DAA22E111DFEB8D71C6B05F62A3421D2AC780A3091D4EC66406D1EB96FB7 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0xC DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x145E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x149D JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x14C0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xC SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x14DD JUMPI PUSH2 0x14DD PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1506 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0xC SLOAD DUP2 LT ISZERO PUSH2 0x1595 JUMPI PUSH1 0x0 PUSH1 0xC DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x152C JUMPI PUSH2 0x152C PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD DUP1 DUP4 MSTORE PUSH1 0x8 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 PUSH1 0x3 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x1582 JUMPI DUP1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1569 JUMPI PUSH2 0x1569 PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP3 PUSH2 0x157E DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP4 POP POP JUMPDEST POP DUP1 PUSH2 0x158D DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x150D JUMP JUMPDEST POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x15B0 JUMPI PUSH2 0x15B0 PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x15D9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1630 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x15F9 JUMPI PUSH2 0x15F9 PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1613 JUMPI PUSH2 0x1613 PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP1 PUSH2 0x1628 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x15DF JUMP JUMPDEST POP SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1663 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x1686 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 PUSH2 0x16A5 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SUB PUSH2 0x16D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP1 PUSH2 0x396A JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0xC SLOAD DUP2 LT ISZERO PUSH2 0x178E JUMPI DUP3 PUSH1 0xC DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x16F6 JUMPI PUSH2 0x16F6 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SUB PUSH2 0x177C JUMPI PUSH1 0xC DUP1 SLOAD PUSH2 0x1716 SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x3CB3 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x1726 JUMPI PUSH2 0x1726 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0xC DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1744 JUMPI PUSH2 0x1744 PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SSTORE PUSH1 0xC DUP1 SLOAD DUP1 PUSH2 0x1761 JUMPI PUSH2 0x1761 PUSH2 0x3CC6 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE PUSH2 0x178E JUMP JUMPDEST DUP1 PUSH2 0x1786 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x16D8 JUMP JUMPDEST POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP4 DUP2 SSTORE PUSH1 0x1 DUP2 ADD DUP5 SWAP1 SSTORE PUSH1 0x2 DUP2 ADD DUP5 SWAP1 SSTORE PUSH1 0x3 DUP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x4 ADD DUP4 SWAP1 SSTORE PUSH1 0x9 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 PUSH2 0x17D3 SWAP2 PUSH2 0x32B0 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 DUP2 SSTORE SWAP1 PUSH2 0x17F2 PUSH1 0x1 DUP4 ADD DUP3 PUSH2 0x32D1 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x2 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x3 SWAP1 SWAP2 ADD DUP2 SWAP1 SSTORE SWAP2 DUP3 MSTORE POP PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x184D JUMPI POP PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1841 DUP3 PUSH2 0x1E99 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x186B JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x188E JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 DUP1 PUSH2 0x18AD JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SUB PUSH2 0x18DD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP1 PUSH2 0x396A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP4 DUP6 MSTORE POP POP TIMESTAMP PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP12 DUP4 MSTORE PUSH1 0x8 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x4 ADD SLOAD SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP12 DUP4 MSTORE PUSH1 0xA DUP2 MSTORE SWAP3 SWAP1 SWAP2 KECCAK256 DUP4 MLOAD DUP2 SSTORE SWAP2 DUP4 ADD MLOAD SWAP3 SWAP4 POP DUP4 SWAP3 PUSH1 0x1 DUP4 ADD SWAP2 POP PUSH2 0x1970 SWAP1 DUP3 PUSH2 0x3A18 JUMP JUMPDEST POP PUSH1 0x40 DUP3 DUP2 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x60 SWAP1 SWAP3 ADD MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE PUSH1 0x4 SLOAD SWAP1 MLOAD TIMESTAMP DUP2 MSTORE DUP9 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0xA5BCC067C850CA99CEFEE70D42B9E232781E55A3165CCEF97F9E19095C3610EC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1A00 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 0x1A39 JUMPI POP PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1A2D DUP3 PUSH2 0x1E99 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1A57 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x1A7A JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP1 PUSH2 0x1A99 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SUB PUSH2 0x1AC9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP1 PUSH2 0x396A JUMP JUMPDEST PUSH1 0xA PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD DUP1 SLOAD PUSH2 0x1B01 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1B2D SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1B7A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1B4F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1B7A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1B5D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x1BB1 SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1BDD SWAP1 PUSH2 0x3995 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1C2A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1BFF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1C2A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1C0D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1C7D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x105B1C9958591E481A5B9A5D1A585B1A5E9959 PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1CCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x496E76616C696420757365722061646472657373 PUSH1 0x60 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x5 DUP3 SWAP1 SSTORE TIMESTAMP PUSH1 0x6 DUP2 SWAP1 SSTORE PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0xDFE12B4770BCC8CE5467A65B351727C4ADDDFFA6723BADA19C9D18EF1C1E5731 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1D94 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1A27EAC3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x1DB7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x50797993 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP1 PUSH2 0x1DD6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x17249BD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 SUB PUSH2 0x1E06 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB SWAP1 PUSH2 0x396A JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0xA0 DUP2 ADD DUP5 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x1E63 PUSH2 0x1EFF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1E8D JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH2 0x1E96 DUP2 PUSH2 0x1F2C JUMP JUMPDEST POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x1ED6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x13D4CF09 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x1EE8 JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x74E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EF3 DUP5 PUSH2 0x25BB JUMP JUMPDEST PUSH1 0x20 ADD MLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xEA4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x1F89 DUP4 PUSH2 0x266C JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1FA8 JUMPI PUSH2 0x1FA8 PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1FD2 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x1FDC JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2016 PUSH2 0x330B JUMP JUMPDEST PUSH2 0x201E PUSH2 0x330B JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x20AF JUMPI DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x203B JUMPI PUSH2 0x203B PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0xFD SHL SUB SWAP1 POP PUSH2 0x209D JUMPI PUSH2 0x2096 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP SWAP3 POP DUP6 SWAP2 POP PUSH2 0x2744 SWAP1 POP JUMP JUMPDEST DUP3 MSTORE PUSH2 0x20AF JUMP JUMPDEST DUP1 PUSH2 0x20A7 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2021 JUMP JUMPDEST PUSH2 0x20BA PUSH1 0x32 DUP3 PUSH2 0x3BD0 JUMP JUMPDEST SWAP1 POP PUSH2 0x2121 PUSH2 0x211C DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0x2106 SWAP3 POP PUSH1 0x2 SWAP2 POP DUP7 SWAP1 POP PUSH2 0x3BD0 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x2114 PUSH1 0x28 DUP3 PUSH2 0x3BD0 JUMP JUMPDEST SWAP5 POP DUP5 PUSH2 0x2744 JUMP JUMPDEST PUSH2 0x281A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x213A PUSH1 0x2 DUP3 PUSH2 0x3BD0 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT DUP1 ISZERO PUSH2 0x2174 JUMPI POP DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0x2158 JUMPI PUSH2 0x2158 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x5 PUSH1 0xF9 SHL EQ ISZERO JUMPDEST ISZERO PUSH2 0x221D JUMPI DUP1 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x221B JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x2195 JUMPI PUSH2 0x2195 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x5 PUSH1 0xF9 SHL SUB SWAP1 POP PUSH2 0x2209 JUMPI PUSH2 0x21F2 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP7 SWAP3 POP DUP6 SWAP2 POP PUSH2 0x2744 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2202 DUP2 PUSH1 0x1 PUSH2 0x3BD0 JUMP JUMPDEST SWAP2 POP PUSH2 0x221B JUMP JUMPDEST DUP1 PUSH2 0x2213 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x217B JUMP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x2227 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2251 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x555249 PUSH1 0xE8 SHL DUP2 MSTORE POP DUP5 PUSH2 0x2955 JUMP JUMPDEST DUP4 PUSH1 0x60 ADD DUP2 SWAP4 POP DUP3 SWAP1 MSTORE POP POP PUSH2 0x2288 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x2B32B939B4B7B7 PUSH1 0xC9 SHL DUP2 MSTORE POP DUP5 PUSH2 0x2955 JUMP JUMPDEST DUP4 PUSH1 0x80 ADD DUP2 SWAP4 POP DUP3 SWAP1 MSTORE POP POP PUSH1 0x60 PUSH2 0x22C2 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x8 DUP2 MSTORE PUSH1 0x20 ADD PUSH8 0x10DA185A5B881251 PUSH1 0xC2 SHL DUP2 MSTORE POP DUP6 PUSH2 0x2955 JUMP JUMPDEST SWAP3 POP SWAP1 POP PUSH2 0x22CF DUP2 PUSH2 0x2B5F JUMP JUMPDEST PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH5 0x4E6F6E6365 PUSH1 0xD8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x22FE SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP6 PUSH2 0x2955 JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD DUP3 SWAP1 MSTORE SWAP1 MLOAD SWAP1 SWAP3 POP PUSH1 0x8 GT ISZERO PUSH2 0x232B JUMPI PUSH1 0x40 MLOAD PUSH4 0x2D2F00C3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2358 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x125CDCDD595908105D PUSH1 0xBA SHL DUP2 MSTORE POP DUP6 PUSH2 0x2955 JUMP JUMPDEST DUP5 PUSH1 0xE0 ADD DUP2 SWAP5 POP DUP3 SWAP1 MSTORE POP POP PUSH2 0x2397 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH15 0x45787069726174696F6E2054696D65 PUSH1 0x88 SHL DUP2 MSTORE POP DUP6 PUSH2 0x2955 JUMP JUMPDEST DUP5 PUSH2 0x100 ADD DUP2 SWAP5 POP DUP3 SWAP1 MSTORE POP POP PUSH2 0x23D2 DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH10 0x4E6F74204265666F7265 PUSH1 0xB0 SHL DUP2 MSTORE POP DUP6 PUSH2 0x2955 JUMP JUMPDEST DUP5 PUSH2 0x120 ADD DUP2 SWAP5 POP DUP3 SWAP1 MSTORE POP POP PUSH2 0x240D DUP7 DUP7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH10 0x14995C5D595CDD081251 PUSH1 0xB2 SHL DUP2 MSTORE POP DUP6 PUSH2 0x2955 JUMP JUMPDEST DUP5 PUSH2 0x140 ADD DUP2 SWAP5 POP DUP3 SWAP1 MSTORE POP POP PUSH1 0x0 PUSH2 0x2449 DUP8 DUP8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x9 DUP2 MSTORE PUSH1 0x20 ADD PUSH9 0x5265736F7572636573 PUSH1 0xB8 SHL DUP2 MSTORE POP DUP7 PUSH2 0x2955 JUMP JUMPDEST SWAP2 POP POP DUP3 DUP2 EQ PUSH2 0x246A JUMPI PUSH2 0x245E DUP8 DUP8 DUP4 PUSH2 0x2BC3 JUMP JUMPDEST PUSH2 0x160 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 POP JUMPDEST POP SWAP2 SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2471 PUSH2 0x2491 PUSH2 0x248C DUP5 PUSH1 0x0 PUSH1 0x4 PUSH2 0x2744 JUMP JUMPDEST PUSH2 0x2B5F JUMP JUMPDEST PUSH2 0x24A1 PUSH2 0x248C DUP6 PUSH1 0x5 PUSH1 0x7 PUSH2 0x2744 JUMP JUMPDEST PUSH2 0x24B1 PUSH2 0x248C DUP7 PUSH1 0x8 PUSH1 0xA PUSH2 0x2744 JUMP JUMPDEST PUSH2 0x24C1 PUSH2 0x248C DUP8 PUSH1 0xB PUSH1 0xD PUSH2 0x2744 JUMP JUMPDEST PUSH2 0x24D1 PUSH2 0x248C DUP9 PUSH1 0xE PUSH1 0x10 PUSH2 0x2744 JUMP JUMPDEST PUSH2 0x24E1 PUSH2 0x248C DUP10 PUSH1 0x11 PUSH1 0x13 PUSH2 0x2744 JUMP JUMPDEST PUSH2 0x2EB3 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x3 PUSH1 0x1 PUSH1 0x98 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2513 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3CF2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x252D SWAP2 PUSH2 0x3D2E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2568 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x256D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x25B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x195B98DC9E5C1D0E8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5AB JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x25C3 PUSH2 0x3278 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25E5 PUSH1 0x3 SLOAD PUSH1 0x0 DUP1 SHL DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x306A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x25FD SWAP2 SWAP1 PUSH2 0x3E3D JUMP JUMPDEST SWAP1 POP PUSH1 0x2 PUSH1 0x40 MLOAD PUSH2 0x260E SWAP2 SWAP1 PUSH2 0x3B5A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 PUSH1 0x0 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x2640 JUMPI PUSH1 0x40 MLOAD PUSH4 0x283D62BD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST TIMESTAMP DUP2 PUSH1 0x40 ADD MLOAD LT ISZERO PUSH2 0x2665 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB171155 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x26AB JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x26D7 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x26F5 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x270D JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2721 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2733 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x2471 JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2752 DUP5 DUP5 PUSH2 0x3CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2769 JUMPI PUSH2 0x2769 PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2793 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP4 JUMPDEST DUP4 DUP2 LT DUP1 ISZERO PUSH2 0x27A7 JUMPI POP DUP6 MLOAD DUP2 LT JUMPDEST ISZERO PUSH2 0x2811 JUMPI DUP6 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x27BE JUMPI PUSH2 0x27BE PUSH2 0x3BE3 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND DUP3 PUSH2 0x27D8 DUP8 DUP5 PUSH2 0x3CB3 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x27E8 JUMPI PUSH2 0x27E8 PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP DUP1 PUSH2 0x2809 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2798 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x28 EQ PUSH2 0x283E JUMPI PUSH1 0x40 MLOAD PUSH4 0xACF86969 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP4 MLOAD PUSH2 0x284E SWAP2 SWAP1 PUSH2 0x3F0C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2865 JUMPI PUSH2 0x2865 PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x288F JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x2 DUP5 MLOAD PUSH2 0x28A3 SWAP2 SWAP1 PUSH2 0x3F0C JUMP JUMPDEST DUP2 LT ISZERO PUSH2 0x2941 JUMPI PUSH2 0x28E1 DUP5 PUSH2 0x28B9 DUP4 PUSH1 0x2 PUSH2 0x3F20 JUMP JUMPDEST PUSH2 0x28C4 SWAP1 PUSH1 0x1 PUSH2 0x3BD0 JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH2 0x28D4 JUMPI PUSH2 0x28D4 PUSH2 0x3BE3 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH1 0xF8 SHR PUSH2 0x3135 JUMP JUMPDEST PUSH2 0x28F0 DUP6 PUSH2 0x28C4 DUP5 PUSH1 0x2 PUSH2 0x3F20 JUMP JUMPDEST PUSH2 0x28FB SWAP1 PUSH1 0x10 PUSH2 0x3F37 JUMP JUMPDEST PUSH2 0x2905 SWAP2 SWAP1 PUSH2 0x3F53 JUMP JUMPDEST PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x291A JUMPI PUSH2 0x291A PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH2 0x293A DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP1 POP PUSH2 0x2895 JUMP JUMPDEST POP PUSH2 0x294B DUP2 PUSH2 0x3F6C JUMP JUMPDEST PUSH1 0x60 SHR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2A70 JUMPI DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x2975 JUMPI PUSH2 0x2975 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1D PUSH1 0xF9 SHL SUB SWAP1 POP PUSH2 0x2A5E JUMPI DUP5 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x29DA DUP9 DUP9 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP DUP7 SWAP2 POP PUSH2 0x2744 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x29FF JUMPI POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 POP DUP2 PUSH2 0x2B56 JUMP JUMPDEST DUP1 PUSH2 0x2A09 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP DUP6 DUP2 LT DUP1 ISZERO PUSH2 0x2A43 JUMPI POP DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x2A28 JUMPI PUSH2 0x2A28 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0xFD SHL EQ JUMPDEST ISZERO PUSH2 0x2A56 JUMPI DUP1 PUSH2 0x2A52 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP JUMPDEST DUP1 SWAP4 POP PUSH2 0x2A70 JUMP JUMPDEST DUP1 PUSH2 0x2A68 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x295B JUMP JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2B0E JUMPI DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x2A8A JUMPI PUSH2 0x2A8A PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x5 PUSH1 0xF9 SHL SUB SWAP1 POP PUSH2 0x2AFC JUMPI PUSH2 0x2AE7 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP9 SWAP3 POP DUP6 SWAP2 POP PUSH2 0x2744 SWAP1 POP JUMP JUMPDEST PUSH2 0x2AF2 DUP3 PUSH1 0x1 PUSH2 0x3BD0 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP PUSH2 0x2B56 JUMP JUMPDEST DUP1 PUSH2 0x2B06 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2A70 JUMP JUMPDEST PUSH2 0x2B51 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP9 SWAP3 POP DUP6 SWAP2 POP PUSH2 0x2744 SWAP1 POP JUMP JUMPDEST SWAP3 POP SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x2BBC JUMPI PUSH1 0x30 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2B81 JUMPI PUSH2 0x2B81 PUSH2 0x3BE3 JUMP JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH2 0x2B93 SWAP2 SWAP1 PUSH1 0xF8 SHR PUSH2 0x3CB3 JUMP JUMPDEST PUSH2 0x2B9E DUP4 PUSH1 0xA PUSH2 0x3F20 JUMP JUMPDEST PUSH2 0x2BA8 SWAP2 SWAP1 PUSH2 0x3BD0 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x2BB4 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2B64 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 DUP2 JUMPDEST PUSH2 0x2BD5 PUSH1 0x1 DUP8 PUSH2 0x3CB3 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 0x2CD0 JUMPI DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x2BEE JUMPI PUSH2 0x2BEE PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x2D PUSH1 0xF8 SHL EQ DUP1 ISZERO PUSH2 0x2C46 JUMPI POP DUP7 DUP7 PUSH2 0x2C1C DUP5 PUSH1 0x1 PUSH2 0x3BD0 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x2C2B JUMPI PUSH2 0x2C2B PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0xFD SHL EQ JUMPDEST ISZERO PUSH2 0x2C6A JUMPI PUSH2 0x2C56 PUSH1 0x2 DUP4 PUSH2 0x3BD0 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x2C62 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2C6F JUMP JUMPDEST PUSH2 0x2CD0 JUMP JUMPDEST DUP6 DUP3 LT DUP1 ISZERO PUSH2 0x2CA7 JUMPI POP DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x2C8B JUMPI PUSH2 0x2C8B PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0xA PUSH1 0xF8 SHL EQ ISZERO JUMPDEST ISZERO PUSH2 0x2CBE JUMPI DUP2 PUSH2 0x2CB6 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP3 POP POP PUSH2 0x2C6F JUMP JUMPDEST DUP2 PUSH2 0x2CC8 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP3 POP POP PUSH2 0x2BCA JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2CEA JUMPI PUSH2 0x2CEA PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D1D JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2D08 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP DUP6 SWAP3 POP PUSH1 0x0 JUMPDEST PUSH2 0x2D31 PUSH1 0x1 DUP10 PUSH2 0x3CB3 JUMP JUMPDEST DUP5 LT DUP1 ISZERO PUSH2 0x2D3F JUMPI POP DUP3 DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0x2EA5 JUMPI DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x2D56 JUMPI PUSH2 0x2D56 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x2D PUSH1 0xF8 SHL EQ DUP1 ISZERO PUSH2 0x2DAE JUMPI POP DUP9 DUP9 PUSH2 0x2D84 DUP7 PUSH1 0x1 PUSH2 0x3BD0 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x2D93 JUMPI PUSH2 0x2D93 PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 PUSH1 0xFD SHL EQ JUMPDEST ISZERO PUSH2 0x2DC1 JUMPI PUSH2 0x2DBE DUP5 PUSH1 0x2 PUSH2 0x3BD0 JUMP JUMPDEST SWAP7 POP JUMPDEST DUP8 DUP5 LT DUP1 ISZERO PUSH2 0x2DF9 JUMPI POP DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x2DDD JUMPI PUSH2 0x2DDD PUSH2 0x3BE3 JUMP JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0xA PUSH1 0xF8 SHL EQ ISZERO JUMPDEST ISZERO PUSH2 0x2E10 JUMPI DUP4 PUSH2 0x2E08 DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP5 POP POP PUSH2 0x2DC1 JUMP JUMPDEST PUSH2 0x2E53 DUP10 DUP10 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP12 SWAP3 POP DUP9 SWAP2 POP PUSH2 0x2744 SWAP1 POP JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2E65 JUMPI PUSH2 0x2E65 PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP1 PUSH2 0x2E7B SWAP1 PUSH2 0x3AED JUMP JUMPDEST SWAP2 POP POP DUP8 DUP5 SUB PUSH2 0x2E93 JUMPI DUP4 PUSH2 0x2E8F DUP2 PUSH2 0x3FA3 JUMP JUMPDEST SWAP5 POP POP JUMPDEST DUP4 PUSH2 0x2E9D DUP2 PUSH2 0x3AED JUMP JUMPDEST SWAP5 POP POP PUSH2 0x2D26 JUMP JUMPDEST POP SWAP8 SWAP2 SWAP7 POP SWAP1 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7B2 JUMPDEST DUP8 PUSH2 0xFFFF AND DUP2 PUSH2 0xFFFF AND LT ISZERO PUSH2 0x2F0F JUMPI PUSH2 0x2ED2 DUP2 PUSH2 0x3219 JUMP JUMPDEST ISZERO PUSH2 0x2EEC JUMPI PUSH2 0x2EE5 PUSH4 0x1E28500 DUP4 PUSH2 0x3BD0 JUMP JUMPDEST SWAP2 POP PUSH2 0x2EFD JUMP JUMPDEST PUSH2 0x2EFA PUSH4 0x1E13380 DUP4 PUSH2 0x3BD0 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP1 PUSH2 0x2F07 DUP2 PUSH2 0x3FBA JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2EB9 JUMP JUMPDEST PUSH2 0x2F17 PUSH2 0x3375 JUMP JUMPDEST PUSH1 0x1F DUP2 MSTORE PUSH2 0x2F24 DUP10 PUSH2 0x3219 JUMP JUMPDEST ISZERO PUSH2 0x2F35 JUMPI PUSH1 0x1D PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x2F3D JUMP JUMPDEST PUSH1 0x1C PUSH1 0x20 DUP3 ADD MSTORE JUMPDEST PUSH1 0x1F PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x1E PUSH1 0x60 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0xA0 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0xE0 DUP4 ADD DUP3 SWAP1 MSTORE PUSH2 0x100 DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 0x120 DUP4 ADD DUP3 SWAP1 MSTORE PUSH2 0x140 DUP4 ADD MSTORE PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0x1 SWAP2 POP JUMPDEST DUP8 PUSH1 0xFF AND DUP3 PUSH2 0xFFFF AND LT ISZERO PUSH2 0x2FF1 JUMPI DUP1 PUSH2 0x2FA7 PUSH1 0x1 DUP5 PUSH2 0x3FDB JUMP JUMPDEST PUSH2 0xFFFF AND PUSH1 0xC DUP2 LT PUSH2 0x2FBB JUMPI PUSH2 0x2FBB PUSH2 0x3BE3 JUMP JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0x2FCD SWAP1 PUSH3 0x15180 PUSH2 0x3FF6 JUMP JUMPDEST PUSH2 0x2FDD SWAP1 PUSH4 0xFFFFFFFF AND DUP5 PUSH2 0x3BD0 JUMP JUMPDEST SWAP3 POP DUP2 PUSH2 0x2FE9 DUP2 PUSH2 0x3FBA JUMP JUMPDEST SWAP3 POP POP PUSH2 0x2F8C JUMP JUMPDEST PUSH2 0x2FFC PUSH1 0x1 DUP9 PUSH2 0x4016 JUMP JUMPDEST PUSH2 0x300C SWAP1 PUSH1 0xFF AND PUSH3 0x15180 PUSH2 0x3FF6 JUMP JUMPDEST PUSH2 0x301C SWAP1 PUSH4 0xFFFFFFFF AND DUP5 PUSH2 0x3BD0 JUMP JUMPDEST SWAP3 POP PUSH2 0x302D PUSH1 0xFF DUP8 AND PUSH2 0xE10 PUSH2 0x3FF6 JUMP JUMPDEST PUSH2 0x303D SWAP1 PUSH4 0xFFFFFFFF AND DUP5 PUSH2 0x3BD0 JUMP JUMPDEST SWAP3 POP PUSH2 0x304D PUSH1 0xFF DUP7 AND PUSH1 0x3C PUSH2 0x402F JUMP JUMPDEST PUSH2 0x305B SWAP1 PUSH2 0xFFFF AND DUP5 PUSH2 0x3BD0 JUMP JUMPDEST SWAP3 POP PUSH2 0x1254 PUSH1 0xFF DUP6 AND DUP5 PUSH2 0x3BD0 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 PUSH1 0x4 PUSH1 0x1 PUSH1 0x98 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3097 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3CF2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x30B1 SWAP2 PUSH2 0x3D2E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x30EC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x30F1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x25B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x191958DC9E5C1D0E8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0xF8 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND LT DUP1 ISZERO SWAP1 PUSH2 0x316B JUMPI POP PUSH1 0x39 PUSH1 0xF8 SHL PUSH1 0xF8 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND GT ISZERO JUMPDEST ISZERO PUSH2 0x317B JUMPI PUSH2 0x2471 PUSH1 0x30 DUP4 PUSH2 0x4016 JUMP JUMPDEST PUSH1 0x61 PUSH1 0xF8 SHL PUSH1 0xF8 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND LT DUP1 ISZERO SWAP1 PUSH2 0x31AF JUMPI POP PUSH1 0x33 PUSH1 0xF9 SHL PUSH1 0xF8 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND GT ISZERO JUMPDEST ISZERO PUSH2 0x31CB JUMPI PUSH1 0x61 PUSH2 0x31C1 DUP4 PUSH1 0xA PUSH2 0x3F53 JUMP JUMPDEST PUSH2 0x2471 SWAP2 SWAP1 PUSH2 0x4016 JUMP JUMPDEST PUSH1 0x41 PUSH1 0xF8 SHL PUSH1 0xF8 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND LT DUP1 ISZERO SWAP1 PUSH2 0x31FF JUMPI POP PUSH1 0x23 PUSH1 0xF9 SHL PUSH1 0xF8 DUP4 SWAP1 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND GT ISZERO JUMPDEST ISZERO PUSH2 0x3211 JUMPI PUSH1 0x41 PUSH2 0x31C1 DUP4 PUSH1 0xA PUSH2 0x3F53 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3226 PUSH1 0x4 DUP4 PUSH2 0x404D JUMP JUMPDEST PUSH2 0xFFFF AND ISZERO PUSH2 0x3237 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3242 PUSH1 0x64 DUP4 PUSH2 0x404D JUMP JUMPDEST PUSH2 0xFFFF AND ISZERO PUSH2 0x3253 JUMPI POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x325F PUSH2 0x190 DUP4 PUSH2 0x404D JUMP JUMPDEST PUSH2 0xFFFF AND ISZERO PUSH2 0x3270 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 0x0 DUP3 SSTORE PUSH1 0x4 MUL SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E96 SWAP2 SWAP1 PUSH2 0x3394 JUMP JUMPDEST POP DUP1 SLOAD PUSH2 0x32DD SWAP1 PUSH2 0x3995 JUMP JUMPDEST PUSH1 0x0 DUP3 SSTORE DUP1 PUSH1 0x1F LT PUSH2 0x32ED JUMPI POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E96 SWAP2 SWAP1 PUSH2 0x33D1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x180 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x33CD JUMPI PUSH1 0x0 PUSH2 0x33A8 DUP3 DUP3 PUSH2 0x32D1 JUMP JUMPDEST PUSH2 0x33B6 PUSH1 0x1 DUP4 ADD PUSH1 0x0 PUSH2 0x32D1 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x2 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x4 ADD PUSH2 0x3394 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x33CD JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x33D2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x33F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x341A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3402 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x343B DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x33FF JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 SWAP3 POP DUP3 DUP7 ADD SWAP2 POP DUP3 DUP2 PUSH1 0x5 SHL DUP8 ADD ADD DUP5 DUP9 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x34DC JUMPI PUSH1 0x3F NOT DUP10 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD PUSH1 0x80 DUP2 MLOAD DUP2 DUP7 MSTORE PUSH2 0x349C DUP3 DUP8 ADD DUP3 PUSH2 0x3423 JUMP JUMPDEST SWAP2 POP POP DUP9 DUP3 ADD MLOAD DUP6 DUP3 SUB DUP11 DUP8 ADD MSTORE PUSH2 0x34B4 DUP3 DUP3 PUSH2 0x3423 JUMP JUMPDEST DUP4 DUP11 ADD MLOAD DUP8 DUP12 ADD MSTORE PUSH1 0x60 SWAP4 DUP5 ADD MLOAD SWAP4 SWAP1 SWAP7 ADD SWAP3 SWAP1 SWAP3 MSTORE POP POP SWAP4 DUP7 ADD SWAP4 SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3476 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x34FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x352B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x354A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3574 DUP10 DUP4 DUP11 ADD PUSH2 0x34EA JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x358D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x359A DUP9 DUP3 DUP10 ADD PUSH2 0x34EA JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xA0 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x35E3 JUMPI PUSH2 0x35E3 PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x3611 JUMPI PUSH2 0x3611 PUSH2 0x35AB JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x3632 JUMPI PUSH2 0x3632 PUSH2 0x35AB JUMP JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3664 PUSH2 0x365F DUP3 PUSH2 0x3619 JUMP JUMPDEST PUSH2 0x35E9 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x3679 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x36A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x36BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x36CA DUP5 DUP3 DUP6 ADD PUSH2 0x3640 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x370A JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x36EE JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3729 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x80 DUP2 MSTORE PUSH1 0x0 PUSH2 0x374B PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x3423 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x375D DUP2 DUP8 PUSH2 0x3423 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x378A PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x3423 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1E96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x37C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2665 DUP2 PUSH2 0x379D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0x80 DUP2 SLT ISZERO PUSH2 0x37E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x37FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3807 DUP8 DUP3 DUP9 ADD PUSH2 0x34EA JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x60 PUSH1 0x1F NOT DUP3 ADD SLT ISZERO PUSH2 0x381F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 DUP5 ADD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x2665 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x3423 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3856 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3874 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3880 DUP9 DUP4 DUP10 ADD PUSH2 0x34EA JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3899 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x38A6 DUP8 DUP3 DUP9 ADD PUSH2 0x3640 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x38C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x38E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38EE DUP6 DUP3 DUP7 ADD PUSH2 0x3640 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x80 PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x391E PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x3423 JUMP JUMPDEST SWAP1 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x395C DUP2 PUSH2 0x379D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x11 SWAP1 DUP3 ADD MSTORE PUSH17 0x14D95CDCDA5BDB881B9BDD08199BDD5B99 PUSH1 0x7A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x39A9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x74E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x3A13 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x39F0 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3A0F JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x39FC JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3A31 JUMPI PUSH2 0x3A31 PUSH2 0x35AB JUMP JUMPDEST PUSH2 0x3A45 DUP2 PUSH2 0x3A3F DUP5 SLOAD PUSH2 0x3995 JUMP JUMPDEST DUP5 PUSH2 0x39C9 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x3A7A JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x3A62 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x3A0F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3AA9 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x3A8A JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x3AC7 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x3AFF JUMPI PUSH2 0x3AFF PUSH2 0x3AD7 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A000000000000 DUP2 MSTORE PUSH1 0x0 DUP5 MLOAD PUSH2 0x3B3E DUP2 PUSH1 0x1A DUP6 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x33FF JUMP JUMPDEST DUP3 ADD DUP4 DUP6 PUSH1 0x1A DUP4 ADD CALLDATACOPY PUSH1 0x0 SWAP4 ADD PUSH1 0x1A ADD SWAP3 DUP4 MSTORE POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLOAD PUSH2 0x3B68 DUP2 PUSH2 0x3995 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x3B80 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x3B95 JUMPI PUSH2 0x3BC4 JUMP JUMPDEST PUSH1 0xFF NOT DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x3BC4 JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x3BBB JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x3BA2 JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2471 JUMPI PUSH2 0x2471 PUSH2 0x3AD7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD PUSH1 0xA0 DUP3 DUP6 ADD MSTORE PUSH2 0x3C15 PUSH1 0xC0 DUP6 ADD DUP3 PUSH2 0x3423 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 DUP7 ADD MLOAD AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x1F NOT DUP1 DUP7 DUP5 SUB ADD PUSH1 0x80 DUP8 ADD MSTORE PUSH2 0x3C4E DUP4 DUP4 PUSH2 0x3423 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD MLOAD DUP8 DUP3 SUB DUP4 ADD PUSH1 0xA0 DUP10 ADD MSTORE DUP1 MLOAD DUP1 DUP4 MSTORE SWAP2 SWAP5 POP DUP6 ADD SWAP3 POP DUP5 DUP5 ADD SWAP1 PUSH1 0x5 DUP2 SWAP1 SHL DUP6 ADD DUP7 ADD PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3CA5 JUMPI DUP5 DUP8 DUP4 SUB ADD DUP5 MSTORE PUSH2 0x3C93 DUP3 DUP8 MLOAD PUSH2 0x3423 JUMP JUMPDEST SWAP6 DUP9 ADD SWAP6 SWAP4 DUP9 ADD SWAP4 SWAP2 POP PUSH1 0x1 ADD PUSH2 0x3C79 JUMP JUMPDEST POP SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2471 JUMPI PUSH2 0x2471 PUSH2 0x3AD7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP5 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x3D11 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x3423 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x3D23 DUP2 DUP6 PUSH2 0x3423 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x3D40 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x33FF JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3D5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x3D69 PUSH2 0x365F DUP3 PUSH2 0x3619 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 PUSH1 0x20 DUP4 DUP7 ADD ADD GT ISZERO PUSH2 0x3D7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x36CA DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x33FF JUMP JUMPDEST DUP1 MLOAD PUSH2 0x3D9A DUP2 PUSH2 0x379D JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3DB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP4 GT ISZERO PUSH2 0x3DCC JUMPI PUSH2 0x3DCC PUSH2 0x35AB JUMP JUMPDEST DUP3 PUSH1 0x5 SHL PUSH2 0x3DDB DUP4 DUP3 ADD PUSH2 0x35E9 JUMP JUMPDEST SWAP4 DUP5 MSTORE DUP6 DUP2 ADD DUP4 ADD SWAP4 DUP4 DUP2 ADD SWAP1 DUP9 DUP7 GT ISZERO PUSH2 0x3DF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 DUP9 ADD SWAP3 POP JUMPDEST DUP6 DUP4 LT ISZERO PUSH2 0x3E31 JUMPI DUP3 MLOAD DUP5 DUP2 GT ISZERO PUSH2 0x3E13 JUMPI PUSH1 0x0 DUP1 DUP2 REVERT JUMPDEST PUSH2 0x3E21 DUP11 DUP8 DUP4 DUP13 ADD ADD PUSH2 0x3D4A JUMP JUMPDEST DUP4 MSTORE POP SWAP2 DUP5 ADD SWAP2 SWAP1 DUP5 ADD SWAP1 PUSH2 0x3DFB JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x3E66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xA0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x3E7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E82 PUSH2 0x35C1 JUMP JUMPDEST DUP3 MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x3E91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E9D DUP8 DUP3 DUP7 ADD PUSH2 0x3D4A JUMP JUMPDEST DUP3 MSTORE POP PUSH2 0x3EAC PUSH1 0x20 DUP5 ADD PUSH2 0x3D8F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x3ECD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3ED9 DUP8 DUP3 DUP7 ADD PUSH2 0x3D4A JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x3EF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3EFD DUP8 DUP3 DUP7 ADD PUSH2 0x3D9F JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3F1B JUMPI PUSH2 0x3F1B PUSH2 0x3CDC JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x2471 JUMPI PUSH2 0x2471 PUSH2 0x3AD7 JUMP JUMPDEST PUSH1 0xFF DUP2 DUP2 AND DUP4 DUP3 AND MUL SWAP1 DUP2 AND SWAP1 DUP2 DUP2 EQ PUSH2 0x2BBC JUMPI PUSH2 0x2BBC PUSH2 0x3AD7 JUMP JUMPDEST PUSH1 0xFF DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP2 GT ISZERO PUSH2 0x2471 JUMPI PUSH2 0x2471 PUSH2 0x3AD7 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP1 DUP3 AND SWAP3 SWAP2 SWAP1 PUSH1 0x14 DUP4 LT ISZERO PUSH2 0x3F9B JUMPI DUP1 DUP2 DUP5 PUSH1 0x14 SUB PUSH1 0x3 SHL SHL DUP4 AND AND SWAP4 POP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3FB2 JUMPI PUSH2 0x3FB2 PUSH2 0x3AD7 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP1 DUP4 AND DUP2 DUP2 SUB PUSH2 0x3FD1 JUMPI PUSH2 0x3FD1 PUSH2 0x3AD7 JUMP JUMPDEST PUSH1 0x1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xFFFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x2BBC JUMPI PUSH2 0x2BBC PUSH2 0x3AD7 JUMP JUMPDEST PUSH4 0xFFFFFFFF DUP2 DUP2 AND DUP4 DUP3 AND MUL DUP1 DUP3 AND SWAP2 SWAP1 DUP3 DUP2 EQ PUSH2 0x1B9A JUMPI PUSH2 0x1B9A PUSH2 0x3AD7 JUMP JUMPDEST PUSH1 0xFF DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP2 GT ISZERO PUSH2 0x2471 JUMPI PUSH2 0x2471 PUSH2 0x3AD7 JUMP JUMPDEST PUSH2 0xFFFF DUP2 DUP2 AND DUP4 DUP3 AND MUL DUP1 DUP3 AND SWAP2 SWAP1 DUP3 DUP2 EQ PUSH2 0x1B9A JUMPI PUSH2 0x1B9A PUSH2 0x3AD7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP1 DUP5 AND DUP1 PUSH2 0x4062 JUMPI PUSH2 0x4062 PUSH2 0x3CDC JUMP JUMPDEST SWAP3 AND SWAP2 SWAP1 SWAP2 MOD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SIGNEXTEND 0xED 0x27 0x26 PUSH0 0xEA PUSH1 0xA SWAP4 0x2C SWAP13 0x4F AND 0xAB DUP1 0xE8 0x4D 0xAA PUSH16 0x3A0E9FAD9A191B1738BA02C18364736F PUSH13 0x63430008140033000000000000 ",
          "sourceMap": "364:11616:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;533:29;;;;;;;;;160:25:22;;;148:2;133:18;533:29:19;;;;;;;;1412:54;;;;;;:::i;:::-;;;;;;;;;;;;;;7069:270;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;5016:1009::-;;;;;;:::i;:::-;;:::i;:::-;;11821:157;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;598:25::-;;;;;;;;;;;;5867:14:22;;5860:22;5842:41;;5830:2;5815:18;598:25:19;5702:187:22;9129:467:19;;;;;;:::i;:::-;;:::i;1295:53::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;508:19::-;;;;;-1:-1:-1;;;;;508:19:19;;;;;;-1:-1:-1;;;;;6837:32:22;;;6819:51;;6807:2;6792:18;508:19:19;6673:203:22;11525:194:19;;;;;;:::i;:::-;;:::i;1354:52::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;11107:279::-;;;:::i;:::-;;;;-1:-1:-1;;;;;7567:32:22;;;7549:51;;7631:2;7616:18;;7609:34;;;;7659:18;;;7652:34;7717:2;7702:18;;7695:34;7536:3;7521:19;11107:279:19;7318:417:22;2293:101:6;;;:::i;10567:287:19:-;;;;;;:::i;:::-;;:::i;3086:2225:5:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3819:977:19:-;;;:::i;1638:85:6:-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:6;1638:85;;1561:26:19;;;;;-1:-1:-1;;;;;1561:26:19;;;1472:31;;;;;;:::i;:::-;;:::i;8272:755::-;;;:::i;9712:729::-;;;;;;:::i;:::-;;:::i;6263:665::-;;;;;;:::i;:::-;;:::i;7470:290::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;5425:85:5:-;;;:::i;1238:51:19:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11424:25:22;;;11480:2;11465:18;;11458:34;;;;11508:18;;;11501:34;;;;11578:14;11571:22;11566:2;11551:18;;11544:50;11625:3;11610:19;;11603:35;11411:3;11396:19;1238:51:19;11171:473:22;3294:422:19;;;;;;:::i;:::-;;:::i;568:24::-;;;;;;7891:268;;;;;;:::i;:::-;;:::i;:::-;;;;;;12119:4:22;12161:3;12150:9;12146:19;12138:27;;12198:6;12192:13;12181:9;12174:32;12262:4;12254:6;12250:17;12244:24;12237:4;12226:9;12222:20;12215:54;12325:4;12317:6;12313:17;12307:24;12300:4;12289:9;12285:20;12278:54;12402:4;12394:6;12390:17;12384:24;12377:32;12370:40;12363:4;12352:9;12348:20;12341:70;12467:4;12459:6;12455:17;12449:24;12442:4;12431:9;12427:20;12420:54;11969:511;;;;;2543:215:6;;;;;;:::i;:::-;;:::i;7069:270:19:-;2813:4;;7192:20;;-1:-1:-1;;;;;2813:4:19;2799:10;:18;2795:76;;2840:20;;-1:-1:-1;;;2840:20:19;;;;;;;;;;;2795:76;2478:13:::1;::::0;::::1;;2473:76;;2514:24;;-1:-1:-1::0;;;2514:24:19::1;;;;;;;;;;;2473:76;7172:9:::0;;3090:79:::2;;3140:18;;-1:-1:-1::0;;;3140:18:19::2;;;;;;;;;;;3090:79;7232:23:::3;::::0;;;:12:::3;:23;::::0;;;;:33:::3;;::::0;:38;;7224:68:::3;;;;-1:-1:-1::0;;;7224:68:19::3;;;;;;;:::i;:::-;;;;;;;;;7309:23;::::0;;;:12:::3;:23;::::0;;;;;;;7302:30;;;;;;::::3;::::0;;;;;;;;;;;;7309:23;;7302:30;::::3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::3;;;;;;;;;;;;;;;;;;3178:1;2558::::2;7069:270:::0;;;:::o;5016:1009::-;2813:4;;-1:-1:-1;;;;;2813:4:19;2799:10;:18;2795:76;;2840:20;;-1:-1:-1;;;2840:20:19;;;;;;;;;;;2795:76;2478:13:::1;::::0;::::1;;2473:76;;2514:24;;-1:-1:-1::0;;;2514:24:19::1;;;;;;;;;;;2473:76;5219:9:::0;;3090:79:::2;;3140:18;;-1:-1:-1::0;;;3140:18:19::2;;;;;;;;;;;3090:79;5248:23:::3;::::0;;;:12:::3;:23;::::0;;;;:33:::3;;::::0;:38;;5240:68:::3;;;;-1:-1:-1::0;;;5240:68:19::3;;;;;;;:::i;:::-;5326:23;::::0;;;:12:::3;:23;::::0;;;;:32:::3;;::::0;::::3;;5318:62;;;::::0;-1:-1:-1;;;5318:62:19;;13418:2:22;5318:62:19::3;::::0;::::3;13400:21:22::0;13457:2;13437:18;;;13430:30;-1:-1:-1;;;13476:18:22;;;13469:47;13533:18;;5318:62:19::3;13216:341:22::0;5318:62:19::3;5399:20;5422:30:::0;;;:19:::3;:30;::::0;;;;;;;;5503:213;;;::::3;::::0;::::3;::::0;;::::3;::::0;;::::3;::::0;;;;;;;::::3;::::0;::::3;::::0;;;5422:30;;5399:20;5503:213;;;5551:20;;;;;;5503:213;;5551:20;;;;5503:213;::::3;;::::0;::::3;::::0;;;;-1:-1:-1;;;5503:213:19;;;-1:-1:-1;5503:213:19::3;::::0;;::::3;;::::0;::::3;::::0;;::::3;::::0;::::3;::::0;;;;;;;;;;;;::::3;::::0;;5606:19;;;;;;5503:213;::::3;5606:19:::0;;;;5503:213;::::3;;::::0;::::3;::::0;;;-1:-1:-1;5503:213:19;;;-1:-1:-1;;5650:15:19::3;5503:213;::::0;;::::3;::::0;;;;;;;;;;;5735:23;;;:12:::3;:23:::0;;;;;:40;;::::3;::::0;::::3;::::0;;;;;;;;;;;5471:245;;-1:-1:-1;5471:245:19;;5735:40:::3;::::0;;::::3;;::::0;;;-1:-1:-1;5735:40:19::3;::::0;;::::3;:::i;:::-;-1:-1:-1::0;5735:40:19::3;::::0;::::3;::::0;::::3;::::0;::::3;::::0;::::3;::::0;;::::3;:::i;:::-;-1:-1:-1::0;5735:40:19::3;::::0;;::::3;::::0;::::3;::::0;::::3;::::0;::::3;::::0;;::::3;::::0;::::3;::::0;;::::3;::::0;-1:-1:-1;5785:30:19;;;:19:::3;:30;::::0;;;;:32;;;::::3;::::0;::::3;:::i;:::-;::::0;;;-1:-1:-1;;5827:23:19::3;::::0;;;:12:::3;:23;::::0;;;;5866:15:::3;5827:36;::::0;::::3;:54:::0;5891:36:::3;;:38:::0;;;::::3;::::0;::::3;:::i;:::-;::::0;;;-1:-1:-1;;5971:4:19::3;::::0;5953:65:::3;::::0;;16206:25:22;;;6002:15:19::3;16262:2:22::0;16247:18;;16240:34;5977:9:19;;-1:-1:-1;;;;;5971:4:19::3;::::0;5953:65:::3;::::0;16179:18:22;5953:65:19::3;;;;;;;5230:795;;2558:1:::2;5016:1009:::0;;;;;:::o;11821:157::-;2642:4;;11922:16;;11890:5;;-1:-1:-1;;;;;2642:4:19;2628:10;:18;;;;:50;;-1:-1:-1;2674:4:19;;-1:-1:-1;;;;;2674:4:19;2650:20;2664:5;2650:13;:20::i;:::-;-1:-1:-1;;;;;2650:28:19;;;2628:50;2624:108;;;2701:20;;-1:-1:-1;;;2701:20:19;;;;;;;;;;;2624:108;2478:13:::1;::::0;::::1;;2473:76;;2514:24;;-1:-1:-1::0;;;2514:24:19::1;;;;;;;;;;;2473:76;11957:14:::2;11950:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11821:157:::0;;;;:::o;9129:467::-;2813:4;;-1:-1:-1;;;;;2813:4:19;2799:10;:18;2795:76;;2840:20;;-1:-1:-1;;;2840:20:19;;;;;;;;;;;2795:76;2478:13:::1;::::0;::::1;;2473:76;;2514:24;;-1:-1:-1::0;;;2514:24:19::1;;;;;;;;;;;2473:76;9225:9:::0;;3090:79:::2;;3140:18;;-1:-1:-1::0;;;3140:18:19::2;;;;;;;;;;;3090:79;9254:23:::3;::::0;;;:12:::3;:23;::::0;;;;:33:::3;;::::0;:38;;9246:68:::3;;;;-1:-1:-1::0;;;9246:68:19::3;;;;;;;:::i;:::-;9332:23;::::0;;;:12:::3;:23;::::0;;;;:32:::3;;::::0;::::3;;9324:67;;;::::0;-1:-1:-1;;;9324:67:19;;16487:2:22;9324:67:19::3;::::0;::::3;16469:21:22::0;16526:2;16506:18;;;16499:30;-1:-1:-1;;;16545:18:22;;;16538:52;16607:18;;9324:67:19::3;16285:346:22::0;9324:67:19::3;9445:5;9410:23:::0;;;:12:::3;:23;::::0;;;;;;:32:::3;::::0;::::3;:40:::0;;-1:-1:-1;;9410:40:19::3;::::0;;9499:15:::3;9460:36;::::0;;::::3;:54:::0;;;9556:4:::3;::::0;9538:51;;9423:9;;-1:-1:-1;;;;;9556:4:19::3;::::0;9538:51:::3;::::0;::::3;::::0;160:25:22;;148:2;133:18;;14:177;9538:51:19::3;;;;;;;;2558:1:::2;9129:467:::0;:::o;1295:53::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;11525:194::-;2813:4;;11656:7;;-1:-1:-1;;;;;2813:4:19;2799:10;:18;2795:76;;2840:20;;-1:-1:-1;;;2840:20:19;;;;;;;;;;;2795:76;2478:13:::1;::::0;::::1;;2473:76;;2514:24;;-1:-1:-1::0;;;2514:24:19::1;;;;;;;;;;;2473:76;11636:9:::0;;3090:79:::2;;3140:18;;-1:-1:-1::0;;;3140:18:19::2;;;;;;;;;;;3090:79;-1:-1:-1::0;;11682:30:19::3;::::0;;;:19:::3;:30;::::0;;;;;;11525:194::o;1354:52::-;;;;;;;;;;;;;;;;;;;;;;;;:::i;11107:279::-;2813:4;;11193:13;;;;;;;;-1:-1:-1;;;;;2813:4:19;2799:10;:18;2795:76;;2840:20;;-1:-1:-1;;;2840:20:19;;;;;;;;;;;2795:76;2478:13:::1;::::0;::::1;;2473:76;;2514:24;;-1:-1:-1::0;;;2514:24:19::1;;;;;;;;;;;2473:76;-1:-1:-1::0;;11324:4:19::2;::::0;11330:14:::2;::::0;11346:9:::2;::::0;11357:14:::2;:21:::0;-1:-1:-1;;;;;11324:4:19;;::::2;::::0;11330:14;;-1:-1:-1;11346:9:19;-1:-1:-1;11107:279:19:o;2293:101:6:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;10567:287:19:-;1531:13:6;:11;:13::i;:::-;-1:-1:-1;;;;;10650:26:19;::::1;10642:67;;;::::0;-1:-1:-1;;;10642:67:19;;16838:2:22;10642:67:19::1;::::0;::::1;16820:21:22::0;16877:2;16857:18;;;16850:30;16916;16896:18;;;16889:58;16964:18;;10642:67:19::1;16636:352:22::0;10642:67:19::1;10736:11;::::0;;-1:-1:-1;;;;;10757:26:19;;::::1;-1:-1:-1::0;;;;;;10757:26:19;::::1;::::0;::::1;::::0;;;10807:40:::1;::::0;10736:11;::::1;::::0;10757:26;10736:11;;10807:40:::1;::::0;10719:14:::1;::::0;10807:40:::1;10632:222;10567:287:::0;:::o;3086:2225:5:-;3217:12;3245:18;;:::i;:::-;3331:22;3432:39;3455:7;3432:16;:39::i;:::-;3485:7;;3356:146;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3356:146:5;;;;;;;;;3550:20;;3356:146;3550:20;;;;;;;3512:12;3527:117;;;;;;;;;17906:25:22;;;;17979:4;3590:5:5;;;;17967:17:22;17947:18;;;17940:45;;;;3610:5:5;;18001:18:22;;;17994:34;3629:5:5;;;18044:18:22;;;18037:34;3356:146:5;-1:-1:-1;3512:12:5;3527:117;;17878:19:22;;3527:117:5;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3527:117:5;;-1:-1:-1;;3527:117:5;;-1:-1:-1;;;;;3654:17:5;;3527:117;3654:10;;:17;3527:117;-1:-1:-1;3682:26:5;;-1:-1:-1;3711:39:5;3741:7;;3711:23;:39::i;:::-;3682:68;;3778:13;3765:1;:9;;;:26;3761:90;;3814:26;;-1:-1:-1;;;3814:26:5;;;;;;;;;;;3761:90;3910:7;3894:25;;;;;;:::i;:::-;;;;;;;;3875:1;:14;;;3865:25;;;;;;:54;3861:117;;3942:25;;-1:-1:-1;;;3942:25:5;;;;;;;;;;;3861:117;4005:14;;3987:33;;4035:6;;;;-1:-1:-1;;;;;4035:14:5;;;;;;4031:78;;4072:26;;-1:-1:-1;;;4072:26:5;;;;;;;;;;;4031:78;4136:11;;;;:18;:23;;;;:98;;;4194:40;4222:1;:11;;;4194:27;:40::i;:::-;4175:15;:59;;4136:98;4119:186;;;4266:28;;-1:-1:-1;;;4266:28:5;;;;;;;;;;;4119:186;4319:16;;;;:23;:28;4315:405;;4428:22;4453:75;4498:1;:16;;;4453:27;:75::i;:::-;4542:12;;;:29;-1:-1:-1;4315:405:5;;;4675:34;1924:8;4675:15;:34;:::i;:::-;4660:12;;;:49;4315:405;4752:1;:12;;;4733:15;:31;4729:87;;4787:18;;-1:-1:-1;;;4787:18:5;;;;;;;;;;;4729:87;4897:11;;;;4876;;;:33;4997:11;;;;:18;-1:-1:-1;;;;;4984:32:5;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4970:11:5;;;:46;5031:9;5026:113;5050:1;:11;;;:18;5046:1;:22;5026:113;;;5113:1;:11;;;5125:1;5113:14;;;;;;;;:::i;:::-;;;;;;;5089:1;:11;;;5101:1;5089:14;;;;;;;;:::i;:::-;;;;;;:39;;;;5070:3;;;;;:::i;:::-;;;;5026:113;;;;5149:17;5169:114;5199:16;;5229:1;5169:114;;5255:1;5244:13;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5244:13:5;;;;;;;5169:114;;;;;-1:-1:-1;5169:114:5;;5244:13;5169:16;:114::i;:::-;5149:134;3086:2225;-1:-1:-1;;;;;;;;;3086:2225:5:o;3819:977:19:-;2813:4;;3896:7;;-1:-1:-1;;;;;2813:4:19;2799:10;:18;2795:76;;2840:20;;-1:-1:-1;;;2840:20:19;;;;;;;;;;;2795:76;2478:13:::1;::::0;::::1;;2473:76;;2514:24;;-1:-1:-1::0;;;2514:24:19::1;;;;;;;;;;;2473:76;3940:14:::2;:21:::0;4018:4:::2;::::0;4001:55:::2;::::0;20786:2:22;20782:15;;;;-1:-1:-1;;;;;;20782:15:22;4001:55:19::2;::::0;::::2;20766:66:22::0;4024:15:19::2;20848:12:22::0;;;20841:28;20885:12;;;20878:28;;;-1:-1:-1;;20922:12:22;;4001:55:19::2;;;;;;;;;;;;3991:66;;;;;;3971:86;;4112:180;4119:23;::::0;;;:12:::2;:23;::::0;;;;:33:::2;;::::0;:38;4112:180:::2;;4173:16:::0;::::2;::::0;::::2;:::i;:::-;4242:4;::::0;4225:55:::2;::::0;20786:2:22;20782:15;;;;-1:-1:-1;;;;;;20782:15:22;4225:55:19::2;::::0;::::2;20766:66:22::0;4248:15:19::2;20848:12:22::0;;;20841:28;20885:12;;;20878:28;;;;;-1:-1:-1;20922:12:22;;;-1:-1:-1;4225:55:19::2;;;;;;;;;;;;4215:66;;;;;;4203:78;;4112:180;;;4342:197;::::0;;::::2;::::0;::::2;::::0;;;;;4413:15:::2;4342:197;::::0;;::::2;::::0;;;;;;;;;4495:4:::2;4342:197:::0;;;;;;-1:-1:-1;4342:197:19;;;;;;4558:23;;;:12:::2;:23:::0;;;;;:36;;;;;;;;::::2;::::0;;;::::2;::::0;::::2;::::0;;;::::2;::::0;::::2;::::0;;-1:-1:-1;;4558:36:19::2;::::0;::::2;;::::0;;;::::2;::::0;;;;::::2;::::0;;::::2;::::0;4604:14:::2;:30:::0;;;;::::2;::::0;;;::::2;::::0;;;4644:19:::2;:30:::0;;;;;:34;4721:4;4702:52;;160:25:22;;;4342:197:19;;;;-1:-1:-1;;;;;4721:4:19;;::::2;::::0;4702:52:::2;::::0;133:18:22;4702:52:19::2;;;;;;;-1:-1:-1::0;4780:9:19;-1:-1:-1;;3819:977:19;:::o;1472:31::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1472:31:19;:::o;8272:755::-;2813:4;;8355:16;;-1:-1:-1;;;;;2813:4:19;2799:10;:18;2795:76;;2840:20;;-1:-1:-1;;;2840:20:19;;;;;;;;;;;2795:76;2478:13:::1;::::0;::::1;;2473:76;;2514:24;;-1:-1:-1::0;;;2514:24:19::1;;;;;;;;;;;2473:76;8431:14:::2;:21:::0;8383:31:::2;::::0;-1:-1:-1;;;;;8417:36:19;::::2;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;-1:-1:-1;8417:36:19::2;;8383:70;;8463:19;8510:9:::0;8505:268:::2;8529:14;:21:::0;8525:25;::::2;8505:268;;;8571:17;8591:14;8606:1;8591:17;;;;;;;;:::i;:::-;;::::0;;;::::2;::::0;;;;;::::2;::::0;8626:23;;;:12:::2;:23:::0;;;;;;;:32:::2;;::::0;8591:17;;-1:-1:-1;8626:32:19::2;;8622:141;;;8708:9;8678:14;8693:11;8678:27;;;;;;;;:::i;:::-;;::::0;;::::2;::::0;;;;;:39;8735:13;::::2;::::0;::::2;:::i;:::-;;;;8622:141;-1:-1:-1::0;8552:3:19;::::2;::::0;::::2;:::i;:::-;;;;8505:268;;;;8831:23;8871:11;-1:-1:-1::0;;;;;8857:26:19::2;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;-1:-1:-1;8857:26:19::2;;8831:52;;8898:9;8893:96;8917:11;8913:1;:15;8893:96;;;8961:14;8976:1;8961:17;;;;;;;;:::i;:::-;;;;;;;8949:6;8956:1;8949:9;;;;;;;;:::i;:::-;;::::0;;::::2;::::0;;;;;:29;8930:3;::::2;::::0;::::2;:::i;:::-;;;;8893:96;;;-1:-1:-1::0;9014:6:19;-1:-1:-1;;;8272:755:19;:::o;9712:729::-;2813:4;;-1:-1:-1;;;;;2813:4:19;2799:10;:18;2795:76;;2840:20;;-1:-1:-1;;;2840:20:19;;;;;;;;;;;2795:76;2478:13:::1;::::0;::::1;;2473:76;;2514:24;;-1:-1:-1::0;;;2514:24:19::1;;;;;;;;;;;2473:76;9809:9:::0;;3090:79:::2;;3140:18;;-1:-1:-1::0;;;3140:18:19::2;;;;;;;;;;;3090:79;9838:23:::3;::::0;;;:12:::3;:23;::::0;;;;:33:::3;;::::0;:38;;9830:68:::3;;;;-1:-1:-1::0;;;9830:68:19::3;;;;;;;:::i;:::-;9966:9;9961:267;9985:14;:21:::0;9981:25;::::3;9961:267;;;10052:9;10031:14;10046:1;10031:17;;;;;;;;:::i;:::-;;;;;;;;;:30:::0;10027:191:::3;;10101:14;10116:21:::0;;:25:::3;::::0;10140:1:::3;::::0;10116:25:::3;:::i;:::-;10101:41;;;;;;;;:::i;:::-;;;;;;;;;10081:14;10096:1;10081:17;;;;;;;;:::i;:::-;;::::0;;;::::3;::::0;;;::::3;:61:::0;10160:14:::3;:20:::0;;;::::3;;;;:::i;:::-;;;;;;;;;;;;;;;;;;10198:5;;10027:191;10008:3:::0;::::3;::::0;::::3;:::i;:::-;;;;9961:267;;;-1:-1:-1::0;10283:23:19::3;::::0;;;:12:::3;:23;::::0;;;;;;;10276:30;;;::::3;::::0;::::3;::::0;;;::::3;::::0;::::3;::::0;;;::::3;::::0;::::3;::::0;;-1:-1:-1;;10276:30:19::3;::::0;;::::3;;::::0;;;10323:12:::3;:23:::0;;;;;10316:30:::3;::::0;::::3;:::i;:::-;10363:24;::::0;;;:13:::3;:24;::::0;;;;10356:31;;;10363:24;10356:31:::3;;::::0;::::3;10363:24:::0;10356:31:::3;:::i;:::-;-1:-1:-1::0;10356:31:19::3;;::::0;::::3;::::0;;;::::3;::::0;;::::3;::::0;;;10404:30;;;-1:-1:-1;10404:19:19::3;:30;::::0;;;;10397:37;9712:729::o;6263:665::-;2642:4;;6409:5;;-1:-1:-1;;;;;2642:4:19;2628:10;:18;;;;:50;;-1:-1:-1;2674:4:19;;-1:-1:-1;;;;;2674:4:19;2650:20;2664:5;2650:13;:20::i;:::-;-1:-1:-1;;;;;2650:28:19;;;2628:50;2624:108;;;2701:20;;-1:-1:-1;;;2701:20:19;;;;;;;;;;;2624:108;2478:13:::1;::::0;::::1;;2473:76;;2514:24;;-1:-1:-1::0;;;2514:24:19::1;;;;;;;;;;;2473:76;6447:9:::0;;3090:79:::2;;3140:18;;-1:-1:-1::0;;;3140:18:19::2;;;;;;;;;;;3090:79;6476:23:::3;::::0;;;:12:::3;:23;::::0;;;;:33:::3;;::::0;:38;;6468:68:::3;;;;-1:-1:-1::0;;;6468:68:19::3;;;;;;;:::i;:::-;6555:26;6584:209;;;;;;;;6621:9;6584:209;;;;6662:16;;6584:209;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::3;::::0;;;-1:-1:-1;6584:209:19;;;-1:-1:-1;;6703:15:19::3;6584:209;::::0;;::::3;::::0;;;;6746:23;;;:12:::3;:23:::0;;6584:209;6746:23;;;:36:::3;;::::0;6584:209;;;;;;;6812:24;;;:13:::3;:24:::0;;;;;;:34;;;;;;::::3;::::0;6555:238;;-1:-1:-1;6555:238:19;;6812:34:::3;::::0;::::3;::::0;-1:-1:-1;6812:34:19::3;::::0;;::::3;:::i;:::-;-1:-1:-1::0;6812:34:19::3;::::0;;::::3;::::0;::::3;::::0;::::3;::::0;::::3;::::0;;::::3;::::0;::::3;::::0;;::::3;::::0;6888:4:::3;::::0;6870:51;;6905:15:::3;160:25:22::0;;6894:9:19;;-1:-1:-1;;;;;6888:4:19::3;::::0;6870:51:::3;::::0;148:2:22;133:18;6870:51:19::3;;;;;;;6458:470;2558:1:::2;6263:665:::0;;;;;:::o;7470:290::-;7614:18;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7614:18:19;2642:4;;7556:5;;-1:-1:-1;;;;;2642:4:19;2628:10;:18;;;;:50;;-1:-1:-1;2674:4:19;;-1:-1:-1;;;;;2674:4:19;2650:20;2664:5;2650:13;:20::i;:::-;-1:-1:-1;;;;;2650:28:19;;;2628:50;2624:108;;;2701:20;;-1:-1:-1;;;2701:20:19;;;;;;;;;;;2624:108;2478:13:::1;::::0;::::1;;2473:76;;2514:24;;-1:-1:-1::0;;;2514:24:19::1;;;;;;;;;;;2473:76;7594:9:::0;;3090:79:::2;;3140:18;;-1:-1:-1::0;;;3140:18:19::2;;;;;;;;;;;3090:79;7652:23:::3;::::0;;;:12:::3;:23;::::0;;;;:33:::3;;::::0;:38;;7644:68:::3;;;;-1:-1:-1::0;;;7644:68:19::3;;;;;;;:::i;:::-;7729:13;:24;7743:9;7729:24;;;;;;;;;;;7722:31;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::3;;;3178:1;2558::::2;7470:290:::0;;;;;:::o;5425:85:5:-;5464:13;5496:7;5489:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5425:85;:::o;3294:422:19:-;3382:13;;;;3381:14;3373:46;;;;-1:-1:-1;;;3373:46:19;;21412:2:22;3373:46:19;;;21394:21:22;21451:2;21431:18;;;21424:30;-1:-1:-1;;;21470:18:22;;;21463:49;21529:18;;3373:46:19;21210:343:22;3373:46:19;-1:-1:-1;;;;;3437:19:19;;3429:52;;;;-1:-1:-1;;;3429:52:19;;21760:2:22;3429:52:19;;;21742:21:22;21799:2;21779:18;;;21772:30;-1:-1:-1;;;21818:18:22;;;21811:50;21878:18;;3429:52:19;21558:344:22;3429:52:19;3500:4;:12;;-1:-1:-1;;;;;;3500:12:19;-1:-1:-1;;;;;3500:12:19;;;;;;;;3522:14;:32;;;3576:15;3564:9;:27;;;3601:13;:20;;-1:-1:-1;;3601:20:19;-1:-1:-1;3601:20:19;;;3645:64;;;16206:25:22;;;16262:2;16247:18;;16240:34;;;;3645:64:19;;16179:18:22;3645:64:19;;;;;;;3294:422;;:::o;7891:268::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2813:4:19;;-1:-1:-1;;;;;2813:4:19;2799:10;:18;2795:76;;2840:20;;-1:-1:-1;;;2840:20:19;;;;;;;;;;;2795:76;2478:13:::1;::::0;::::1;;2473:76;;2514:24;;-1:-1:-1::0;;;2514:24:19::1;;;;;;;;;;;2473:76;7994:9:::0;;3090:79:::2;;3140:18;;-1:-1:-1::0;;;3140:18:19::2;;;;;;;;;;;3090:79;8052:23:::3;::::0;;;:12:::3;:23;::::0;;;;:33:::3;;::::0;:38;;8044:68:::3;;;;-1:-1:-1::0;;;8044:68:19::3;;;;;;;:::i;:::-;-1:-1:-1::0;;8129:23:19::3;::::0;;;:12:::3;:23;::::0;;;;;;;;8122:30;;::::3;::::0;::::3;::::0;;;;;;::::3;::::0;::::3;::::0;;;::::3;::::0;;;;::::3;::::0;::::3;::::0;;;;;;;;::::3;::::0;::::3;::::0;::::3;;;;::::0;;;;::::3;::::0;;::::3;::::0;;;;;;7891:268::o;2543:215:6:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:6;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:6;;2700:1:::1;2672:31;::::0;::::1;6819:51:22::0;6792:18;;2672:31:6::1;6673:203:22::0;2623:91:6::1;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;5715:326:5:-;1082:16:4;;;;;;;;;;5859:7:5;1063:36:4;;;:18;:36;;;;;;;5835:5:5;;1063:36:4;;1059:97;;;1122:23;;-1:-1:-1;;;1122:23:4;;;;;;;;;;;1059:97;5886:5:5::1;:12;5902:1;5886:17:::0;5882:65:::1;;5934:1;5919:17;;;;5882:65;5957:18;5978:29;6001:5;5978:22;:29::i;:::-;6024:10;;::::0;;5715:326;-1:-1:-1;;;;5715:326:5:o;1796:162:6:-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:6;735:10:8;1855:23:6;1851:101;;1901:40;;-1:-1:-1;;;1901:40:6;;735:10:8;1901:40:6;;;6819:51:22;6792:18;;1901:40:6;6673:203:22;2912:187:6;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:6;;;-1:-1:-1;;;;;;3020:17:6;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;1308:634:12:-;1364:13;1413:14;1430:17;1441:5;1430:10;:17::i;:::-;1450:1;1430:21;1413:38;;1465:20;1499:6;-1:-1:-1;;;;;1488:18:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1488:18:12;-1:-1:-1;1465:41:12;-1:-1:-1;1595:30:12;;;1611:4;1595:30;1652:247;-1:-1:-1;;1683:5:12;-1:-1:-1;;;1782:2:12;1771:14;;1766:32;1683:5;1753:46;1843:2;1834:11;;;-1:-1:-1;1863:21:12;1652:247;1863:21;-1:-1:-1;1919:6:12;1308:634;-1:-1:-1;;;1308:634:12:o;5171:1977:3:-;5264:24;;:::i;:::-;5304:26;;:::i;:::-;5340:9;5388:174;5395:18;;;5388:174;;;5438:7;;5446:1;5438:10;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;;5438:10:3;-1:-1:-1;;;5438:17:3;;-1:-1:-1;5434:118:3;;5492:22;5500:7;;5492:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5492:22:3;-1:-1:-1;5512:1:3;;-1:-1:-1;5492:7:3;;-1:-1:-1;5492:22:3:i;:::-;5475:39;;5532:5;;5434:118;5415:3;;;;:::i;:::-;;;;5388:174;;;5572:7;5577:2;5572:7;;:::i;:::-;;;5725:54;5745:33;5753:7;;5745:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5762:6:3;;-1:-1:-1;5767:1:3;;-1:-1:-1;5762:6:3;;-1:-1:-1;5762:6:3;:::i;:::-;;-1:-1:-1;5762:6:3;5770:7;5775:2;5762:6;5770:7;:::i;:::-;;;;5745;:33::i;:::-;5725:19;:54::i;:::-;-1:-1:-1;;;;;5716:63:3;:6;;;:63;5789:6;5794:1;5789:6;;:::i;:::-;;-1:-1:-1;5882:18:3;;;:40;;;;;5904:7;;5912:1;5904:10;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;5904:18:3;;-1:-1:-1;;;5904:18:3;;5882:40;5878:336;;;5955:1;5938:266;5958:18;;;5938:266;;;6005:7;;6013:1;6005:10;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;;6005:10:3;-1:-1:-1;;;6005:18:3;;-1:-1:-1;6001:189:3;;6061:22;6069:7;;6061:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6078:1:3;;-1:-1:-1;6081:1:3;;-1:-1:-1;6061:7:3;;-1:-1:-1;6061:22:3:i;:::-;6047:11;;;:36;6109:5;:1;6113;6109:5;:::i;:::-;6105:9;;6166:5;;6001:189;5978:3;;;;:::i;:::-;;;;5938:266;;;;5878:336;6224:3;;;;:::i;:::-;;;;6264:30;6276:7;;6264:30;;;;;;;;;;;;;-1:-1:-1;;;6264:30:3;;;6292:1;6264:11;:30::i;:::-;6252:1;:5;;6251:43;;;;;;;;6321:34;6333:7;;6321:34;;;;;;;;;;;;;-1:-1:-1;;;6321:34:3;;;6353:1;6321:11;:34::i;:::-;6305:1;:9;;6304:51;;;;;;;;6365:20;6410:35;6422:7;;6410:35;;;;;;;;;;;;;-1:-1:-1;;;6410:35:3;;;6443:1;6410:11;:35::i;:::-;6395:50;-1:-1:-1;6395:50:3;-1:-1:-1;6467:19:3;6395:50;6467:10;:19::i;:::-;6455:9;;;:31;6511:32;;;;;;;;;;;;-1:-1:-1;;;6511:32:3;;;;;;6523:7;;;;6541:1;6511:11;:32::i;:::-;6497:7;;;6496:47;;;6557:14;;6496:47;;-1:-1:-1;6574:1:3;-1:-1:-1;6553:81:3;;;6598:25;;-1:-1:-1;;;6598:25:3;;;;;;;;;;;6553:81;6661:36;6673:7;;6661:36;;;;;;;;;;;;;-1:-1:-1;;;6661:36:3;;;6695:1;6661:11;:36::i;:::-;6644:1;:10;;6643:54;;;;;;;;6731:42;6743:7;;6731:42;;;;;;;;;;;;;-1:-1:-1;;;6731:42:3;;;6771:1;6731:11;:42::i;:::-;6708:1;:16;;6707:66;;;;;;;;6802:37;6814:7;;6802:37;;;;;;;;;;;;;-1:-1:-1;;;6802:37:3;;;6837:1;6802:11;:37::i;:::-;6784:1;:11;;6783:56;;;;;;;;6868:37;6880:7;;6868:37;;;;;;;;;;;;;-1:-1:-1;;;6868:37:3;;;6903:1;6868:11;:37::i;:::-;6850:1;:11;;6849:56;;;;;;;;6959:12;6992:36;7004:7;;6992:36;;;;;;;;;;;;;-1:-1:-1;;;6992:36:3;;;7026:1;6992:11;:36::i;:::-;6981:47;-1:-1:-1;;7042:9:3;;;7038:85;;7086:26;7098:7;;7107:4;7086:11;:26::i;:::-;7068:11;;;7067:45;;;;;-1:-1:-1;7038:85:3;-1:-1:-1;7140:1:3;;-1:-1:-1;;;5171:1977:3;;;;;:::o;7232:512::-;7323:7;7365:372;7410:30;7421:18;7429:3;7434:1;7437;7421:7;:18::i;:::-;7410:10;:30::i;:::-;7465;7476:18;7484:3;7489:1;7492;7476:7;:18::i;7465:30::-;7520:31;7531:19;7539:3;7544:1;7547:2;7531:7;:19::i;7520:31::-;7576:32;7587:20;7595:3;7600:2;7604;7587:7;:20::i;7576:32::-;7633;7644:20;7652:3;7657:2;7661;7644:7;:20::i;7633:32::-;7690;7701:20;7709:3;7714:2;7718;7701:7;:20::i;7690:32::-;7365:20;:372::i;8874:395:2:-;9033:12;9058;9072:23;-1:-1:-1;;;;;;;;;;9099:18:2;9142:3;9147:5;9154:9;9165:14;9131:49;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;9131:49:2;;;;;;;;;;9099:91;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9057:133;;;;9208:7;9200:35;;;;-1:-1:-1;;;9200:35:2;;23059:2:22;9200:35:2;;;23041:21:22;23098:2;23078:18;;;23071:30;-1:-1:-1;;;23117:18:22;;;23110:45;23172:18;;9200:35:2;22857:339:22;9200:35:2;9252:10;8874:395;-1:-1:-1;;;;;;8874:395:2:o;7318:661:5:-;7433:16;;:::i;:::-;7465:29;7497:106;7527:16;;7557:1;7497:106;;7572:5;7497:106;;;;;;;;;;;;:16;:106::i;:::-;7465:138;;7613:18;7645:16;7634:41;;;;;;;;;;;;:::i;:::-;7613:62;;7763:7;7747:25;;;;;;:::i;:::-;;;;;;;;7733:1;:8;;;7717:26;;;;;;:55;7713:118;;7795:25;;-1:-1:-1;;;7795:25:5;;;;;;;;;;;7713:118;7887:15;7872:1;:12;;;:30;7868:86;;;7925:18;;-1:-1:-1;;;7925:18:5;;;;;;;;;;;7868:86;7971:1;7318:661;-1:-1:-1;;;7318:661:5:o;29154:916:13:-;29207:7;;-1:-1:-1;;;29282:17:13;;29278:103;;-1:-1:-1;;;29319:17:13;;;-1:-1:-1;29364:2:13;29354:12;29278:103;29407:8;29398:5;:17;29394:103;;29444:8;29435:17;;;-1:-1:-1;29480:2:13;29470:12;29394:103;29523:8;29514:5;:17;29510:103;;29560:8;29551:17;;;-1:-1:-1;29596:2:13;29586:12;29510:103;29639:7;29630:5;:16;29626:100;;29675:7;29666:16;;;-1:-1:-1;29710:1:13;29700:11;29626:100;29752:7;29743:5;:16;29739:100;;29788:7;29779:16;;;-1:-1:-1;29823:1:13;29813:11;29739:100;29865:7;29856:5;:16;29852:100;;29901:7;29892:16;;;-1:-1:-1;29936:1:13;29926:11;29852:100;29978:7;29969:5;:16;29965:66;;30015:1;30005:11;30057:6;29154:916;-1:-1:-1;;29154:916:13:o;2011:365:3:-;2137:12;2161:19;2193:21;2204:10;2193:8;:21;:::i;:::-;-1:-1:-1;;;;;2183:32:3;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2183:32:3;-1:-1:-1;2161:54:3;-1:-1:-1;2242:10:3;2225:122;2258:8;2254:1;:12;:30;;;;;2274:3;:10;2270:1;:14;2254:30;2225:122;;;2330:3;2334:1;2330:6;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;;2330:6:3;2305;2312:14;2316:10;2312:1;:14;:::i;:::-;2305:22;;;;;;;;:::i;:::-;;;;:31;-1:-1:-1;;;;;2305:31:3;;;;;;;;-1:-1:-1;2286:3:3;;;;:::i;:::-;;;;2225:122;;;-1:-1:-1;2363:6:3;2011:365;-1:-1:-1;;;;2011:365:3:o;973:525::-;1065:7;1092:1;:8;1104:2;1092:14;1088:85;;1129:33;;-1:-1:-1;;;1129:33:3;;;;;;;;;;;1088:85;1183:14;1221:1;1210;:8;:12;;;;:::i;:::-;-1:-1:-1;;;;;1200:23:3;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1200:23:3;;1183:40;;1238:9;1233:223;1268:1;1257;:8;:12;;;;:::i;:::-;1253:1;:16;1233:223;;;1398:33;1417:1;1419:5;1423:1;1419;:5;:::i;:::-;:9;;1427:1;1419:9;:::i;:::-;1417:12;;;;;;;;:::i;:::-;;;;;;;1398;:33::i;:::-;1321:29;1340:1;1342:5;1346:1;1342;:5;:::i;1321:29::-;:54;;1373:2;1321:54;:::i;:::-;:110;;;;:::i;:::-;1297:148;;1290:1;1292;1290:4;;;;;;;;:::i;:::-;;;;:155;-1:-1:-1;;;;;1290:155:3;;;;;;;;-1:-1:-1;1271:3:3;;;:::i;:::-;;;1233:223;;;-1:-1:-1;1480:10:3;1488:1;1480:10;:::i;:::-;1472:19;;;973:525;-1:-1:-1;;;973:525:3:o;2922:874::-;3047:12;3061:7;3092:1;3103:498;3110:14;;;3103:498;;;3149:3;;3153:1;3149:6;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;;3149:6:3;-1:-1:-1;;;3149:13:3;;-1:-1:-1;3145:446:3;;3287:4;3271:22;;;;;;3248:18;3256:3;;3248:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3261:1:3;;-1:-1:-1;3264:1:3;;-1:-1:-1;3248:7:3;;-1:-1:-1;3248:18:3:i;:::-;3238:29;;;;;;:55;3234:116;;-1:-1:-1;;3317:14:3;;;;;;;;;-1:-1:-1;3317:14:3;;;-1:-1:-1;3329:1:3;3317:14;;3234:116;3394:3;;;;:::i;:::-;;-1:-1:-1;;3419:14:3;;;:31;;;;;3437:3;;3441:1;3437:6;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;3437:13:3;;-1:-1:-1;;;3437:13:3;3419:31;3415:115;;;3508:3;;;;:::i;:::-;;;;3415:115;3552:1;3548:5;;3571;;3145:446;3126:3;;;;:::i;:::-;;;;3103:498;;;3618:14;;;3611:139;;;3657:3;;3661:1;3657:6;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;;3657:6:3;-1:-1:-1;;;3657:14:3;;-1:-1:-1;3653:87:3;;3699:18;3707:3;;3699:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3712:1:3;;-1:-1:-1;3715:1:3;;-1:-1:-1;3699:7:3;;-1:-1:-1;3699:18:3:i;:::-;3719:5;:1;3723;3719:5;:::i;:::-;3691:34;;;;;;;3653:87;3634:3;;;;:::i;:::-;;;;3611:139;;;3767:18;3775:3;;3767:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3780:1:3;;-1:-1:-1;3783:1:3;;-1:-1:-1;3767:7:3;;-1:-1:-1;3767:18:3:i;:::-;3759:30;-1:-1:-1;3787:1:3;-1:-1:-1;2922:874:3;;;;;;;;:::o;2469:253::-;2528:7;;;2575:116;2599:1;:8;2595:1;:12;2575:116;;;2675:4;2666:1;2668;2666:4;;;;;;;;:::i;:::-;;;;;2652:27;;;2666:4;;2652:27;:::i;:::-;2637:11;:6;2646:2;2637:11;:::i;:::-;:43;;;;:::i;:::-;2628:52;-1:-1:-1;2609:3:3;;;;:::i;:::-;;;;2575:116;;;-1:-1:-1;2708:6:3;2469:253;-1:-1:-1;;2469:253:3:o;3934:1100::-;4033:14;4049:7;4132:1;4049:7;4170:294;4181:14;4194:1;4181:3;:14;:::i;:::-;4177:1;:18;4170:294;;;4220:3;;4224:1;4220:6;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;4220:13:3;;-1:-1:-1;;;4220:13:3;:34;;;;-1:-1:-1;4237:3:3;;4241:5;:1;4245;4241:5;:::i;:::-;4237:10;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;4237:17:3;;-1:-1:-1;;;4237:17:3;4220:34;4216:148;;;4274:6;4279:1;4274:6;;:::i;:::-;;-1:-1:-1;4298:7:3;;;;:::i;:::-;;;;4216:148;;;4344:5;;4216:148;4384:14;;;:32;;;;;4402:3;;4406:1;4402:6;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;4402:14:3;;4412:4;4402:14;;;;4384:32;4377:77;;;4436:3;;;;:::i;:::-;;;;4377:77;;;4197:3;;;;:::i;:::-;;;;4170:294;;;4506:21;4542:5;-1:-1:-1;;;;;4530:18:3;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4506:42;;4562:1;4558:5;;4578:9;4573:427;4597:14;4610:1;4597:3;:14;:::i;:::-;4593:1;:18;:32;;;;;4620:5;4615:1;:10;;4593:32;4573:427;;;4650:3;;4654:1;4650:6;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;4650:13:3;;-1:-1:-1;;;4650:13:3;:34;;;;-1:-1:-1;4667:3:3;;4671:5;:1;4675;4671:5;:::i;:::-;4667:10;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;4667:17:3;;-1:-1:-1;;;4667:17:3;4650:34;4646:82;;;4708:5;:1;4712;4708:5;:::i;:::-;4704:9;;4646:82;4748:14;;;:32;;;;;4766:3;;4770:1;4766:6;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;4766:14:3;;4776:4;4766:14;;;;4748:32;4741:77;;;4800:3;;;;:::i;:::-;;;;4741:77;;;4843:18;4851:3;;4843:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4856:1:3;;-1:-1:-1;4859:1:3;;-1:-1:-1;4843:7:3;;-1:-1:-1;4843:18:3:i;:::-;4831:6;4838:1;4831:9;;;;;;;;:::i;:::-;;;;;;:30;;;;4875:3;;;;;:::i;:::-;;-1:-1:-1;;4896:15:3;;;4892:98;;4931:3;;;;:::i;:::-;;;;4892:98;4627:3;;;;:::i;:::-;;;;4573:427;;;-1:-1:-1;5017:6:3;5025:1;;-1:-1:-1;3934:1100:3;;-1:-1:-1;;;;;3934:1100:3:o;798:1522:0:-;973:17;354:4;1091:194;1117:4;1113:8;;:1;:8;;;1091:194;;;1146:13;1157:1;1146:10;:13::i;:::-;1142:133;;;1179:21;1192:8;1179:21;;:::i;:::-;;;1142:133;;;1239:21;1252:8;1239:21;;:::i;:::-;;;1142:133;1123:3;;;;:::i;:::-;;;;1091:194;;;1422:32;;:::i;:::-;1484:2;1464:22;;1500:16;1511:4;1500:10;:16::i;:::-;1496:122;;;1552:2;1532:17;;;:22;1496:122;;;1605:2;1585:17;;;:22;1496:122;1647:2;1627:17;;;:22;;;1679:2;1659:17;;;:22;;;1691:17;;;:22;;;1723:17;;;:22;;;1755:17;;;:22;;;1787:17;;;:22;;;1819:17;;;:22;;;1851:17;;;:22;;;1883:18;;;:23;1916:18;;;:23;1959:1;;-1:-1:-1;1950:96:0;1966:5;1962:9;;:1;:9;;;1950:96;;;2005:14;2020:5;2024:1;2020;:5;:::i;:::-;2005:21;;;;;;;;;:::i;:::-;;;;;:30;;2029:6;2005:30;:::i;:::-;1992:43;;;;;;:::i;:::-;;-1:-1:-1;1973:3:0;;;;:::i;:::-;;;;1950:96;;;2091:7;2097:1;2091:3;:7;:::i;:::-;2084:24;;:15;;2102:6;2084:24;:::i;:::-;2071:37;;;;;;:::i;:::-;;-1:-1:-1;2148:22:0;:12;;;2163:7;2148:22;:::i;:::-;2135:35;;;;;;:::i;:::-;;-1:-1:-1;2212:26:0;:14;;;2229:9;2212:26;:::i;:::-;2199:39;;;;;;:::i;:::-;;-1:-1:-1;2267:19:0;;;;2199:39;2267:19;:::i;10331:395:2:-;10491:12;10516;10530:22;-1:-1:-1;;;;;;;;;;10556:18:2;10599:3;10604:5;10611:10;10623:14;10588:50;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;10588:50:2;;;;;;;;;;10556:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10515:133;;;;10666:7;10658:35;;;;-1:-1:-1;;;10658:35:2;;28305:2:22;10658:35:2;;;28287:21:22;28344:2;28324:18;;;28317:30;-1:-1:-1;;;28363:18:22;;;28356:45;28418:18;;10658:35:2;28103:339:22;1504:459:3;1558:5;-1:-1:-1;;;1579:9:3;;;;-1:-1:-1;;;;;;1579:24:3;;;;;:52;;-1:-1:-1;;;;1607:9:3;;;;-1:-1:-1;;;;;;1607:24:3;;;1579:52;1575:112;;;1654:22;1658:18;1654:1;:22;:::i;1575:112::-;-1:-1:-1;;;1700:9:3;;;;-1:-1:-1;;;;;;1700:24:3;;;;;:52;;-1:-1:-1;;;;1728:9:3;;;;-1:-1:-1;;;;;;1728:24:3;;;1700:52;1696:117;;;1784:18;1775:6;1780:1;1775:2;:6;:::i;:::-;:27;;;;:::i;1696:117::-;-1:-1:-1;;;1826:9:3;;;;-1:-1:-1;;;;;;1826:24:3;;;;;:52;;-1:-1:-1;;;;1854:9:3;;;;-1:-1:-1;;;;;;1854:24:3;;;1826:52;1822:117;;;1910:18;1901:6;1906:1;1901:2;:6;:::i;1822:117::-;-1:-1:-1;1955:1:3;;1504:459;-1:-1:-1;1504:459:3:o;365:288:0:-;421:4;441:8;448:1;441:4;:8;:::i;:::-;:13;;;437:56;;-1:-1:-1;477:5:0;;365:288;-1:-1:-1;365:288:0:o;437:56::-;506:10;513:3;506:4;:10;:::i;:::-;:15;;;502:57;;-1:-1:-1;544:4:0;;365:288;-1:-1:-1;365:288:0:o;502:57::-;572:10;579:3;572:4;:10;:::i;:::-;:15;;;568:58;;-1:-1:-1;610:5:0;;365:288;-1:-1:-1;365:288:0:o;568:58::-;-1:-1:-1;642:4:0;;365:288;-1:-1:-1;365:288:0:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;196:180:22;255:6;308:2;296:9;287:7;283:23;279:32;276:52;;;324:1;321;314:12;276:52;-1:-1:-1;347:23:22;;196:180;-1:-1:-1;196:180:22:o;381:250::-;466:1;476:113;490:6;487:1;484:13;476:113;;;566:11;;;560:18;547:11;;;540:39;512:2;505:10;476:113;;;-1:-1:-1;;623:1:22;605:16;;598:27;381:250::o;636:270::-;677:3;715:5;709:12;742:6;737:3;730:19;758:76;827:6;820:4;815:3;811:14;804:4;797:5;793:16;758:76;:::i;:::-;888:2;867:15;-1:-1:-1;;863:29:22;854:39;;;;895:4;850:50;;636:270;-1:-1:-1;;636:270:22:o;911:1354::-;1111:4;1140:2;1180;1169:9;1165:18;1210:2;1199:9;1192:21;1233:6;1268;1262:13;1299:6;1291;1284:22;1325:2;1315:12;;1358:2;1347:9;1343:18;1336:25;;1420:2;1410:6;1407:1;1403:14;1392:9;1388:30;1384:39;1458:2;1450:6;1446:15;1479:1;1489:747;1503:6;1500:1;1497:13;1489:747;;;1596:2;1592:7;1580:9;1572:6;1568:22;1564:36;1559:3;1552:49;1630:6;1624:13;1660:4;1703:2;1697:9;1734:2;1726:6;1719:18;1764:47;1807:2;1799:6;1795:15;1781:12;1764:47;:::i;:::-;1750:61;;;1860:2;1856;1852:11;1846:18;1913:6;1905;1901:19;1896:2;1888:6;1884:15;1877:44;1948:40;1981:6;1965:14;1948:40;:::i;:::-;2031:11;;;2025:18;2008:15;;;2001:43;2067:4;2114:11;;;2108:18;2091:15;;;;2084:43;;;;-1:-1:-1;;2214:12:22;;;;2179:15;;;;1525:1;1518:9;1489:747;;;-1:-1:-1;2253:6:22;;911:1354;-1:-1:-1;;;;;;;;911:1354:22:o;2270:347::-;2321:8;2331:6;2385:3;2378:4;2370:6;2366:17;2362:27;2352:55;;2403:1;2400;2393:12;2352:55;-1:-1:-1;2426:20:22;;-1:-1:-1;;;;;2458:30:22;;2455:50;;;2501:1;2498;2491:12;2455:50;2538:4;2530:6;2526:17;2514:29;;2590:3;2583:4;2574:6;2566;2562:19;2558:30;2555:39;2552:59;;;2607:1;2604;2597:12;2552:59;2270:347;;;;;:::o;2622:785::-;2721:6;2729;2737;2745;2753;2806:2;2794:9;2785:7;2781:23;2777:32;2774:52;;;2822:1;2819;2812:12;2774:52;2858:9;2845:23;2835:33;;2919:2;2908:9;2904:18;2891:32;-1:-1:-1;;;;;2983:2:22;2975:6;2972:14;2969:34;;;2999:1;2996;2989:12;2969:34;3038:58;3088:7;3079:6;3068:9;3064:22;3038:58;:::i;:::-;3115:8;;-1:-1:-1;3012:84:22;-1:-1:-1;3203:2:22;3188:18;;3175:32;;-1:-1:-1;3219:16:22;;;3216:36;;;3248:1;3245;3238:12;3216:36;;3287:60;3339:7;3328:8;3317:9;3313:24;3287:60;:::i;:::-;2622:785;;;;-1:-1:-1;2622:785:22;;-1:-1:-1;3366:8:22;;3261:86;2622:785;-1:-1:-1;;;2622:785:22:o;3412:127::-;3473:10;3468:3;3464:20;3461:1;3454:31;3504:4;3501:1;3494:15;3528:4;3525:1;3518:15;3544:253;3616:2;3610:9;3658:4;3646:17;;-1:-1:-1;;;;;3678:34:22;;3714:22;;;3675:62;3672:88;;;3740:18;;:::i;:::-;3776:2;3769:22;3544:253;:::o;3802:275::-;3873:2;3867:9;3938:2;3919:13;;-1:-1:-1;;3915:27:22;3903:40;;-1:-1:-1;;;;;3958:34:22;;3994:22;;;3955:62;3952:88;;;4020:18;;:::i;:::-;4056:2;4049:22;3802:275;;-1:-1:-1;3802:275:22:o;4082:186::-;4130:4;-1:-1:-1;;;;;4155:6:22;4152:30;4149:56;;;4185:18;;:::i;:::-;-1:-1:-1;4251:2:22;4230:15;-1:-1:-1;;4226:29:22;4257:4;4222:40;;4082:186::o;4273:462::-;4315:5;4368:3;4361:4;4353:6;4349:17;4345:27;4335:55;;4386:1;4383;4376:12;4335:55;4422:6;4409:20;4453:48;4469:31;4497:2;4469:31;:::i;:::-;4453:48;:::i;:::-;4526:2;4517:7;4510:19;4572:3;4565:4;4560:2;4552:6;4548:15;4544:26;4541:35;4538:55;;;4589:1;4586;4579:12;4538:55;4654:2;4647:4;4639:6;4635:17;4628:4;4619:7;4615:18;4602:55;4702:1;4677:16;;;4695:4;4673:27;4666:38;;;;4681:7;4273:462;-1:-1:-1;;;4273:462:22:o;4740:320::-;4808:6;4861:2;4849:9;4840:7;4836:23;4832:32;4829:52;;;4877:1;4874;4867:12;4829:52;4917:9;4904:23;-1:-1:-1;;;;;4942:6:22;4939:30;4936:50;;;4982:1;4979;4972:12;4936:50;5005:49;5046:7;5037:6;5026:9;5022:22;5005:49;:::i;:::-;4995:59;4740:320;-1:-1:-1;;;;4740:320:22:o;5065:632::-;5236:2;5288:21;;;5358:13;;5261:18;;;5380:22;;;5207:4;;5236:2;5459:15;;;;5433:2;5418:18;;;5207:4;5502:169;5516:6;5513:1;5510:13;5502:169;;;5577:13;;5565:26;;5646:15;;;;5611:12;;;;5538:1;5531:9;5502:169;;;-1:-1:-1;5688:3:22;;5065:632;-1:-1:-1;;;;;;5065:632:22:o;5894:248::-;5962:6;5970;6023:2;6011:9;6002:7;5998:23;5994:32;5991:52;;;6039:1;6036;6029:12;5991:52;-1:-1:-1;;6062:23:22;;;6132:2;6117:18;;;6104:32;;-1:-1:-1;5894:248:22:o;6147:521::-;6396:3;6385:9;6378:22;6359:4;6423:45;6463:3;6452:9;6448:19;6440:6;6423:45;:::i;:::-;6516:9;6508:6;6504:22;6499:2;6488:9;6484:18;6477:50;6544:32;6569:6;6561;6544:32;:::i;:::-;6607:2;6592:18;;6585:34;;;;-1:-1:-1;;6650:2:22;6635:18;6628:34;6536:40;6147:521;-1:-1:-1;;6147:521:22:o;6881:432::-;7112:6;7101:9;7094:25;7155:3;7150:2;7139:9;7135:18;7128:31;7075:4;7176:45;7216:3;7205:9;7201:19;7193:6;7176:45;:::i;:::-;7252:2;7237:18;;7230:34;;;;-1:-1:-1;7295:2:22;7280:18;7273:34;7168:53;6881:432;-1:-1:-1;;6881:432:22:o;7740:131::-;-1:-1:-1;;;;;7815:31:22;;7805:42;;7795:70;;7861:1;7858;7851:12;7876:247;7935:6;7988:2;7976:9;7967:7;7963:23;7959:32;7956:52;;;8004:1;8001;7994:12;7956:52;8043:9;8030:23;8062:31;8087:5;8062:31;:::i;8128:571::-;8239:6;8247;8255;8299:9;8290:7;8286:23;8329:3;8325:2;8321:12;8318:32;;;8346:1;8343;8336:12;8318:32;8386:9;8373:23;-1:-1:-1;;;;;8411:6:22;8408:30;8405:50;;;8451:1;8448;8441:12;8405:50;8490:58;8540:7;8531:6;8520:9;8516:22;8490:58;:::i;:::-;8567:8;;-1:-1:-1;8464:84:22;-1:-1:-1;;8636:2:22;-1:-1:-1;;8618:16:22;;8614:25;8611:45;;;8652:1;8649;8642:12;8611:45;;8690:2;8679:9;8675:18;8665:28;;8128:571;;;;;:::o;8704:217::-;8851:2;8840:9;8833:21;8814:4;8871:44;8911:2;8900:9;8896:18;8888:6;8871:44;:::i;9293:696::-;9390:6;9398;9406;9414;9467:2;9455:9;9446:7;9442:23;9438:32;9435:52;;;9483:1;9480;9473:12;9435:52;9519:9;9506:23;9496:33;;9580:2;9569:9;9565:18;9552:32;-1:-1:-1;;;;;9644:2:22;9636:6;9633:14;9630:34;;;9660:1;9657;9650:12;9630:34;9699:58;9749:7;9740:6;9729:9;9725:22;9699:58;:::i;:::-;9776:8;;-1:-1:-1;9673:84:22;-1:-1:-1;9864:2:22;9849:18;;9836:32;;-1:-1:-1;9880:16:22;;;9877:36;;;9909:1;9906;9899:12;9877:36;;9932:51;9975:7;9964:8;9953:9;9949:24;9932:51;:::i;:::-;9922:61;;;9293:696;;;;;;;:::o;9994:388::-;10071:6;10079;10132:2;10120:9;10111:7;10107:23;10103:32;10100:52;;;10148:1;10145;10138:12;10100:52;10184:9;10171:23;10161:33;;10245:2;10234:9;10230:18;10217:32;-1:-1:-1;;;;;10264:6:22;10261:30;10258:50;;;10304:1;10301;10294:12;10258:50;10327:49;10368:7;10359:6;10348:9;10344:22;10327:49;:::i;:::-;10317:59;;;9994:388;;;;;:::o;10387:555::-;10574:2;10563:9;10556:21;10619:6;10613:13;10608:2;10597:9;10593:18;10586:41;10537:4;10674:2;10666:6;10662:15;10656:22;10714:4;10709:2;10698:9;10694:18;10687:32;10742:51;10788:3;10777:9;10773:19;10759:12;10742:51;:::i;:::-;10728:65;;10847:2;10839:6;10835:15;10829:22;10824:2;10813:9;10809:18;10802:50;10908:2;10900:6;10896:15;10890:22;10883:4;10872:9;10868:20;10861:52;10930:6;10922:14;;;10387:555;;;;:::o;11649:315::-;11717:6;11725;11778:2;11766:9;11757:7;11753:23;11749:32;11746:52;;;11794:1;11791;11784:12;11746:52;11833:9;11820:23;11852:31;11877:5;11852:31;:::i;:::-;11902:5;11954:2;11939:18;;;;11926:32;;-1:-1:-1;;;11649:315:22:o;12485:341::-;12687:2;12669:21;;;12726:2;12706:18;;;12699:30;-1:-1:-1;;;12760:2:22;12745:18;;12738:47;12817:2;12802:18;;12485:341::o;12831:380::-;12910:1;12906:12;;;;12953;;;12974:61;;13028:4;13020:6;13016:17;13006:27;;12974:61;13081:2;13073:6;13070:14;13050:18;13047:38;13044:161;;13127:10;13122:3;13118:20;13115:1;13108:31;13162:4;13159:1;13152:15;13190:4;13187:1;13180:15;13687:544;13788:2;13783:3;13780:11;13777:448;;;13824:1;13849:5;13845:2;13838:17;13894:4;13890:2;13880:19;13964:2;13952:10;13948:19;13945:1;13941:27;13935:4;13931:38;14000:4;13988:10;13985:20;13982:47;;;-1:-1:-1;14023:4:22;13982:47;14078:2;14073:3;14069:12;14066:1;14062:20;14056:4;14052:31;14042:41;;14133:82;14151:2;14144:5;14141:13;14133:82;;;14196:17;;;14177:1;14166:13;14133:82;;;14137:3;;;13777:448;13687:544;;;:::o;14407:1348::-;14531:3;14525:10;-1:-1:-1;;;;;14550:6:22;14547:30;14544:56;;;14580:18;;:::i;:::-;14609:96;14698:6;14658:38;14690:4;14684:11;14658:38;:::i;:::-;14652:4;14609:96;:::i;:::-;14760:4;;14824:2;14813:14;;14841:1;14836:662;;;;15542:1;15559:6;15556:89;;;-1:-1:-1;15611:19:22;;;15605:26;15556:89;-1:-1:-1;;14364:1:22;14360:11;;;14356:24;14352:29;14342:40;14388:1;14384:11;;;14339:57;15658:81;;14806:943;;14836:662;13634:1;13627:14;;;13671:4;13658:18;;-1:-1:-1;;14872:20:22;;;14989:236;15003:7;15000:1;14997:14;14989:236;;;15092:19;;;15086:26;15071:42;;15184:27;;;;15152:1;15140:14;;;;15019:19;;14989:236;;;14993:3;15253:6;15244:7;15241:19;15238:201;;;15314:19;;;15308:26;-1:-1:-1;;15397:1:22;15393:14;;;15409:3;15389:24;15385:37;15381:42;15366:58;15351:74;;15238:201;-1:-1:-1;;;;;15485:1:22;15469:14;;;15465:22;15452:36;;-1:-1:-1;14407:1348:22:o;15760:127::-;15821:10;15816:3;15812:20;15809:1;15802:31;15852:4;15849:1;15842:15;15876:4;15873:1;15866:15;15892:135;15931:3;15952:17;;;15949:43;;15972:18;;:::i;:::-;-1:-1:-1;16019:1:22;16008:13;;15892:135::o;16993:681::-;17313:66;17308:3;17301:79;17283:3;17409:6;17403:13;17425:75;17493:6;17488:2;17483:3;17479:12;17472:4;17464:6;17460:17;17425:75;:::i;:::-;17519:16;;17578:6;17570;17565:2;17557:11;;17544:41;17648:1;17608:15;;17625:2;17604:24;17637:13;;;-1:-1:-1;17604:24:22;;16993:681;-1:-1:-1;;;16993:681:22:o;18082:844::-;18212:3;18241:1;18274:6;18268:13;18304:36;18330:9;18304:36;:::i;:::-;18359:1;18376:18;;;18403:133;;;;18550:1;18545:356;;;;18369:532;;18403:133;-1:-1:-1;;18436:24:22;;18424:37;;18509:14;;18502:22;18490:35;;18481:45;;;-1:-1:-1;18403:133:22;;18545:356;18576:6;18573:1;18566:17;18606:4;18651:2;18648:1;18638:16;18676:1;18690:165;18704:6;18701:1;18698:13;18690:165;;;18782:14;;18769:11;;;18762:35;18825:16;;;;18719:10;;18690:165;;;18694:3;;;18884:6;18879:3;18875:16;18868:23;;18369:532;-1:-1:-1;18917:3:22;;18082:844;-1:-1:-1;;;;;;18082:844:22:o;18931:125::-;18996:9;;;19017:10;;;19014:36;;;19030:18;;:::i;19061:127::-;19122:10;19117:3;19113:20;19110:1;19103:31;19153:4;19150:1;19143:15;19177:4;19174:1;19167:15;19193:1383;19339:4;19368:2;19397;19386:9;19379:21;19435:6;19429:13;19478:4;19473:2;19462:9;19458:18;19451:32;19506:51;19552:3;19541:9;19537:19;19523:12;19506:51;:::i;:::-;19492:65;;19638:1;19634;19629:3;19625:11;19621:19;19615:2;19607:6;19603:15;19597:22;19593:48;19588:2;19577:9;19573:18;19566:76;19696:2;19688:6;19684:15;19678:22;19673:2;19662:9;19658:18;19651:50;19750:2;19742:6;19738:15;19732:22;19777:2;19773:7;19845:2;19833:9;19825:6;19821:22;19817:31;19811:3;19800:9;19796:19;19789:60;19872:40;19905:6;19889:14;19872:40;:::i;:::-;19961:3;19949:16;;19943:23;20008:22;;;20004:31;;19997:4;19982:20;;19975:61;20085:21;;20115:22;;;19858:54;;-1:-1:-1;20250:23:22;;;-1:-1:-1;20153:15:22;;;;20211:1;20207:14;;;20195:27;;20191:36;;20291:1;20301:246;20315:6;20312:1;20309:13;20301:246;;;20401:2;20392:6;20384;20380:19;20376:28;20371:3;20364:41;20428:39;20460:6;20451;20445:13;20428:39;:::i;:::-;20490:15;;;;20525:12;;;;20418:49;-1:-1:-1;20337:1:22;20330:9;20301:246;;;-1:-1:-1;20564:6:22;19193:1383;-1:-1:-1;;;;;;;;;19193:1383:22:o;20945:128::-;21012:9;;;21033:11;;;21030:37;;;21047:18;;:::i;21078:127::-;21139:10;21134:3;21130:20;21127:1;21120:31;21170:4;21167:1;21160:15;21194:4;21191:1;21184:15;21907:127;21968:10;21963:3;21959:20;21956:1;21949:31;21999:4;21996:1;21989:15;22023:4;22020:1;22013:15;22039:521;22288:6;22277:9;22270:25;22331:6;22326:2;22315:9;22311:18;22304:34;22374:3;22369:2;22358:9;22354:18;22347:31;22251:4;22401:45;22441:3;22430:9;22426:19;22418:6;22401:45;:::i;:::-;22494:9;22486:6;22482:22;22477:2;22466:9;22462:18;22455:50;22522:32;22547:6;22539;22522:32;:::i;:::-;22514:40;22039:521;-1:-1:-1;;;;;;;22039:521:22:o;22565:287::-;22694:3;22732:6;22726:13;22748:66;22807:6;22802:3;22795:4;22787:6;22783:17;22748:66;:::i;:::-;22830:16;;;;;22565:287;-1:-1:-1;;22565:287:22:o;23201:442::-;23255:5;23308:3;23301:4;23293:6;23289:17;23285:27;23275:55;;23326:1;23323;23316:12;23275:55;23355:6;23349:13;23386:48;23402:31;23430:2;23402:31;:::i;23386:48::-;23459:2;23450:7;23443:19;23505:3;23498:4;23493:2;23485:6;23481:15;23477:26;23474:35;23471:55;;;23522:1;23519;23512:12;23471:55;23535:77;23609:2;23602:4;23593:7;23589:18;23582:4;23574:6;23570:17;23535:77;:::i;23648:138::-;23727:13;;23749:31;23727:13;23749:31;:::i;:::-;23648:138;;;:::o;23791:951::-;23855:5;23908:3;23901:4;23893:6;23889:17;23885:27;23875:55;;23926:1;23923;23916:12;23875:55;23955:6;23949:13;23981:4;-1:-1:-1;;;;;24041:2:22;24037;24034:10;24031:36;;;24047:18;;:::i;:::-;24093:2;24090:1;24086:10;24116:28;24140:2;24136;24132:11;24116:28;:::i;:::-;24178:15;;;24248;;;24244:24;;;24209:12;;;;24280:15;;;24277:35;;;24308:1;24305;24298:12;24277:35;24344:2;24336:6;24332:15;24321:26;;24356:357;24372:6;24367:3;24364:15;24356:357;;;24451:3;24445:10;24487:2;24474:11;24471:19;24468:109;;;24531:1;24560:2;24556;24549:14;24468:109;24602:68;24666:3;24661:2;24647:11;24639:6;24635:24;24631:33;24602:68;:::i;:::-;24590:81;;-1:-1:-1;24389:12:22;;;;24691;;;;24356:357;;;24731:5;23791:951;-1:-1:-1;;;;;;;;23791:951:22:o;24747:1111::-;24844:6;24897:2;24885:9;24876:7;24872:23;24868:32;24865:52;;;24913:1;24910;24903:12;24865:52;24946:9;24940:16;-1:-1:-1;;;;;25016:2:22;25008:6;25005:14;25002:34;;;25032:1;25029;25022:12;25002:34;25055:22;;;;25111:4;25093:16;;;25089:27;25086:47;;;25129:1;25126;25119:12;25086:47;25155:22;;:::i;:::-;25208:2;25202:9;25236:2;25226:8;25223:16;25220:36;;;25252:1;25249;25242:12;25220:36;25279:56;25327:7;25316:8;25312:2;25308:17;25279:56;:::i;:::-;25272:5;25265:71;;25368:42;25406:2;25402;25398:11;25368:42;:::i;:::-;25363:2;25356:5;25352:14;25345:66;25457:2;25453;25449:11;25443:18;25438:2;25431:5;25427:14;25420:42;25501:2;25497;25493:11;25487:18;25530:2;25520:8;25517:16;25514:36;;;25546:1;25543;25536:12;25514:36;25582:56;25630:7;25619:8;25615:2;25611:17;25582:56;:::i;:::-;25577:2;25570:5;25566:14;25559:80;;25678:3;25674:2;25670:12;25664:19;25708:2;25698:8;25695:16;25692:36;;;25724:1;25721;25714:12;25692:36;25761:66;25819:7;25808:8;25804:2;25800:17;25761:66;:::i;:::-;25755:3;25744:15;;25737:91;-1:-1:-1;25748:5:22;24747:1111;-1:-1:-1;;;;;24747:1111:22:o;25863:120::-;25903:1;25929;25919:35;;25934:18;;:::i;:::-;-1:-1:-1;25968:9:22;;25863:120::o;25988:168::-;26061:9;;;26092;;26109:15;;;26103:22;;26089:37;26079:71;;26130:18;;:::i;26161:225::-;26265:4;26244:12;;;26258;;;26240:31;26291:22;;;;26332:24;;;26322:58;;26360:18;;:::i;26391:148::-;26479:4;26458:12;;;26472;;;26454:31;;26497:13;;26494:39;;;26513:18;;:::i;26544:375::-;26662:12;;26710:4;26699:16;;26693:23;-1:-1:-1;;;;;;26784:11:22;;;;26662:12;26693:23;26818:2;26807:14;;26804:109;;;26900:2;26894;26884:6;26880:2;26876:15;26873:1;26869:23;26865:32;26861:2;26857:41;26853:50;26844:59;;26804:109;;;;26544:375;;;:::o;26924:136::-;26963:3;26991:5;26981:39;;27000:18;;:::i;:::-;-1:-1:-1;;;27036:18:22;;26924:136::o;27065:197::-;27103:3;27131:6;27172:2;27165:5;27161:14;27199:2;27190:7;27187:15;27184:41;;27205:18;;:::i;:::-;27254:1;27241:15;;27065:197;-1:-1:-1;;;27065:197:22:o;27267:171::-;27335:6;27374:10;;;27362;;;27358:27;;27397:12;;;27394:38;;;27412:18;;:::i;27443:249::-;27514:10;27556;;;27568;;;27552:27;27599:20;;;;27514:10;27638:24;;;27628:58;;27666:18;;:::i;27697:151::-;27787:4;27780:12;;;27766;;;27762:31;;27805:14;;27802:40;;;27822:18;;:::i;27853:245::-;27924:6;27962:10;;;27974;;;27958:27;28005:20;;;;27924:6;28044:24;;;28034:58;;28072:18;;:::i;28447:179::-;28478:1;28504:6;28537:2;28534:1;28530:10;28559:3;28549:37;;28566:18;;:::i;:::-;28604:10;;28600:20;;;;;28447:179;-1:-1:-1;;28447:179:22:o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "3309600",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "chatMessages(bytes32,uint256)": "infinite",
            "chatSessions(bytes32)": "11105",
            "chatSummaries(bytes32)": "infinite",
            "closeSession(bytes32)": "59381",
            "createNewSession()": "infinite",
            "createdAt()": "2350",
            "deleteSession(bytes32)": "infinite",
            "domain()": "infinite",
            "getActiveSessions()": "infinite",
            "getAllSessionIds(bytes)": "infinite",
            "getChatHistory(bytes32)": "infinite",
            "getChatSummary(bytes32,bytes)": "infinite",
            "getSessionInfo(bytes32)": "17864",
            "getSessionMessageCount(bytes32)": "6822",
            "getUserInfo()": "13089",
            "initialize(address,uint256)": "96945",
            "isInitialized()": "2400",
            "login(string,(bytes32,bytes32,uint256))": "infinite",
            "owner()": "2421",
            "renounceOwnership()": "infinite",
            "sessionMessageCount(bytes32)": "2496",
            "setTEEContract(address)": "28412",
            "storeChatMessage(bytes32,bytes,bytes)": "infinite",
            "storeChatSummary(bytes32,bytes,bytes)": "infinite",
            "subscriptionId()": "2331",
            "teeContract()": "2382",
            "transferOwnership(address)": "infinite",
            "user()": "2405",
            "userSessionIds(uint256)": "4631"
          }
        },
        "methodIdentifiers": {
          "chatMessages(bytes32,uint256)": "40d996e9",
          "chatSessions(bytes32)": "ca3bcc1f",
          "chatSummaries(bytes32)": "58dc3eb2",
          "closeSession(bytes32)": "3ade240b",
          "createNewSession()": "89543af4",
          "createdAt()": "cf09e0d0",
          "deleteSession(bytes32)": "a6ce7478",
          "domain()": "c2fb26a6",
          "getActiveSessions()": "a0081805",
          "getAllSessionIds(bytes)": "2a9834b4",
          "getChatHistory(bytes32)": "1f8a3b0c",
          "getChatSummary(bytes32,bytes)": "b8216fd7",
          "getSessionInfo(bytes32)": "da45b383",
          "getSessionMessageCount(bytes32)": "55c02f97",
          "getUserInfo()": "5d8d1585",
          "initialize(address,uint256)": "cd6dc687",
          "isInitialized()": "392e53cd",
          "login(string,(bytes32,bytes32,uint256))": "7f476b6f",
          "owner()": "8da5cb5b",
          "renounceOwnership()": "715018a6",
          "sessionMessageCount(bytes32)": "12daa236",
          "setTEEContract(address)": "73701fbe",
          "storeChatMessage(bytes32,bytes,bytes)": "1fe9ec2e",
          "storeChatSummary(bytes32,bytes,bytes)": "b1f0f51a",
          "subscriptionId()": "09c1ba2e",
          "teeContract()": "9a9d575f",
          "transferOwnership(address)": "f2fde38b",
          "user()": "4f8632ba",
          "userSessionIds(uint256)": "9e975d27"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"A13e_RevokedAuthToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMessageOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSessionId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SessionAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SessionNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweAuth_AddressMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweAuth_ChainIdMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweAuth_DomainMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweAuth_Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweAuth_NotBeforeInFuture\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweParser_InvalidAddressLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SiweParser_InvalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedAccess\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"messageOrder\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ChatMessageStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ChatSessionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ChatSessionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ChatSummaryStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTEE\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTEE\",\"type\":\"address\"}],\"name\":\"TEEContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserContractInitialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chatMessages\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedUserMessage\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedAIResponse\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageOrder\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"chatSessions\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActivity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"messageCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"chatSummaries\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encryptedSummary\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"}],\"name\":\"closeSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createNewSession\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"}],\"name\":\"deleteSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveSessions\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"}],\"name\":\"getAllSessionIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"}],\"name\":\"getChatHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedUserMessage\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedAIResponse\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageOrder\",\"type\":\"uint256\"}],\"internalType\":\"struct UserContract.ChatMessage[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"}],\"name\":\"getChatSummary\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encryptedSummary\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messageCount\",\"type\":\"uint256\"}],\"internalType\":\"struct UserContract.ChatSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"}],\"name\":\"getSessionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActivity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"messageCount\",\"type\":\"uint256\"}],\"internalType\":\"struct UserContract.ChatSession\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"}],\"name\":\"getSessionMessageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSessions\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"siweMsg\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"v\",\"type\":\"uint256\"}],\"internalType\":\"struct SignatureRSV\",\"name\":\"sig\",\"type\":\"tuple\"}],\"name\":\"login\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sessionMessageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teeContract\",\"type\":\"address\"}],\"name\":\"setTEEContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encryptedUserMessage\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedAIResponse\",\"type\":\"bytes\"}],\"name\":\"storeChatMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sessionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encryptedSummary\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"token\",\"type\":\"bytes\"}],\"name\":\"storeChatSummary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teeContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"user\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSessionIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BuidlGuidl\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"closeSession(bytes32)\":{\"params\":{\"sessionId\":\"The session ID to close\"}},\"createNewSession()\":{\"returns\":{\"_0\":\"sessionId The new session ID\"}},\"deleteSession(bytes32)\":{\"params\":{\"sessionId\":\"The session ID to delete\"}},\"domain()\":{\"returns\":{\"_0\":\"The domain string\"}},\"getActiveSessions()\":{\"returns\":{\"_0\":\"Array of active session IDs\"}},\"getAllSessionIds(bytes)\":{\"returns\":{\"_0\":\"Array of session IDs\"}},\"getChatHistory(bytes32)\":{\"params\":{\"sessionId\":\"The session ID\"},\"returns\":{\"_0\":\"Array of chat messages\"}},\"getChatSummary(bytes32,bytes)\":{\"params\":{\"sessionId\":\"The session ID\"},\"returns\":{\"_0\":\"Chat summary\"}},\"getSessionInfo(bytes32)\":{\"params\":{\"sessionId\":\"The session ID\"},\"returns\":{\"_0\":\"Session information\"}},\"getSessionMessageCount(bytes32)\":{\"params\":{\"sessionId\":\"The session ID\"},\"returns\":{\"_0\":\"Message count\"}},\"getUserInfo()\":{\"returns\":{\"_createdAt\":\"Contract creation timestamp\",\"_subscriptionId\":\"Subscription ID\",\"_totalSessions\":\"Total number of sessions\",\"_user\":\"User address\"}},\"login(string,(bytes32,bytes32,uint256))\":{\"params\":{\"sig\":\"The signature of the SIWE message\",\"siweMsg\":\"The signed SIWE message\"},\"returns\":{\"_0\":\"The encrypted authentication token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setTEEContract(address)\":{\"params\":{\"_teeContract\":\"TEE contract address\"}},\"storeChatMessage(bytes32,bytes,bytes)\":{\"params\":{\"encryptedAIResponse\":\"Encrypted AI response\",\"encryptedUserMessage\":\"Encrypted user message\",\"sessionId\":\"The session ID\"}},\"storeChatSummary(bytes32,bytes,bytes)\":{\"params\":{\"encryptedSummary\":\"Encrypted summary from AI\",\"sessionId\":\"The session ID\",\"token\":\"SIWE authentication token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"A13e_RevokedAuthToken()\":[{\"notice\":\"The authentication token was revoked\"}],\"SiweAuth_AddressMismatch()\":[{\"notice\":\"User address in the SIWE message does not match the message signer's address\"}],\"SiweAuth_ChainIdMismatch()\":[{\"notice\":\"Chain ID in the SIWE message does not match the actual chain ID\"}],\"SiweAuth_DomainMismatch()\":[{\"notice\":\"Domain in the SIWE message does not match the domain of a dApp\"}],\"SiweAuth_Expired()\":[{\"notice\":\"Validity of the authentication token or the Expires value in the SIWE message is in the past\"}],\"SiweAuth_NotBeforeInFuture()\":[{\"notice\":\"The Not before value in the SIWE message is still in the future\"}],\"SiweParser_InvalidAddressLength()\":[{\"notice\":\"Invalid length of the hex-encoded address\"}],\"SiweParser_InvalidNonce()\":[{\"notice\":\"Invalid length of the nonce\"}]},\"kind\":\"user\",\"methods\":{\"closeSession(bytes32)\":{\"notice\":\"Close a chat session\"},\"createNewSession()\":{\"notice\":\"Create a new chat session\"},\"deleteSession(bytes32)\":{\"notice\":\"Delete a session and all its data\"},\"domain()\":{\"notice\":\"Return the domain associated with the dApp.\"},\"getActiveSessions()\":{\"notice\":\"Get all active sessions for the user\"},\"getAllSessionIds(bytes)\":{\"notice\":\"Get all session IDs for the user\"},\"getChatHistory(bytes32)\":{\"notice\":\"Get chat history for a session\"},\"getChatSummary(bytes32,bytes)\":{\"notice\":\"Get chat summary for a session\"},\"getSessionInfo(bytes32)\":{\"notice\":\"Get session information\"},\"getSessionMessageCount(bytes32)\":{\"notice\":\"Get total message count for a session\"},\"getUserInfo()\":{\"notice\":\"Get user contract information\"},\"initialize(address,uint256)\":{\"notice\":\"Initialize the user contract Can only be called once by the factory\"},\"login(string,(bytes32,bytes32,uint256))\":{\"notice\":\"Login using a SIWE message and signature\"},\"setTEEContract(address)\":{\"notice\":\"Set TEE contract address (for AI processing)\"},\"storeChatMessage(bytes32,bytes,bytes)\":{\"notice\":\"Store a chat message in a session\"},\"storeChatSummary(bytes32,bytes,bytes)\":{\"notice\":\"Store a chat summary (called by user with SIWE authentication)\"}},\"notice\":\"User Contract for storing encrypted chat data Each user gets their own contract for privacy\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UserContract.sol\":\"UserContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@oasisprotocol/sapphire-contracts/contracts/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Utility for converting date and time to timestamp\\n * @notice Considers leap year, but not leap second.\\n * @custom:attribution https://github.com/pipermerriam/ethereum-datetime/blob/master/contracts/DateTime.sol\\n */\\nlibrary DateTime {\\n    uint16 private constant ORIGIN_YEAR = 1970;\\n\\n    function isLeapYear(uint16 year) internal pure returns (bool) {\\n        if (year % 4 != 0) {\\n            return false;\\n        }\\n        if (year % 100 != 0) {\\n            return true;\\n        }\\n        if (year % 400 != 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Convert year, month, day, hour, minute, second to Unix timestamp.\\n     * @dev Leap second is not supported.\\n     */\\n    function toTimestamp(\\n        uint16 year,\\n        uint8 month,\\n        uint8 day,\\n        uint8 hour,\\n        uint8 minute,\\n        uint8 second\\n    ) internal pure returns (uint256 timestamp) {\\n        uint16 i;\\n\\n        // Year\\n        // TODO: Rewrite to O(1) time implementation.\\n        for (i = ORIGIN_YEAR; i < year; i++) {\\n            if (isLeapYear(i)) {\\n                timestamp += 366 days;\\n            } else {\\n                timestamp += 365 days;\\n            }\\n        }\\n\\n        // Month\\n        // TODO: Use constants for monthDayCounts (hex-encoded string?), rewrite to O(1) time implementation.\\n        uint32[12] memory monthDayCounts;\\n        monthDayCounts[0] = 31;\\n        if (isLeapYear(year)) {\\n            monthDayCounts[1] = 29;\\n        } else {\\n            monthDayCounts[1] = 28;\\n        }\\n        monthDayCounts[2] = 31;\\n        monthDayCounts[3] = 30;\\n        monthDayCounts[4] = 31;\\n        monthDayCounts[5] = 30;\\n        monthDayCounts[6] = 31;\\n        monthDayCounts[7] = 31;\\n        monthDayCounts[8] = 30;\\n        monthDayCounts[9] = 31;\\n        monthDayCounts[10] = 30;\\n        monthDayCounts[11] = 31;\\n\\n        for (i = 1; i < month; i++) {\\n            timestamp += monthDayCounts[i - 1] * 1 days;\\n        }\\n\\n        // Day\\n        timestamp += uint32(day - 1) * 1 days;\\n\\n        // Hour\\n        timestamp += uint32(hour) * 1 hours;\\n\\n        // Minute\\n        timestamp += uint16(minute) * 1 minutes;\\n\\n        // Second\\n        timestamp += second;\\n\\n        return timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x16056b81d29bc53c50a27a243d5215f21e164b2f95b4031bed6686fa83d02b73\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/EthereumUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport {Sapphire} from \\\"./Sapphire.sol\\\";\\n\\nstruct SignatureRSV {\\n    bytes32 r;\\n    bytes32 s;\\n    uint256 v;\\n}\\n\\nlibrary EthereumUtils {\\n    uint256 internal constant K256_P =\\n        0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f;\\n\\n    // (p+1)//4\\n    uint256 internal constant K256_P_PLUS_1_OVER_4 =\\n        0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c;\\n\\n    address internal constant PRECOMPILE_BIGMODEXP = address(0x5);\\n\\n    error expmod_Error();\\n\\n    function expmod(\\n        uint256 base,\\n        uint256 exponent,\\n        uint256 modulus\\n    ) internal view returns (uint256 out) {\\n        (bool success, bytes memory result) = PRECOMPILE_BIGMODEXP.staticcall(\\n            abi.encodePacked(\\n                uint256(0x20), // length of base\\n                uint256(0x20), // length of exponent\\n                uint256(0x20), // length of modulus\\n                base,\\n                exponent,\\n                modulus\\n            )\\n        );\\n\\n        if (!success) revert expmod_Error();\\n\\n        out = uint256(bytes32(result));\\n    }\\n\\n    error k256DeriveY_Invalid_Prefix_Error();\\n\\n    /**\\n     * @notice Recover Y coordinate from X coordinate and sign bit.\\n     * @param prefix 0x02 or 0x03 indicates sign bit of compressed point.\\n     * @param x X coordinate.\\n     */\\n    function k256DeriveY(uint8 prefix, uint256 x)\\n        internal\\n        view\\n        returns (uint256 y)\\n    {\\n        if (prefix != 0x02 && prefix != 0x03)\\n            revert k256DeriveY_Invalid_Prefix_Error();\\n\\n        // x^3 + ax + b, where a=0, b=7\\n        y = addmod(mulmod(x, mulmod(x, x, K256_P), K256_P), 7, K256_P);\\n\\n        // find square root of quadratic residue\\n        y = expmod(y, K256_P_PLUS_1_OVER_4, K256_P);\\n\\n        // negate y if indicated by sign bit\\n        if ((y + prefix) % 2 != 0) {\\n            y = K256_P - y;\\n        }\\n    }\\n\\n    error k256Decompress_Invalid_Length_Error();\\n\\n    /**\\n     * @notice Decompress SEC P256 k1 point.\\n     * @param pk 33 byte compressed public key.\\n     * @return x X coordinate.\\n     * @return y Y coordinate.\\n     */\\n    function k256Decompress(bytes memory pk)\\n        internal\\n        view\\n        returns (uint256 x, uint256 y)\\n    {\\n        if (pk.length != 33) revert k256Decompress_Invalid_Length_Error();\\n        assembly {\\n            // skip 32 byte length prefix, plus one byte sign prefix\\n            x := mload(add(pk, 33))\\n        }\\n        y = k256DeriveY(uint8(pk[0]), x);\\n    }\\n\\n    function k256PubkeyToEthereumAddress(bytes memory pubkey)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        (uint256 x, uint256 y) = k256Decompress(pubkey);\\n        return toEthereumAddress(x, y);\\n    }\\n\\n    /**\\n     * @notice Convert SEC P256 k1 curve point to Ethereum address.\\n     * @param x X coordinate.\\n     * @param y Y coordinate.\\n     * @custom:see https://gavwood.com/paper.pdf (pp. 212)\\n     */\\n    function toEthereumAddress(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        bytes32 digest = keccak256(abi.encodePacked(x, y));\\n\\n        return address(uint160((uint256(digest) << 96) >> 96));\\n    }\\n\\n    error DER_Split_Error();\\n\\n    /**\\n     * @notice Extracts the `r` and `s` parameters from a DER encoded ECDSA\\n     * signature.\\n     *\\n     * The signature is an ASN1 encoded SEQUENCE of the variable length `r` and\\n     * `s` INTEGERs.\\n     *\\n     * ```\\n     * | 0x30 | len(z) | 0x02 | len(r) |  r   | 0x02 | len(s) |  s   | = hex value\\n     * |  1   |   1    |   1  |   1    | 1-33 |  1   |   1    | 1-33 | = byte length\\n     * ```\\n     *\\n     * If the highest bit of either `r` or `s` is set, it will be prefix padded\\n     * with a zero byte. There is exponentially decreasing probability that\\n     * either `r` or `s` will be below 32 bytes. There is a very high\\n     * probability that either `r` or `s` will be 33 bytes. This function only\\n     * works if either `r` or `s` are 256bits or lower.\\n     *\\n     * @param der DER encoded ECDSA signature\\n     * @return rsv ECDSA R point X coordinate, and S scalar\\n     * @custom:see https://bitcoin.stackexchange.com/questions/58853/how-do-you-figure-out-the-r-and-s-out-of-a-signature-using-python\\n     */\\n    function splitDERSignature(bytes memory der)\\n        internal\\n        pure\\n        returns (SignatureRSV memory rsv)\\n    {\\n        if (der.length < 8) revert DER_Split_Error();\\n        if (der[0] != 0x30) revert DER_Split_Error();\\n        if (der[2] != 0x02) revert DER_Split_Error();\\n\\n        uint256 zLen = uint8(der[1]);\\n        uint256 rLen = uint8(der[3]);\\n        if (rLen > 33) revert DER_Split_Error();\\n\\n        uint256 sOffset = 4 + rLen;\\n        uint256 sLen = uint8(der[sOffset + 1]);\\n        if (sLen > 33) revert DER_Split_Error();\\n        if (der[sOffset] != 0x02) revert DER_Split_Error();\\n\\n        if (rLen + sLen + 4 != zLen) revert DER_Split_Error();\\n        if (der.length != zLen + 2) revert DER_Split_Error();\\n\\n        sOffset += 2;\\n        uint256 rOffset = 4;\\n\\n        if (rLen == 33) {\\n            if (der[4] != 0x00) revert DER_Split_Error();\\n            rOffset += 1;\\n            rLen -= 1;\\n        }\\n\\n        if (sLen == 33) {\\n            if (der[sOffset] != 0x00) revert DER_Split_Error();\\n            sOffset += 1;\\n            sLen -= 1;\\n        }\\n\\n        bytes32 r;\\n        bytes32 s;\\n\\n        assembly {\\n            r := mload(add(der, add(32, rOffset)))\\n            s := mload(add(der, add(32, sOffset)))\\n        }\\n\\n        // When length of either `r` or `s` is below 32 bytes\\n        // the 32 byte `mload` will suffix it with unknown stuff\\n        // shift right to remove the unknown stuff, prefixing with zeros instead\\n\\n        if (rLen < 32) {\\n            r >>= 8 * (32 - rLen);\\n        }\\n\\n        if (sLen < 32) {\\n            s >>= 8 * (32 - sLen);\\n        }\\n\\n        rsv.r = r;\\n        rsv.s = s;\\n    }\\n\\n    error recoverV_Error();\\n\\n    function recoverV(\\n        address pubkeyAddr,\\n        bytes32 digest,\\n        SignatureRSV memory rsv\\n    ) internal pure {\\n        rsv.v = 27;\\n\\n        if (ecrecover(digest, uint8(rsv.v), rsv.r, rsv.s) != pubkeyAddr) {\\n            rsv.v = 28;\\n\\n            if (ecrecover(digest, uint8(rsv.v), rsv.r, rsv.s) != pubkeyAddr) {\\n                revert recoverV_Error();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert a Secp256k1PrehashedKeccak256 signature to one accepted\\n     * by ecrecover.\\n     * @param pubkey 33 byte compressed public key.\\n     * @param digest 32 byte pre-hashed message digest.\\n     * @param signature ASN.1 DER encoded signature, as returned from\\n     * [`Sapphire.sign`](../Sapphire.sol/library.Sapphire.md#sign).\\n     * @return pubkeyAddr 20 byte Ethereum address.\\n     * @return rsv Ethereum EcDSA RSV signature values.\\n     * @custom:see https://gavwood.com/paper.pdf (pp. 206)\\n     */\\n    function toEthereumSignature(\\n        bytes memory pubkey,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) internal view returns (address pubkeyAddr, SignatureRSV memory rsv) {\\n        pubkeyAddr = k256PubkeyToEthereumAddress(pubkey);\\n\\n        rsv = splitDERSignature(signature);\\n\\n        recoverV(pubkeyAddr, digest, rsv);\\n    }\\n\\n    function sign(\\n        address pubkeyAddr,\\n        bytes32 secretKey,\\n        bytes32 digest\\n    ) internal view returns (SignatureRSV memory rsv) {\\n        bytes memory signature = Sapphire.sign(\\n            Sapphire.SigningAlg.Secp256k1PrehashedKeccak256,\\n            abi.encodePacked(secretKey),\\n            abi.encodePacked(digest),\\n            \\\"\\\"\\n        );\\n\\n        rsv = splitDERSignature(signature);\\n\\n        recoverV(pubkeyAddr, digest, rsv);\\n    }\\n\\n    /**\\n     * @notice Generate an Ethereum compatible SEC P256 k1 keypair and\\n     * corresponding public address.\\n     * @return pubkeyAddr Ethereum address.\\n     * @return secretKey Secret key used for signing.\\n     */\\n    function generateKeypair()\\n        internal\\n        view\\n        returns (address pubkeyAddr, bytes32 secretKey)\\n    {\\n        bytes memory randSeed = Sapphire.randomBytes(32, \\\"\\\");\\n\\n        secretKey = bytes32(randSeed);\\n\\n        (bytes memory pk, ) = Sapphire.generateSigningKeyPair(\\n            Sapphire.SigningAlg.Secp256k1PrehashedKeccak256,\\n            randSeed\\n        );\\n\\n        pubkeyAddr = k256PubkeyToEthereumAddress(pk);\\n    }\\n}\\n\",\"keccak256\":\"0x79e34844793f4a8970d31eb4cbdd91e060fb93da4cbd28b7b8aad5c22e1f6666\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Sapphire\\n * @notice This library provides a number of convenient wrappers for\\n * cryptographic operations such as the x25519 key derivation, Deoxys-II-based\\n * encryption and decryption, signing key generation, message digest signing and\\n * verification, gas padding and hashing.\\n *\\n * Most of the mentioned functions are implemented as Sapphire's precompiles and\\n * are cheap to call.\\n *\\n * #### Calling Precompiles Manually\\n *\\n * You can override the wrappers and call Sapphire precompiles by dispatching\\n * calls to specific well-known contract addresses, as described below. The\\n * __Precompile address__ section of each function will show you the address\\n * of the corresponding precompile.\\n *\\n * Input parameters should be packed into a contiguous memory region with each\\n * chunk of data padded to 32 bytes as usual. The recommended way to construct\\n * parameter byte sequences in Solidity is with `abi.encode` and `abi.decode`,\\n * which will transparently handle things like putting `bytes` lengths in the\\n * correct position.\\n */\\nlibrary Sapphire {\\n    // Oasis-specific, confidential precompiles\\n    address internal constant RANDOM_BYTES =\\n        0x0100000000000000000000000000000000000001;\\n    address internal constant DERIVE_KEY =\\n        0x0100000000000000000000000000000000000002;\\n    address internal constant ENCRYPT =\\n        0x0100000000000000000000000000000000000003;\\n    address internal constant DECRYPT =\\n        0x0100000000000000000000000000000000000004;\\n    address internal constant GENERATE_SIGNING_KEYPAIR =\\n        0x0100000000000000000000000000000000000005;\\n    address internal constant SIGN_DIGEST =\\n        0x0100000000000000000000000000000000000006;\\n    address internal constant VERIFY_DIGEST =\\n        0x0100000000000000000000000000000000000007;\\n    address internal constant CURVE25519_PUBLIC_KEY =\\n        0x0100000000000000000000000000000000000008;\\n    address internal constant GAS_USED =\\n        0x0100000000000000000000000000000000000009;\\n    address internal constant PAD_GAS =\\n        0x010000000000000000000000000000000000000a;\\n\\n    // Oasis-specific, general precompiles\\n    address internal constant SHA512_256 =\\n        0x0100000000000000000000000000000000000101;\\n    address internal constant SHA512 =\\n        0x0100000000000000000000000000000000000102;\\n    address internal constant SHA384 =\\n        0x0100000000000000000000000000000000000104;\\n\\n    type Curve25519PublicKey is bytes32;\\n    type Curve25519SecretKey is bytes32;\\n\\n    enum SigningAlg {\\n        /// Ed25519 signature over the provided message using SHA-512/265 with a domain separator.\\n        /// Can be used to sign transactions for the Oasis consensus layer and SDK paratimes.\\n        Ed25519Oasis,\\n        /// Ed25519 signature over the provided message.\\n        Ed25519Pure,\\n        /// Ed25519 signature over the provided prehashed SHA-512 digest.\\n        Ed25519PrehashedSha512,\\n        /// Secp256k1 signature over the provided message using SHA-512/256 with a domain separator.\\n        /// Can be used to sign transactions for the Oasis consensus layer and SDK paratimes.\\n        Secp256k1Oasis,\\n        /// Secp256k1 over the provided Keccak256 digest.\\n        /// Can be used to sign transactions for Ethereum-compatible networks.\\n        Secp256k1PrehashedKeccak256,\\n        /// Secp256k1 signature over the provided SHA-256 digest.\\n        Secp256k1PrehashedSha256,\\n        /// Sr25519 signature over the provided message.\\n        Sr25519,\\n        /// Secp256r1 signature over the provided SHA-256 digest.\\n        Secp256r1PrehashedSha256,\\n        /// Secp384r1 signature over the provided SHA-384 digest.\\n        Secp384r1PrehashedSha384\\n    }\\n\\n    /**\\n     * @notice Generate `num_bytes` pseudo-random bytes, with an optional\\n     * personalization string (`pers`) added into the hashing algorithm to\\n     * increase domain separation when needed.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000001`\\n     *\\n     * #### Gas cost\\n     *\\n     * 10,000 minimum plus 240 per output word plus 60 per word of the\\n     * personalization string.\\n     *\\n     * #### Implementation details\\n     *\\n     * The mode (e.g. simulation or \\\"view call\\\" vs transaction execution) is fed\\n     * to TupleHash (among other block-dependent components) to derive the \\\"key\\n     * id\\\", which is then used to derive a per-block VRF key from\\n     * epoch-ephemeral entropy (using KMAC256 and cSHAKE) so a different key\\n     * id will result in a unique per-block VRF key. This per-block VRF key is\\n     * then used to create the per-block root RNG which is then used to derive\\n     * domain-separated (using Merlin transcripts) per-transaction random RNGs\\n     * which are then exposed via this precompile. The KMAC, cSHAKE and\\n     * TupleHash algorithms are SHA-3 derived functions defined in [NIST\\n     * Special Publication 800-185](https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-185.pdf).\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes memory randomPad = Sapphire.randomBytes(64, \\\"\\\");\\n     * ```\\n     *\\n     * @param numBytes The number of bytes to return.\\n     * @param pers An optional personalization string to increase domain\\n     *        separation.\\n     * @return The random bytes. If the number of bytes requested is too large\\n     *         (over 1024), a smaller amount (1024) will be returned.\\n     */\\n    function randomBytes(uint256 numBytes, bytes memory pers)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory entropy) = RANDOM_BYTES.staticcall(\\n            abi.encode(numBytes, pers)\\n        );\\n        require(success, \\\"randomBytes: failed\\\");\\n        return entropy;\\n    }\\n\\n    /**\\n     * @notice Generates a Curve25519 keypair.\\n     * @param pers An optional personalization string used to add domain\\n     * separation.\\n     * @return pk The Curve25519 public key. Useful for key exchange.\\n     * @return sk The Curve25519 secret key. Pairs well with\\n     * [deriveSymmetricKey](#derivesymmetrickey).\\n     */\\n    function generateCurve25519KeyPair(bytes memory pers)\\n        internal\\n        view\\n        returns (Curve25519PublicKey pk, Curve25519SecretKey sk)\\n    {\\n        bytes memory scalar = randomBytes(32, pers);\\n        // Twiddle some bits, as per RFC 7748 \\u00a75.\\n        scalar[0] &= 0xf8; // Make it a multiple of 8 to avoid small subgroup attacks.\\n        scalar[31] &= 0x7f; // Clamp to < 2^255 - 19\\n        scalar[31] |= 0x40; // Clamp to >= 2^254\\n        (bool success, bytes memory pkBytes) = CURVE25519_PUBLIC_KEY.staticcall(\\n            scalar\\n        );\\n        require(success, \\\"gen curve25519 pk: failed\\\");\\n        return (\\n            Curve25519PublicKey.wrap(bytes32(pkBytes)),\\n            Curve25519SecretKey.wrap(bytes32(scalar))\\n        );\\n    }\\n\\n    /**\\n     * @notice Derive a symmetric key from a pair of keys using x25519.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000002`\\n     *\\n     * #### Gas cost\\n     *\\n     * 100,000\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes32 publicKey = ... ;\\n     * bytes32 privateKey = ... ;\\n     * bytes32 symmetric = Sapphire.deriveSymmetricKey(publicKey, privateKey);\\n     * ```\\n     *\\n     * @param peerPublicKey The peer's public key.\\n     * @param secretKey Your secret key.\\n     * @return A derived symmetric key.\\n     */\\n    function deriveSymmetricKey(\\n        Curve25519PublicKey peerPublicKey,\\n        Curve25519SecretKey secretKey\\n    ) internal view returns (bytes32) {\\n        (bool success, bytes memory symmetric) = DERIVE_KEY.staticcall(\\n            abi.encode(peerPublicKey, secretKey)\\n        );\\n        require(success, \\\"deriveSymmetricKey: failed\\\");\\n        return bytes32(symmetric);\\n    }\\n\\n    /**\\n     * @notice Encrypt and authenticate the plaintext and additional data using\\n     * DeoxysII.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000003`\\n     *\\n     * #### Gas cost\\n     *\\n     * 50,000 minimum plus 100 per word of input\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes32 key = ... ;\\n     * bytes32 nonce = ... ;\\n     * bytes memory text = \\\"plain text\\\";\\n     * bytes memory ad = \\\"additional data\\\";\\n     * bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\\n     * bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\\n     * ```\\n     *\\n     * @param key The key to use for encryption.\\n     * @param nonce The nonce. Note that only the first 15 bytes of this\\n     * parameter are used.\\n     * @param plaintext The plaintext to encrypt and authenticate.\\n     * @param additionalData The additional data to authenticate.\\n     * @return The ciphertext with appended auth tag.\\n     */\\n    function encrypt(\\n        bytes32 key,\\n        bytes32 nonce,\\n        bytes memory plaintext,\\n        bytes memory additionalData\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory ciphertext) = ENCRYPT.staticcall(\\n            abi.encode(key, nonce, plaintext, additionalData)\\n        );\\n        require(success, \\\"encrypt: failed\\\");\\n        return ciphertext;\\n    }\\n\\n    /**\\n     * @notice Decrypt and authenticate the ciphertext and additional data using\\n     * DeoxysII. Reverts if the auth tag is incorrect.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000004`\\n     *\\n     * #### Gas cost\\n     *\\n     * 50,000 minimum plus 100 per word of input\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes32 key = ... ;\\n     * bytes32 nonce = ... ;\\n     * bytes memory text = \\\"plain text\\\";\\n     * bytes memory ad = \\\"additional data\\\";\\n     * bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\\n     * bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\\n     * ```\\n     *\\n     * @param key The key to use for decryption.\\n     * @param nonce The nonce. Note that only the first 15 bytes of this\\n     * parameter are used.\\n     * @param ciphertext The ciphertext with tag to decrypt and authenticate.\\n     * @param additionalData The additional data to authenticate against the\\n     * ciphertext.\\n     * @return The original plaintext.\\n     */\\n    function decrypt(\\n        bytes32 key,\\n        bytes32 nonce,\\n        bytes memory ciphertext,\\n        bytes memory additionalData\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory plaintext) = DECRYPT.staticcall(\\n            abi.encode(key, nonce, ciphertext, additionalData)\\n        );\\n        require(success, \\\"decrypt: failed\\\");\\n        return plaintext;\\n    }\\n\\n    /**\\n     * @notice Generate a public/private key pair using the specified method and\\n     * seed. The available methods are items in the\\n     * [`Sapphire.SigningAlg`](#signingalg) enum. Note, however, that the\\n     * generation method ignores subvariants, so all three Ed25519-based are\\n     * equivalent, and all Secp256k1 & Secp256r1 based methods are equivalent.\\n     * Sr25519 is not available and will return an error.\\n     *\\n     * #### Precompile address\\n     * `0x0100000000000000000000000000000000000005`\\n     *\\n     * #### Gas Cost\\n     *\\n     * ##### Ed25519: 1,000 gas\\n     *\\n     * - `0` (`Ed25519Oasis`)\\n     * - `1` (`Ed25519Pure`)\\n     * - `2` (`Ed25519PrehashedSha512`)\\n     *\\n     * ##### Secp256k1: 1,500 gas.\\n     * - `3` (`Secp256k1Oasis`)\\n     * - `4` (`Secp256k1PrehashedKeccak256`)\\n     * - `5` (`Secp256k1PrehashedSha256`)\\n     *\\n     * ##### Secp256r1: 4,000 gas\\n     * - `7` (`Secp256r1PrehashedSha256`)\\n     *\\n     * ##### Secp384r1: 18,000 gas\\n     * - `8` (`Secp384r1PrehashedSha384`)\\n     *\\n     * #### Key Formats\\n     *\\n     * ##### Ed25519\\n     *\\n     * Public key: 32 bytes\\n     * Secret key: 32 bytes\\n     *\\n     * ##### Secp256k1 & Secp256r1\\n     *\\n     * Public key: 33 bytes, compressed format (`0x02` or `0x03` prefix, then 32\\n     * byte X coordinate).\\n     * Secret key: 32 bytes\\n     *\\n     * ##### Secp384r1\\n     *\\n     * Public key: 49 bytes, compressed format (`0x02` or `0x03` prefix, then 48\\n     * byte X coordinate).\\n     * Secret key: 48 bytes\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes memory seed = hex\\\"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\\\";\\n     * bytes memory publicKey;\\n     * bytes memory privateKey;\\n     * (publicKey, privateKey) = Sapphire.generateSigningKeyPair(Sapphire.SigningAlg.Ed25519Pure, seed);\\n     * ```\\n     *\\n     * @param alg The signing alg for which to generate a keypair.\\n     * @param seed The seed to use for generating the key pair. You can use the\\n     * `randomBytes` method if you don't already have a seed.\\n     * @return publicKey The public part of the keypair.\\n     * @return secretKey The secret part of the keypair.\\n     */\\n    function generateSigningKeyPair(SigningAlg alg, bytes memory seed)\\n        internal\\n        view\\n        returns (bytes memory publicKey, bytes memory secretKey)\\n    {\\n        (bool success, bytes memory keypair) = GENERATE_SIGNING_KEYPAIR\\n            .staticcall(abi.encode(alg, seed));\\n        require(success, \\\"gen signing keypair: failed\\\");\\n        return abi.decode(keypair, (bytes, bytes));\\n    }\\n\\n    /**\\n     * @notice Sign a message within the provided context using the specified\\n     * algorithm, and return the signature. The `context_or_digest` and\\n     * `messages` parameters change in meaning slightly depending on the method\\n     * requested. For methods that take a context in addition to the message you\\n     * must pass the context in the `context_or_digest` parameter and use\\n     * `message` as expected. For methods that take a pre-existing hash of the\\n     * message, pass that in `context_or_digest` and leave `message` empty.\\n     * Specifically the `Ed25519Oasis` and `Secp256k1Oasis` variants take both a\\n     * context and a message (each are variable length `bytes`), the context\\n     * serves as a domain separator.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000006`\\n     *\\n     * #### Gas cost\\n     *\\n     * See below for the method-dependent base cost, plus 8 gas per 32 bytes of\\n     * context and message except digest.\\n     *\\n     * #### Signing algorithms\\n     *\\n     * - `0` (`Ed25519Oasis`): 1,500 gas, variable length context and message.\\n     * - `1` (`Ed25519Pure`): 1,500 gas, empty context, variable length message.\\n     * - `2` (`Ed25519PrehashedSha512`): 1,500 gas, pre-existing SHA-512 hash\\n     *   (64 bytes) as context, empty message.\\n     * - `3` (`Secp256k1Oasis`): 3,000 gas, variable length context and message\\n     * - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas, pre-existing hash\\n     *   (32 bytes) as context, empty message.\\n     * - `5` (`Secp256k1PrehashedSha256`): 3,000 gas, pre-existing hash (32\\n     *   bytes) as context, empty message.\\n     * - `7` (`Secp256r1PrehashedSha256`): 9,000 gas, pre-existing hash (32\\n     *   bytes) as context, empty message.\\n     * - `8` (`Secp384r1PrehashedSha384`): 43,200 gas, pre-existing hash (32\\n     *   bytes) as context, empty message.\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * Sapphire.SigningAlg alg = Sapphire.SigningAlg.Ed25519Pure;\\n     * bytes memory pk;\\n     * bytes memory sk;\\n     * (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \\\"\\\"));\\n     * bytes memory signature = Sapphire.sign(alg, sk, \\\"\\\", \\\"signed message\\\");\\n     * ```\\n     *\\n     * @param alg The signing algorithm to use.\\n     * @param secretKey The secret key to use for signing. The key must be valid\\n     * for use with the requested algorithm.\\n     * @param contextOrHash Domain-Separator Context, or precomputed hash bytes.\\n     * @param message Message to sign, should be zero-length if precomputed hash\\n     * given.\\n     * @return signature The resulting signature.\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_sign\\n     */\\n    function sign(\\n        SigningAlg alg,\\n        bytes memory secretKey,\\n        bytes memory contextOrHash,\\n        bytes memory message\\n    ) internal view returns (bytes memory signature) {\\n        (bool success, bytes memory sig) = SIGN_DIGEST.staticcall(\\n            abi.encode(alg, secretKey, contextOrHash, message)\\n        );\\n        require(success, \\\"sign: failed\\\");\\n        return sig;\\n    }\\n\\n    /**\\n     * @notice Verifies that the provided digest was signed with using the\\n     * secret key corresponding to the provided private key and the specified\\n     * signing algorithm.\\n     *\\n     * The `method`, `context_or_digest` and `message` parameters have the same\\n     * meaning as described above in the [sign()](#sign) function.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000007`\\n     *\\n     * #### Gas cost\\n     *\\n     * The algorithm-specific base cost below, with an additional **8 gas per\\n     * 32 bytes** of `context` and `message` for the `Ed25519Oasis`,\\n     * `Ed25519Pure` and `Secp256k1Oasis` algorithms.\\n     *\\n     * - `0` (`Ed25519Oasis`): 2,000 gas\\n     * - `1` (`Ed25519Pure`): 2,000 gas\\n     * - `2` (`Ed25519PrehashedSha512`): 2,000 gas\\n     * - `3` (`Secp256k1Oasis`): 3,000 gas\\n     * - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas\\n     * - `5` (`Secp256k1PrehashedSha256`): 3,000 gas\\n     * - `7` (`Secp256r1PrehashedSha256`): 7,900 gas\\n     * - `8` (`Secp384r1PrehashedSha384`): 37,920 gas\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * Sapphire.SigningAlg alg = Sapphire.SigningAlg.Secp256k1PrehashedKeccak256;\\n     * bytes memory pk;\\n     * bytes memory sk;\\n     * bytes memory digest = abi.encodePacked(keccak256(\\\"signed message\\\"));\\n     * (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \\\"\\\"));\\n     * bytes memory signature = Sapphire.sign(alg, sk, digest, \\\"\\\");\\n     * require( Sapphire.verify(alg, pk, digest, \\\"\\\", signature) );\\n     * ```\\n     *\\n     * @param alg The signing algorithm by which the signature was generated.\\n     * @param publicKey The public key against which to check the signature.\\n     * @param contextOrHash Domain-Separator Context, or precomputed hash bytes\\n     * @param message The hash of the message that was signed, should be\\n     * zero-length if precomputed hash was given.\\n     * @param signature The signature to check.\\n     * @return verified Whether the signature is valid for the given parameters.\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_verify\\n     */\\n    function verify(\\n        SigningAlg alg,\\n        bytes memory publicKey,\\n        bytes memory contextOrHash,\\n        bytes memory message,\\n        bytes memory signature\\n    ) internal view returns (bool verified) {\\n        (bool success, bytes memory v) = VERIFY_DIGEST.staticcall(\\n            abi.encode(alg, publicKey, contextOrHash, message, signature)\\n        );\\n        require(success, \\\"verify: failed\\\");\\n        return abi.decode(v, (bool));\\n    }\\n\\n    /**\\n     * @notice Set the current transactions gas usage to a specific amount\\n     * @dev Will cause a reversion if the current usage is more than the amount.\\n     * @param toAmount Gas usage will be set to this amount\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_pad_gas\\n     *\\n     */\\n    function padGas(uint128 toAmount) internal view {\\n        (bool success, ) = PAD_GAS.staticcall(abi.encode(toAmount));\\n        require(success, \\\"verify: failed\\\");\\n    }\\n\\n    /**\\n     * @notice Returns the amount of gas currently used by the transaction\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_gas_used\\n     */\\n    function gasUsed() internal view returns (uint64) {\\n        (bool success, bytes memory v) = GAS_USED.staticcall(\\\"\\\");\\n        require(success, \\\"gasused: failed\\\");\\n        return abi.decode(v, (uint64));\\n    }\\n}\\n\\n/**\\n * @notice Hash the input data with SHA-512/256, according to\\n * [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\\n *\\n * #### Precompile address\\n *\\n * `0x0100000000000000000000000000000000000102`\\n *\\n * #### Gas cost\\n *\\n * 115 gas, then 13 gas per word\\n *\\n * #### Example\\n *\\n * ```solidity\\n * bytes32 result = sha512_256(abi.encodePacked(\\\"input data\\\"));\\n * ```\\n *\\n * #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\\n *\\n * [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\\n * attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\\n * relevant if you are computing the hash of a secret message. The\\n * [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\\n * vulnerable to length-extension attacks.\\n *\\n * @param input Bytes to hash.\\n * @return result 32 byte digest.\\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512_256\\n */\\nfunction sha512_256(bytes memory input) view returns (bytes32 result) {\\n    (bool success, bytes memory output) = Sapphire.SHA512_256.staticcall(input);\\n\\n    require(success, \\\"sha512_256\\\");\\n\\n    return bytes32(output);\\n}\\n\\n/**\\n * @notice Hash the input data with SHA-512, according to\\n * [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf)\\n *\\n * #### Precompile address\\n *\\n * `0x0100000000000000000000000000000000000101`\\n *\\n * #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\\n *\\n * [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\\n * attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\\n * relevant if you are computing the hash of a secret message. The\\n * [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\\n * vulnerable to length-extension attacks.\\n *\\n * #### Gas Cost\\n *\\n * 115 gas, then 13 gas per word\\n *\\n * #### Example\\n *\\n * ```solidity\\n * bytes memory result = sha512(abi.encodePacked(\\\"input data\\\"));\\n * ```\\n *\\n * @param input Bytes to hash.\\n * @return output 64 byte digest.\\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512\\n */\\nfunction sha512(bytes memory input) view returns (bytes memory output) {\\n    bool success;\\n\\n    (success, output) = Sapphire.SHA512.staticcall(input);\\n\\n    require(success, \\\"sha512\\\");\\n}\\n\\n/**\\n * @notice Hash the input data with SHA-384.\\n * @param input Bytes to hash.\\n * @return output 48 byte digest.\\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha384\\n */\\nfunction sha384(bytes memory input) view returns (bytes memory output) {\\n    bool success;\\n\\n    (success, output) = Sapphire.SHA384.staticcall(input);\\n\\n    require(success, \\\"sha384\\\");\\n}\\n\",\"keccak256\":\"0x87a43ed0f7c74b7da8ee58d349f466fb2947bf71f6fca10174ebad96d59e2c8a\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/SiweParser.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {DateTime} from \\\"./DateTime.sol\\\";\\n\\nstruct ParsedSiweMessage {\\n    bytes schemeDomain;\\n    address addr;\\n    bytes statement;\\n    bytes uri;\\n    bytes version;\\n    uint256 chainId;\\n    bytes nonce;\\n    bytes issuedAt;\\n    bytes expirationTime;\\n    bytes notBefore;\\n    bytes requestId;\\n    bytes[] resources;\\n}\\n\\n/**\\n * @title On-chain parser for EIP-4361 SIWE message\\n * @notice Call parseSiweMsg() and provide the EIP-4361 SIWE message. The parser\\n * will generate the ParsedSiweMessage struct which you can then use to\\n * extract the authentication information in your on-chain contract.\\n */\\nlibrary SiweParser {\\n    /// Invalid length of the hex-encoded address\\n    error SiweParser_InvalidAddressLength();\\n    /// Invalid length of the nonce\\n    error SiweParser_InvalidNonce();\\n\\n    /**\\n     * @notice Convert string containing hex address without 0x prefix to solidity address object.\\n     */\\n    function _hexStringToAddress(bytes memory s)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        if (s.length != 40) {\\n            revert SiweParser_InvalidAddressLength();\\n        }\\n\\n        bytes memory r = new bytes(s.length / 2);\\n        for (uint256 i = 0; i < s.length / 2; ++i) {\\n            r[i] = bytes1(\\n                _fromHexChar(uint8(s[2 * i])) *\\n                    16 +\\n                    _fromHexChar(uint8(s[2 * i + 1]))\\n            );\\n        }\\n        return address(bytes20(r));\\n    }\\n\\n    function _fromHexChar(uint8 c) internal pure returns (uint8) {\\n        if (bytes1(c) >= bytes1(\\\"0\\\") && bytes1(c) <= bytes1(\\\"9\\\")) {\\n            return c - uint8(bytes1(\\\"0\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"a\\\") && bytes1(c) <= bytes1(\\\"f\\\")) {\\n            return 10 + c - uint8(bytes1(\\\"a\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"A\\\") && bytes1(c) <= bytes1(\\\"F\\\")) {\\n            return 10 + c - uint8(bytes1(\\\"A\\\"));\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Substring.\\n     */\\n    function _substr(\\n        bytes memory str,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex && i < str.length; i++) {\\n            result[i - startIndex] = str[i];\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice String to Uint using decimal format. No error handling.\\n     */\\n    function _parseUint(bytes memory b) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            result = result * 10 + (uint256(uint8(b[i])) - 0x30);\\n        }\\n        return (result);\\n    }\\n\\n    /**\\n     * @notice Parse \\\"NAME: VALUE\\\" in str starting at index i and ending at \\\\n or end of bytes.\\n     * @return VALUE and new i, if NAME matched; otherwise empty value and old i.\\n     */\\n    function _parseField(\\n        bytes calldata str,\\n        string memory name,\\n        uint256 i\\n    ) internal pure returns (bytes memory, uint256) {\\n        uint256 j = i;\\n        for (; j < str.length; j++) {\\n            if (str[j] == \\\":\\\") {\\n                // Delimiter found, check the name.\\n                if (keccak256(_substr(str, i, j)) != keccak256(bytes(name))) {\\n                    return (\\\"\\\", i);\\n                }\\n\\n                // Skip :\\n                j++;\\n                if (j < str.length && str[j] == \\\" \\\") {\\n                    // Skip blank\\n                    j++;\\n                }\\n\\n                i = j;\\n                break;\\n            }\\n        }\\n\\n        for (; j < str.length; j++) {\\n            if (str[j] == 0x0a) {\\n                return (_substr(str, i, j), j + 1);\\n            }\\n        }\\n        return (_substr(str, i, j), j);\\n    }\\n\\n    /**\\n     * @notice Parse bullets, one per line in str starting at i.\\n     * @return Array of parsed values and a new i.\\n     */\\n    function _parseArray(bytes calldata str, uint256 i)\\n        internal\\n        pure\\n        returns (bytes[] memory, uint256)\\n    {\\n        // First count the number of resources.\\n        uint256 j = i;\\n        uint256 count = 0;\\n        for (; j < str.length - 1; j++) {\\n            if (str[j] == \\\"-\\\" && str[j + 1] == \\\" \\\") {\\n                j += 2;\\n                count++;\\n            } else {\\n                break;\\n            }\\n            while (j < str.length && str[j] != 0x0a) {\\n                j++;\\n            }\\n        }\\n\\n        // Then build an array.\\n        bytes[] memory values = new bytes[](count);\\n        j = i;\\n        for (uint256 c = 0; j < str.length - 1 && c != count; j++) {\\n            if (str[j] == \\\"-\\\" && str[j + 1] == \\\" \\\") {\\n                i = j + 2;\\n            }\\n            while (j < str.length && str[j] != 0x0a) {\\n                j++;\\n            }\\n            values[c] = _substr(str, i, j);\\n            c++;\\n            if (j == str.length) {\\n                j--; // Subtract 1 because of the outer loop.\\n            }\\n        }\\n        return (values, j);\\n    }\\n\\n    /**\\n     * @notice Parse SIWE message.\\n     * @return ParsedSiweMessage struct with populated fields from the message.\\n     */\\n    function parseSiweMsg(bytes calldata siweMsg)\\n        internal\\n        pure\\n        returns (ParsedSiweMessage memory)\\n    {\\n        ParsedSiweMessage memory p;\\n        uint256 i = 0;\\n\\n        // dApp Domain.\\n        for (; i < siweMsg.length; i++) {\\n            if (siweMsg[i] == \\\" \\\") {\\n                p.schemeDomain = _substr(siweMsg, 0, i);\\n                break;\\n            }\\n        }\\n\\n        i += 50; // \\\" wants you to sign in with your Ethereum account:\\\\n\\\"\\n\\n        // Address.\\n        // TODO: Verify the mixed-case checksum.\\n        p.addr = _hexStringToAddress(_substr(siweMsg, i += 2, i += 40));\\n        i += 2; // End of address new line + New line.\\n\\n        // (Optional) statement.\\n        if (i < siweMsg.length && siweMsg[i] != \\\"\\\\n\\\") {\\n            for (uint256 j = i; j < siweMsg.length; j++) {\\n                if (siweMsg[j] == 0x0a) {\\n                    p.statement = _substr(siweMsg, i, j);\\n                    i = j + 1; // End of statement new line.\\n                    break;\\n                }\\n            }\\n        }\\n\\n        i++; // New line.\\n\\n        (p.uri, i) = _parseField(siweMsg, \\\"URI\\\", i);\\n        (p.version, i) = _parseField(siweMsg, \\\"Version\\\", i);\\n        bytes memory chainId;\\n        (chainId, i) = _parseField(siweMsg, \\\"Chain ID\\\", i);\\n        p.chainId = _parseUint(chainId);\\n        (p.nonce, i) = _parseField(siweMsg, \\\"Nonce\\\", i);\\n        if (p.nonce.length < 8) {\\n            revert SiweParser_InvalidNonce();\\n        }\\n        (p.issuedAt, i) = _parseField(siweMsg, \\\"Issued At\\\", i);\\n        (p.expirationTime, i) = _parseField(siweMsg, \\\"Expiration Time\\\", i);\\n        (p.notBefore, i) = _parseField(siweMsg, \\\"Not Before\\\", i);\\n        (p.requestId, i) = _parseField(siweMsg, \\\"Request ID\\\", i);\\n\\n        // Parse resources, if they exist.\\n        uint256 newI;\\n        (, newI) = _parseField(siweMsg, \\\"Resources\\\", i);\\n        if (newI != i) {\\n            (p.resources, i) = _parseArray(siweMsg, newI);\\n        }\\n\\n        return p;\\n    }\\n\\n    /**\\n     * @notice Parse RFC 3339 (ISO 8601) string to timestamp.\\n     */\\n    function timestampFromIso(bytes memory str)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            DateTime.toTimestamp(\\n                uint16(_parseUint(_substr(str, 0, 4))),\\n                uint8(_parseUint(_substr(str, 5, 7))),\\n                uint8(_parseUint(_substr(str, 8, 10))),\\n                uint8(_parseUint(_substr(str, 11, 13))),\\n                uint8(_parseUint(_substr(str, 14, 16))),\\n                uint8(_parseUint(_substr(str, 17, 19)))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x07529271c0beff34900dcd2d967635ddf0af86645a1c5fdcf7396b12bc3a9965\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/auth/A13e.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {SignatureRSV} from \\\"../EthereumUtils.sol\\\";\\n\\n/**\\n * @title Interface for authenticatable contracts\\n * @notice This is the interface for universal authentication mechanism (e.g.\\n * SIWE):\\n * 1. The user-facing app calls `login()` which generates the authentication\\n *    token on-chain.\\n * 2. Any smart contract method that requires authentication can take this token\\n *    as an argument. Passing this token to `authMsgSender()` verifies it and\\n *    returns the **authenticated** user address. This verified address can then\\n *    serve as a user ID for authorization.\\n */\\nabstract contract A13e {\\n    /// A mapping of revoked authentication tokens. Access it directly or use the checkRevokedAuthToken modifier.\\n    mapping(bytes32 => bool) internal _revokedAuthTokens;\\n\\n    /// The authentication token was revoked\\n    error A13e_RevokedAuthToken();\\n\\n    /**\\n     * @notice Reverts if the given token was revoked\\n     */\\n    modifier checkRevokedAuthToken(bytes memory token) {\\n        if (_revokedAuthTokens[keccak256(token)]) {\\n            revert A13e_RevokedAuthToken();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Verify the login message and its signature and generate the\\n     * token.\\n     */\\n    function login(string calldata message, SignatureRSV calldata sig)\\n        external\\n        view\\n        virtual\\n        returns (bytes memory);\\n\\n    /**\\n     * @notice Validate the token and return authenticated msg.sender.\\n     */\\n    function authMsgSender(bytes memory token)\\n        internal\\n        view\\n        virtual\\n        returns (address);\\n\\n    /**\\n     * @notice Revoke the authentication token with the corresponding hash.\\n     * e.g. In case when the token is leaked or for extra-secure apps on\\n     * every logout.\\n     */\\n    function revokeAuthToken(bytes32 token) internal {\\n        _revokedAuthTokens[token] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x0cf14dfe3264acfd5b67c0559d668dfbbdeea96879ade2c1144aac3931968fe2\",\"license\":\"Apache-2.0\"},\"@oasisprotocol/sapphire-contracts/contracts/auth/SiweAuth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {SignatureRSV, A13e} from \\\"./A13e.sol\\\";\\nimport {ParsedSiweMessage, SiweParser} from \\\"../SiweParser.sol\\\";\\nimport {Sapphire} from \\\"../Sapphire.sol\\\";\\n\\n/// @title AuthToken structure for SIWE-based authentication\\nstruct AuthToken {\\n    string domain; // [ scheme \\\"://\\\" ] domain.\\n    address userAddr;\\n    uint256 validUntil; // in Unix timestamp.\\n    string statement; // Human-readable statement from the SIWE message.\\n    string[] resources; // Resources this token grants access to.\\n}\\n\\n/**\\n * @title Base contract for SIWE-based authentication\\n * @notice Inherit this contract if you wish to enable SIWE-based\\n * authentication in your contract functions that require authentication.\\n * The smart contract needs to be bound to a domain (passed in constructor).\\n *\\n * #### Example\\n *\\n * ```solidity\\n * contract MyContract is SiweAuth {\\n *   address private _owner;\\n *   string private _message;\\n *\\n *   modifier onlyOwner(bytes memory token) {\\n *     if (msg.sender != _owner && authMsgSender(token) != _owner) {\\n *       revert(\\\"not allowed\\\");\\n *     }\\n *     _;\\n *   }\\n *\\n *   constructor(string memory domain) SiweAuth(domain) {\\n *     _owner = msg.sender;\\n *   }\\n *\\n *   function getSecretMessage(bytes memory token) external view onlyOwner(token) returns (string memory) {\\n *     return _message;\\n *   }\\n *\\n *   function setSecretMessage(string calldata message) external onlyOwner(\\\"\\\") {\\n *     _message = message;\\n *   }\\n * }\\n * ```\\n */\\ncontract SiweAuth is A13e {\\n    /// Domain which the dApp is associated with\\n    string internal _domain;\\n    /// Encryption key which the authentication tokens are encrypted with\\n    bytes32 private _authTokenEncKey;\\n    /// Default authentication token validity, if no expiration-time provided\\n    uint256 private constant DEFAULT_VALIDITY = 24 hours;\\n\\n    /// Chain ID in the SIWE message does not match the actual chain ID\\n    error SiweAuth_ChainIdMismatch();\\n    /// Domain in the SIWE message does not match the domain of a dApp\\n    error SiweAuth_DomainMismatch();\\n    /// User address in the SIWE message does not match the message signer's address\\n    error SiweAuth_AddressMismatch();\\n    /// The Not before value in the SIWE message is still in the future\\n    error SiweAuth_NotBeforeInFuture();\\n    /// Validity of the authentication token or the Expires value in the SIWE message is in the past\\n    error SiweAuth_Expired();\\n\\n    /**\\n     * @notice Instantiate the contract which uses SIWE for authentication and\\n     * runs on the specified domain.\\n     * @param inDomain The domain this contract is associated with\\n     */\\n    constructor(string memory inDomain) {\\n        _authTokenEncKey = bytes32(Sapphire.randomBytes(32, \\\"\\\"));\\n        _domain = inDomain;\\n    }\\n\\n    /**\\n     * @notice Login using a SIWE message and signature\\n     * @param siweMsg The signed SIWE message\\n     * @param sig The signature of the SIWE message\\n     * @return The encrypted authentication token\\n     */\\n    function login(string calldata siweMsg, SignatureRSV calldata sig)\\n        external\\n        view\\n        override\\n        returns (bytes memory)\\n    {\\n        AuthToken memory b;\\n\\n        // Derive the user's address from the signature.\\n        bytes memory eip191msg = abi.encodePacked(\\n            \\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n            Strings.toString(bytes(siweMsg).length),\\n            siweMsg\\n        );\\n        address addr = ecrecover(\\n            keccak256(eip191msg),\\n            uint8(sig.v),\\n            sig.r,\\n            sig.s\\n        );\\n        b.userAddr = addr;\\n\\n        ParsedSiweMessage memory p = SiweParser.parseSiweMsg(bytes(siweMsg));\\n\\n        if (p.chainId != block.chainid) {\\n            revert SiweAuth_ChainIdMismatch();\\n        }\\n\\n        if (keccak256(p.schemeDomain) != keccak256(bytes(_domain))) {\\n            revert SiweAuth_DomainMismatch();\\n        }\\n        b.domain = string(p.schemeDomain);\\n\\n        if (p.addr != addr) {\\n            revert SiweAuth_AddressMismatch();\\n        }\\n\\n        if (\\n            p.notBefore.length != 0 &&\\n            block.timestamp <= SiweParser.timestampFromIso(p.notBefore)\\n        ) {\\n            revert SiweAuth_NotBeforeInFuture();\\n        }\\n\\n        if (p.expirationTime.length != 0) {\\n            // Compute expected block number at expiration time.\\n            uint256 expirationTime = SiweParser.timestampFromIso(\\n                p.expirationTime\\n            );\\n            b.validUntil = expirationTime;\\n        } else {\\n            // Otherwise, just take the default validity.\\n            b.validUntil = block.timestamp + DEFAULT_VALIDITY;\\n        }\\n        if (block.timestamp >= b.validUntil) {\\n            revert SiweAuth_Expired();\\n        }\\n\\n        // Store statement from the SIWE message.\\n        b.statement = string(p.statement);\\n\\n        // Store resources from the SIWE message.\\n        b.resources = new string[](p.resources.length);\\n        for (uint256 i = 0; i < p.resources.length; i++) {\\n            b.resources[i] = string(p.resources[i]);\\n        }\\n\\n        bytes memory encB = Sapphire.encrypt(\\n            _authTokenEncKey,\\n            0,\\n            abi.encode(b),\\n            \\\"\\\"\\n        );\\n        return encB;\\n    }\\n\\n    /**\\n     * @notice Return the domain associated with the dApp.\\n     * @return The domain string\\n     */\\n    function domain() public view returns (string memory) {\\n        return _domain;\\n    }\\n\\n    /**\\n     * @notice Get the authenticated address from a token\\n     * @param token The authentication token\\n     * @return The authenticated user address or zero address if token is empty\\n     */\\n    function authMsgSender(bytes memory token)\\n        internal\\n        view\\n        override\\n        checkRevokedAuthToken(token)\\n        returns (address)\\n    {\\n        if (token.length == 0) {\\n            return address(0);\\n        }\\n\\n        AuthToken memory b = decodeAndValidateToken(token);\\n        return b.userAddr;\\n    }\\n\\n    /**\\n     * @notice Get the statement from the authentication token\\n     * @param token The authentication token\\n     * @return The statement string from the SIWE message\\n     */\\n    function getStatement(bytes memory token)\\n        internal\\n        view\\n        checkRevokedAuthToken(token)\\n        returns (string memory)\\n    {\\n        if (token.length == 0) {\\n            return \\\"\\\";\\n        }\\n\\n        AuthToken memory b = decodeAndValidateToken(token);\\n        return b.statement;\\n    }\\n\\n    /**\\n     * @notice Get all resources from the authentication token\\n     * @param token The authentication token\\n     * @return Array of resource URIs the token grants access to\\n     */\\n    function getResources(bytes memory token)\\n        internal\\n        view\\n        checkRevokedAuthToken(token)\\n        returns (string[] memory)\\n    {\\n        if (token.length == 0) {\\n            return new string[](0);\\n        }\\n\\n        AuthToken memory b = decodeAndValidateToken(token);\\n        return b.resources;\\n    }\\n\\n    /**\\n     * @notice Helper function to decrypt, decode and validate a token\\n     * @dev Performs token decoding as well as domain and validation\\n     * @param token The authentication token\\n     * @return The decoded and validated AuthToken struct\\n     */\\n    function decodeAndValidateToken(bytes memory token)\\n        internal\\n        view\\n        virtual\\n        returns (AuthToken memory)\\n    {\\n        bytes memory authTokenEncoded = Sapphire.decrypt(\\n            _authTokenEncKey,\\n            0,\\n            token,\\n            \\\"\\\"\\n        );\\n        AuthToken memory b = abi.decode(authTokenEncoded, (AuthToken));\\n\\n        // Validate domain\\n        if (keccak256(bytes(b.domain)) != keccak256(bytes(_domain))) {\\n            revert SiweAuth_DomainMismatch();\\n        }\\n\\n        // Validate expiry\\n        if (b.validUntil < block.timestamp) {\\n            revert SiweAuth_Expired();\\n        }\\n\\n        return b;\\n    }\\n}\\n\",\"keccak256\":\"0x99fe870c763ff9329f6bac4484ab0ec54fb90ca8bb665b44fd2e058fe739acda\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\\n        (1 << 0x08) | // backspace\\n            (1 << 0x09) | // tab\\n            (1 << 0x0a) | // newline\\n            (1 << 0x0c) | // form feed\\n            (1 << 0x0d) | // carriage return\\n            (1 << 0x22) | // double quote\\n            (1 << 0x5c); // backslash\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(add(buffer, 0x20), length)\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress-string} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\\n     *\\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\\n     *\\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\\n     * characters that are not in this range, but other tooling may provide different results.\\n     */\\n    function escapeJSON(string memory input) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(input);\\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\\n        uint256 outputLength = 0;\\n\\n        for (uint256 i; i < buffer.length; ++i) {\\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\\n                output[outputLength++] = \\\"\\\\\\\\\\\";\\n                if (char == 0x08) output[outputLength++] = \\\"b\\\";\\n                else if (char == 0x09) output[outputLength++] = \\\"t\\\";\\n                else if (char == 0x0a) output[outputLength++] = \\\"n\\\";\\n                else if (char == 0x0c) output[outputLength++] = \\\"f\\\";\\n                else if (char == 0x0d) output[outputLength++] = \\\"r\\\";\\n                else if (char == 0x5c) output[outputLength++] = \\\"\\\\\\\\\\\";\\n                else if (char == 0x22) {\\n                    // solhint-disable-next-line quotes\\n                    output[outputLength++] = '\\\"';\\n                }\\n            } else {\\n                output[outputLength++] = char;\\n            }\\n        }\\n        // write the actual length and deallocate unused memory\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(output, outputLength)\\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\\n        }\\n\\n        return string(output);\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(add(buffer, 0x20), offset))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xad148d59f05165f9217d0a9e1ac8f772abb02ea6aaad8a756315c532bf79f9f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/UserContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SiweAuth} from \\\"@oasisprotocol/sapphire-contracts/contracts/auth/SiweAuth.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * User Contract for storing encrypted chat data\\n * Each user gets their own contract for privacy\\n * @author BuidlGuidl\\n */\\ncontract UserContract is Ownable, SiweAuth {\\n    constructor(string memory domain) Ownable(msg.sender) SiweAuth(domain) {}\\n    // User data\\n    address public user;\\n    uint256 public subscriptionId;\\n    uint256 public createdAt;\\n    bool public isInitialized;\\n    \\n    // Chat session management\\n    struct ChatSession {\\n        bytes32 sessionId;\\n        uint256 createdAt;\\n        uint256 lastActivity;\\n        bool isActive;\\n        uint256 messageCount;\\n    }\\n    \\n    // Chat message structure\\n    struct ChatMessage {\\n        bytes encryptedUserMessage;\\n        bytes encryptedAIResponse;\\n        uint256 timestamp;\\n        uint256 messageOrder;\\n    }\\n    \\n    // Chat summary structure\\n    struct ChatSummary {\\n        bytes32 sessionId;\\n        bytes encryptedSummary;\\n        uint256 createdAt;\\n        uint256 messageCount;\\n    }\\n    \\n    // Storage mappings\\n    mapping(bytes32 => ChatSession) public chatSessions;\\n    mapping(bytes32 => ChatMessage[]) public chatMessages;\\n    mapping(bytes32 => ChatSummary) public chatSummaries;\\n    mapping(bytes32 => uint256) public sessionMessageCount;\\n    bytes32[] public userSessionIds;\\n    \\n    // TEE contract access (for AI processing)\\n    address public teeContract;\\n    \\n    // Events\\n    event ChatSessionCreated(address indexed user, bytes32 indexed sessionId, uint256 timestamp);\\n    event ChatMessageStored(address indexed user, bytes32 indexed sessionId, uint256 messageOrder, uint256 timestamp);\\n    event ChatSessionClosed(address indexed user, bytes32 indexed sessionId, uint256 timestamp);\\n    event ChatSummaryStored(address indexed user, bytes32 indexed sessionId, uint256 timestamp);\\n    event TEEContractUpdated(address indexed oldTEE, address indexed newTEE);\\n    event UserContractInitialized(address indexed user, uint256 subscriptionId, uint256 timestamp);\\n    \\n    // Errors\\n    error ContractNotInitialized();\\n    error SessionNotFound();\\n    error SessionAlreadyExists();\\n    error UnauthorizedAccess();\\n    error InvalidSessionId();\\n    error InvalidMessageOrder();\\n    \\n    // Modifiers\\n    modifier onlyInitialized() {\\n        if (!isInitialized) {\\n            revert ContractNotInitialized();\\n        }\\n        _;\\n    }\\n    \\n    modifier onlyUser(bytes memory token) {\\n        if (msg.sender != user && authMsgSender(token) != user) {\\n            revert UnauthorizedAccess();\\n        }\\n        _;\\n    }\\n    \\n    modifier onlyUserDirect() {\\n        if (msg.sender != user) {\\n            revert UnauthorizedAccess();\\n        }\\n        _;\\n    }\\n    \\n    modifier onlyTEE() {\\n        if (msg.sender != teeContract) {\\n            revert UnauthorizedAccess();\\n        }\\n        _;\\n    }\\n    \\n    modifier validSessionId(bytes32 sessionId) {\\n        if (sessionId == bytes32(0)) {\\n            revert InvalidSessionId();\\n        }\\n        _;\\n    }\\n    \\n    /**\\n     * Initialize the user contract\\n     * Can only be called once by the factory\\n     */\\n    function initialize(address _user, uint256 _subscriptionId) external {\\n        require(!isInitialized, \\\"Already initialized\\\");\\n        require(_user != address(0), \\\"Invalid user address\\\");\\n        \\n        user = _user;\\n        subscriptionId = _subscriptionId;\\n        createdAt = block.timestamp;\\n        isInitialized = true;\\n        \\n        emit UserContractInitialized(_user, _subscriptionId, block.timestamp);\\n    }\\n    \\n    /**\\n     * Create a new chat session\\n     * @return sessionId The new session ID\\n     */\\n    function createNewSession() external onlyUserDirect onlyInitialized returns (bytes32) {\\n        uint256 sessionCounter = userSessionIds.length;\\n        bytes32 sessionId = keccak256(abi.encodePacked(user, block.timestamp, sessionCounter));\\n        \\n        // Ensure unique session ID\\n        while (chatSessions[sessionId].createdAt != 0) {\\n            sessionCounter++;\\n            sessionId = keccak256(abi.encodePacked(user, block.timestamp, sessionCounter));\\n        }\\n        \\n        ChatSession memory newSession = ChatSession({\\n            sessionId: sessionId,\\n            createdAt: block.timestamp,\\n            lastActivity: block.timestamp,\\n            isActive: true,\\n            messageCount: 0\\n        });\\n        \\n        chatSessions[sessionId] = newSession;\\n        userSessionIds.push(sessionId);\\n        sessionMessageCount[sessionId] = 0;\\n        \\n        emit ChatSessionCreated(user, sessionId, block.timestamp);\\n        \\n        return sessionId;\\n    }\\n    \\n    /**\\n     * Store a chat message in a session\\n     * @param sessionId The session ID\\n     * @param encryptedUserMessage Encrypted user message\\n     * @param encryptedAIResponse Encrypted AI response\\n     */\\n    function storeChatMessage(\\n        bytes32 sessionId,\\n        bytes calldata encryptedUserMessage,\\n        bytes calldata encryptedAIResponse\\n    ) external onlyUserDirect onlyInitialized validSessionId(sessionId) {\\n        require(chatSessions[sessionId].createdAt != 0, \\\"Session not found\\\");\\n        require(chatSessions[sessionId].isActive, \\\"Session is closed\\\");\\n        \\n        uint256 messageOrder = sessionMessageCount[sessionId];\\n        \\n        ChatMessage memory newMessage = ChatMessage({\\n            encryptedUserMessage: encryptedUserMessage,\\n            encryptedAIResponse: encryptedAIResponse,\\n            timestamp: block.timestamp,\\n            messageOrder: messageOrder\\n        });\\n        \\n        chatMessages[sessionId].push(newMessage);\\n        sessionMessageCount[sessionId]++;\\n        chatSessions[sessionId].lastActivity = block.timestamp;\\n        chatSessions[sessionId].messageCount++;\\n        \\n        emit ChatMessageStored(user, sessionId, messageOrder, block.timestamp);\\n    }\\n    \\n    /**\\n     * Store a chat summary (called by user with SIWE authentication)\\n     * @param sessionId The session ID\\n     * @param encryptedSummary Encrypted summary from AI\\n     * @param token SIWE authentication token\\n     */\\n    function storeChatSummary(\\n        bytes32 sessionId,\\n        bytes calldata encryptedSummary,\\n        bytes memory token\\n    ) external onlyUser(token) onlyInitialized validSessionId(sessionId) {\\n        require(chatSessions[sessionId].createdAt != 0, \\\"Session not found\\\");\\n        \\n        ChatSummary memory summary = ChatSummary({\\n            sessionId: sessionId,\\n            encryptedSummary: encryptedSummary,\\n            createdAt: block.timestamp,\\n            messageCount: chatSessions[sessionId].messageCount\\n        });\\n        \\n        chatSummaries[sessionId] = summary;\\n        \\n        emit ChatSummaryStored(user, sessionId, block.timestamp);\\n    }\\n    \\n    /**\\n     * Get chat history for a session\\n     * @param sessionId The session ID\\n     * @return Array of chat messages\\n     */\\n    function getChatHistory(bytes32 sessionId) external view onlyUserDirect onlyInitialized validSessionId(sessionId) returns (ChatMessage[] memory) {\\n        require(chatSessions[sessionId].createdAt != 0, \\\"Session not found\\\");\\n        return chatMessages[sessionId];\\n    }\\n    \\n    /**\\n     * Get chat summary for a session\\n     * @param sessionId The session ID\\n     * @return Chat summary\\n     */\\n    function getChatSummary(bytes32 sessionId, bytes memory token) external view onlyUser(token) onlyInitialized validSessionId(sessionId) returns (ChatSummary memory) {\\n        require(chatSessions[sessionId].createdAt != 0, \\\"Session not found\\\");\\n        return chatSummaries[sessionId];\\n    }\\n    \\n    /**\\n     * Get session information\\n     * @param sessionId The session ID\\n     * @return Session information\\n     */\\n    function getSessionInfo(bytes32 sessionId) external view onlyUserDirect onlyInitialized validSessionId(sessionId) returns (ChatSession memory) {\\n        require(chatSessions[sessionId].createdAt != 0, \\\"Session not found\\\");\\n        return chatSessions[sessionId];\\n    }\\n    \\n    /**\\n     * Get all active sessions for the user\\n     * @return Array of active session IDs\\n     */\\n    function getActiveSessions() external view onlyUserDirect onlyInitialized returns (bytes32[] memory) {\\n        bytes32[] memory activeSessions = new bytes32[](userSessionIds.length);\\n        uint256 activeCount = 0;\\n        \\n        for (uint256 i = 0; i < userSessionIds.length; i++) {\\n            bytes32 sessionId = userSessionIds[i];\\n            if (chatSessions[sessionId].isActive) {\\n                activeSessions[activeCount] = sessionId;\\n                activeCount++;\\n            }\\n        }\\n        \\n        // Resize array to actual count\\n        bytes32[] memory result = new bytes32[](activeCount);\\n        for (uint256 i = 0; i < activeCount; i++) {\\n            result[i] = activeSessions[i];\\n        }\\n        \\n        return result;\\n    }\\n    \\n    /**\\n     * Close a chat session\\n     * @param sessionId The session ID to close\\n     */\\n    function closeSession(bytes32 sessionId) external onlyUserDirect onlyInitialized validSessionId(sessionId) {\\n        require(chatSessions[sessionId].createdAt != 0, \\\"Session not found\\\");\\n        require(chatSessions[sessionId].isActive, \\\"Session already closed\\\");\\n        \\n        chatSessions[sessionId].isActive = false;\\n        chatSessions[sessionId].lastActivity = block.timestamp;\\n        \\n        emit ChatSessionClosed(user, sessionId, block.timestamp);\\n    }\\n    \\n    /**\\n     * Delete a session and all its data\\n     * @param sessionId The session ID to delete\\n     */\\n    function deleteSession(bytes32 sessionId) external onlyUserDirect onlyInitialized validSessionId(sessionId) {\\n        require(chatSessions[sessionId].createdAt != 0, \\\"Session not found\\\");\\n        \\n        // Remove from userSessionIds array\\n        for (uint256 i = 0; i < userSessionIds.length; i++) {\\n            if (userSessionIds[i] == sessionId) {\\n                userSessionIds[i] = userSessionIds[userSessionIds.length - 1];\\n                userSessionIds.pop();\\n                break;\\n            }\\n        }\\n        \\n        // Clear session data\\n        delete chatSessions[sessionId];\\n        delete chatMessages[sessionId];\\n        delete chatSummaries[sessionId];\\n        delete sessionMessageCount[sessionId];\\n    }\\n    \\n    /**\\n     * Set TEE contract address (for AI processing)\\n     * @param _teeContract TEE contract address\\n     */\\n    function setTEEContract(address _teeContract) external onlyOwner {\\n        require(_teeContract != address(0), \\\"Invalid TEE contract address\\\");\\n        address oldTEE = teeContract;\\n        teeContract = _teeContract;\\n        \\n        emit TEEContractUpdated(oldTEE, _teeContract);\\n    }\\n    \\n    /**\\n     * Get user contract information\\n     * @return _user User address\\n     * @return _subscriptionId Subscription ID\\n     * @return _createdAt Contract creation timestamp\\n     * @return _totalSessions Total number of sessions\\n     */\\n    function getUserInfo() external view onlyUserDirect onlyInitialized returns (\\n        address _user,\\n        uint256 _subscriptionId,\\n        uint256 _createdAt,\\n        uint256 _totalSessions\\n    ) {\\n        return (user, subscriptionId, createdAt, userSessionIds.length);\\n    }\\n    \\n    /**\\n     * Get total message count for a session\\n     * @param sessionId The session ID\\n     * @return Message count\\n     */\\n    function getSessionMessageCount(bytes32 sessionId) external view onlyUserDirect onlyInitialized validSessionId(sessionId) returns (uint256) {\\n        return sessionMessageCount[sessionId];\\n    }\\n    \\n    /**\\n     * Get all session IDs for the user\\n     * @return Array of session IDs\\n     */\\n    function getAllSessionIds(bytes memory token) external view onlyUser(token) onlyInitialized returns (bytes32[] memory) {\\n        return userSessionIds;\\n    }\\n} \",\"keccak256\":\"0x122960ccf959a778f40307ca18bc762aadce3dd922f75d2a15ade2164f10397d\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 2896,
            "contract": "contracts/UserContract.sol:UserContract",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2352,
            "contract": "contracts/UserContract.sol:UserContract",
            "label": "_revokedAuthTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_bool)"
          },
          {
            "astId": 2436,
            "contract": "contracts/UserContract.sol:UserContract",
            "label": "_domain",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2439,
            "contract": "contracts/UserContract.sol:UserContract",
            "label": "_authTokenEncKey",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 9652,
            "contract": "contracts/UserContract.sol:UserContract",
            "label": "user",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 9654,
            "contract": "contracts/UserContract.sol:UserContract",
            "label": "subscriptionId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9656,
            "contract": "contracts/UserContract.sol:UserContract",
            "label": "createdAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9658,
            "contract": "contracts/UserContract.sol:UserContract",
            "label": "isInitialized",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 9692,
            "contract": "contracts/UserContract.sol:UserContract",
            "label": "chatSessions",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_bytes32,t_struct(ChatSession)9669_storage)"
          },
          {
            "astId": 9698,
            "contract": "contracts/UserContract.sol:UserContract",
            "label": "chatMessages",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_bytes32,t_array(t_struct(ChatMessage)9678_storage)dyn_storage)"
          },
          {
            "astId": 9703,
            "contract": "contracts/UserContract.sol:UserContract",
            "label": "chatSummaries",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_bytes32,t_struct(ChatSummary)9687_storage)"
          },
          {
            "astId": 9707,
            "contract": "contracts/UserContract.sol:UserContract",
            "label": "sessionMessageCount",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 9710,
            "contract": "contracts/UserContract.sol:UserContract",
            "label": "userSessionIds",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9712,
            "contract": "contracts/UserContract.sol:UserContract",
            "label": "teeContract",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "base": "t_bytes32",
            "encoding": "dynamic_array",
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(ChatMessage)9678_storage)dyn_storage": {
            "base": "t_struct(ChatMessage)9678_storage",
            "encoding": "dynamic_array",
            "label": "struct UserContract.ChatMessage[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes_storage": {
            "encoding": "bytes",
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_array(t_struct(ChatMessage)9678_storage)dyn_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => struct UserContract.ChatMessage[])",
            "numberOfBytes": "32",
            "value": "t_array(t_struct(ChatMessage)9678_storage)dyn_storage"
          },
          "t_mapping(t_bytes32,t_bool)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_bytes32,t_struct(ChatSession)9669_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => struct UserContract.ChatSession)",
            "numberOfBytes": "32",
            "value": "t_struct(ChatSession)9669_storage"
          },
          "t_mapping(t_bytes32,t_struct(ChatSummary)9687_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => struct UserContract.ChatSummary)",
            "numberOfBytes": "32",
            "value": "t_struct(ChatSummary)9687_storage"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(ChatMessage)9678_storage": {
            "encoding": "inplace",
            "label": "struct UserContract.ChatMessage",
            "members": [
              {
                "astId": 9671,
                "contract": "contracts/UserContract.sol:UserContract",
                "label": "encryptedUserMessage",
                "offset": 0,
                "slot": "0",
                "type": "t_bytes_storage"
              },
              {
                "astId": 9673,
                "contract": "contracts/UserContract.sol:UserContract",
                "label": "encryptedAIResponse",
                "offset": 0,
                "slot": "1",
                "type": "t_bytes_storage"
              },
              {
                "astId": 9675,
                "contract": "contracts/UserContract.sol:UserContract",
                "label": "timestamp",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 9677,
                "contract": "contracts/UserContract.sol:UserContract",
                "label": "messageOrder",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(ChatSession)9669_storage": {
            "encoding": "inplace",
            "label": "struct UserContract.ChatSession",
            "members": [
              {
                "astId": 9660,
                "contract": "contracts/UserContract.sol:UserContract",
                "label": "sessionId",
                "offset": 0,
                "slot": "0",
                "type": "t_bytes32"
              },
              {
                "astId": 9662,
                "contract": "contracts/UserContract.sol:UserContract",
                "label": "createdAt",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 9664,
                "contract": "contracts/UserContract.sol:UserContract",
                "label": "lastActivity",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 9666,
                "contract": "contracts/UserContract.sol:UserContract",
                "label": "isActive",
                "offset": 0,
                "slot": "3",
                "type": "t_bool"
              },
              {
                "astId": 9668,
                "contract": "contracts/UserContract.sol:UserContract",
                "label": "messageCount",
                "offset": 0,
                "slot": "4",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_struct(ChatSummary)9687_storage": {
            "encoding": "inplace",
            "label": "struct UserContract.ChatSummary",
            "members": [
              {
                "astId": 9680,
                "contract": "contracts/UserContract.sol:UserContract",
                "label": "sessionId",
                "offset": 0,
                "slot": "0",
                "type": "t_bytes32"
              },
              {
                "astId": 9682,
                "contract": "contracts/UserContract.sol:UserContract",
                "label": "encryptedSummary",
                "offset": 0,
                "slot": "1",
                "type": "t_bytes_storage"
              },
              {
                "astId": 9684,
                "contract": "contracts/UserContract.sol:UserContract",
                "label": "createdAt",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 9686,
                "contract": "contracts/UserContract.sol:UserContract",
                "label": "messageCount",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "errors": {
          "A13e_RevokedAuthToken()": [
            {
              "notice": "The authentication token was revoked"
            }
          ],
          "SiweAuth_AddressMismatch()": [
            {
              "notice": "User address in the SIWE message does not match the message signer's address"
            }
          ],
          "SiweAuth_ChainIdMismatch()": [
            {
              "notice": "Chain ID in the SIWE message does not match the actual chain ID"
            }
          ],
          "SiweAuth_DomainMismatch()": [
            {
              "notice": "Domain in the SIWE message does not match the domain of a dApp"
            }
          ],
          "SiweAuth_Expired()": [
            {
              "notice": "Validity of the authentication token or the Expires value in the SIWE message is in the past"
            }
          ],
          "SiweAuth_NotBeforeInFuture()": [
            {
              "notice": "The Not before value in the SIWE message is still in the future"
            }
          ],
          "SiweParser_InvalidAddressLength()": [
            {
              "notice": "Invalid length of the hex-encoded address"
            }
          ],
          "SiweParser_InvalidNonce()": [
            {
              "notice": "Invalid length of the nonce"
            }
          ]
        },
        "kind": "user",
        "methods": {
          "closeSession(bytes32)": {
            "notice": "Close a chat session"
          },
          "createNewSession()": {
            "notice": "Create a new chat session"
          },
          "deleteSession(bytes32)": {
            "notice": "Delete a session and all its data"
          },
          "domain()": {
            "notice": "Return the domain associated with the dApp."
          },
          "getActiveSessions()": {
            "notice": "Get all active sessions for the user"
          },
          "getAllSessionIds(bytes)": {
            "notice": "Get all session IDs for the user"
          },
          "getChatHistory(bytes32)": {
            "notice": "Get chat history for a session"
          },
          "getChatSummary(bytes32,bytes)": {
            "notice": "Get chat summary for a session"
          },
          "getSessionInfo(bytes32)": {
            "notice": "Get session information"
          },
          "getSessionMessageCount(bytes32)": {
            "notice": "Get total message count for a session"
          },
          "getUserInfo()": {
            "notice": "Get user contract information"
          },
          "initialize(address,uint256)": {
            "notice": "Initialize the user contract Can only be called once by the factory"
          },
          "login(string,(bytes32,bytes32,uint256))": {
            "notice": "Login using a SIWE message and signature"
          },
          "setTEEContract(address)": {
            "notice": "Set TEE contract address (for AI processing)"
          },
          "storeChatMessage(bytes32,bytes,bytes)": {
            "notice": "Store a chat message in a session"
          },
          "storeChatSummary(bytes32,bytes,bytes)": {
            "notice": "Store a chat summary (called by user with SIWE authentication)"
          }
        },
        "notice": "User Contract for storing encrypted chat data Each user gets their own contract for privacy",
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@oasisprotocol/sapphire-contracts/contracts/auth/A13e.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {SignatureRSV} from \\\"../EthereumUtils.sol\\\";\\n\\n/**\\n * @title Interface for authenticatable contracts\\n * @notice This is the interface for universal authentication mechanism (e.g.\\n * SIWE):\\n * 1. The user-facing app calls `login()` which generates the authentication\\n *    token on-chain.\\n * 2. Any smart contract method that requires authentication can take this token\\n *    as an argument. Passing this token to `authMsgSender()` verifies it and\\n *    returns the **authenticated** user address. This verified address can then\\n *    serve as a user ID for authorization.\\n */\\nabstract contract A13e {\\n    /// A mapping of revoked authentication tokens. Access it directly or use the checkRevokedAuthToken modifier.\\n    mapping(bytes32 => bool) internal _revokedAuthTokens;\\n\\n    /// The authentication token was revoked\\n    error A13e_RevokedAuthToken();\\n\\n    /**\\n     * @notice Reverts if the given token was revoked\\n     */\\n    modifier checkRevokedAuthToken(bytes memory token) {\\n        if (_revokedAuthTokens[keccak256(token)]) {\\n            revert A13e_RevokedAuthToken();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Verify the login message and its signature and generate the\\n     * token.\\n     */\\n    function login(string calldata message, SignatureRSV calldata sig)\\n        external\\n        view\\n        virtual\\n        returns (bytes memory);\\n\\n    /**\\n     * @notice Validate the token and return authenticated msg.sender.\\n     */\\n    function authMsgSender(bytes memory token)\\n        internal\\n        view\\n        virtual\\n        returns (address);\\n\\n    /**\\n     * @notice Revoke the authentication token with the corresponding hash.\\n     * e.g. In case when the token is leaked or for extra-secure apps on\\n     * every logout.\\n     */\\n    function revokeAuthToken(bytes32 token) internal {\\n        _revokedAuthTokens[token] = true;\\n    }\\n}\\n\"\n    },\n    \"@oasisprotocol/sapphire-contracts/contracts/auth/SiweAuth.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {SignatureRSV, A13e} from \\\"./A13e.sol\\\";\\nimport {ParsedSiweMessage, SiweParser} from \\\"../SiweParser.sol\\\";\\nimport {Sapphire} from \\\"../Sapphire.sol\\\";\\n\\n/// @title AuthToken structure for SIWE-based authentication\\nstruct AuthToken {\\n    string domain; // [ scheme \\\"://\\\" ] domain.\\n    address userAddr;\\n    uint256 validUntil; // in Unix timestamp.\\n    string statement; // Human-readable statement from the SIWE message.\\n    string[] resources; // Resources this token grants access to.\\n}\\n\\n/**\\n * @title Base contract for SIWE-based authentication\\n * @notice Inherit this contract if you wish to enable SIWE-based\\n * authentication in your contract functions that require authentication.\\n * The smart contract needs to be bound to a domain (passed in constructor).\\n *\\n * #### Example\\n *\\n * ```solidity\\n * contract MyContract is SiweAuth {\\n *   address private _owner;\\n *   string private _message;\\n *\\n *   modifier onlyOwner(bytes memory token) {\\n *     if (msg.sender != _owner && authMsgSender(token) != _owner) {\\n *       revert(\\\"not allowed\\\");\\n *     }\\n *     _;\\n *   }\\n *\\n *   constructor(string memory domain) SiweAuth(domain) {\\n *     _owner = msg.sender;\\n *   }\\n *\\n *   function getSecretMessage(bytes memory token) external view onlyOwner(token) returns (string memory) {\\n *     return _message;\\n *   }\\n *\\n *   function setSecretMessage(string calldata message) external onlyOwner(\\\"\\\") {\\n *     _message = message;\\n *   }\\n * }\\n * ```\\n */\\ncontract SiweAuth is A13e {\\n    /// Domain which the dApp is associated with\\n    string internal _domain;\\n    /// Encryption key which the authentication tokens are encrypted with\\n    bytes32 private _authTokenEncKey;\\n    /// Default authentication token validity, if no expiration-time provided\\n    uint256 private constant DEFAULT_VALIDITY = 24 hours;\\n\\n    /// Chain ID in the SIWE message does not match the actual chain ID\\n    error SiweAuth_ChainIdMismatch();\\n    /// Domain in the SIWE message does not match the domain of a dApp\\n    error SiweAuth_DomainMismatch();\\n    /// User address in the SIWE message does not match the message signer's address\\n    error SiweAuth_AddressMismatch();\\n    /// The Not before value in the SIWE message is still in the future\\n    error SiweAuth_NotBeforeInFuture();\\n    /// Validity of the authentication token or the Expires value in the SIWE message is in the past\\n    error SiweAuth_Expired();\\n\\n    /**\\n     * @notice Instantiate the contract which uses SIWE for authentication and\\n     * runs on the specified domain.\\n     * @param inDomain The domain this contract is associated with\\n     */\\n    constructor(string memory inDomain) {\\n        _authTokenEncKey = bytes32(Sapphire.randomBytes(32, \\\"\\\"));\\n        _domain = inDomain;\\n    }\\n\\n    /**\\n     * @notice Login using a SIWE message and signature\\n     * @param siweMsg The signed SIWE message\\n     * @param sig The signature of the SIWE message\\n     * @return The encrypted authentication token\\n     */\\n    function login(string calldata siweMsg, SignatureRSV calldata sig)\\n        external\\n        view\\n        override\\n        returns (bytes memory)\\n    {\\n        AuthToken memory b;\\n\\n        // Derive the user's address from the signature.\\n        bytes memory eip191msg = abi.encodePacked(\\n            \\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n            Strings.toString(bytes(siweMsg).length),\\n            siweMsg\\n        );\\n        address addr = ecrecover(\\n            keccak256(eip191msg),\\n            uint8(sig.v),\\n            sig.r,\\n            sig.s\\n        );\\n        b.userAddr = addr;\\n\\n        ParsedSiweMessage memory p = SiweParser.parseSiweMsg(bytes(siweMsg));\\n\\n        if (p.chainId != block.chainid) {\\n            revert SiweAuth_ChainIdMismatch();\\n        }\\n\\n        if (keccak256(p.schemeDomain) != keccak256(bytes(_domain))) {\\n            revert SiweAuth_DomainMismatch();\\n        }\\n        b.domain = string(p.schemeDomain);\\n\\n        if (p.addr != addr) {\\n            revert SiweAuth_AddressMismatch();\\n        }\\n\\n        if (\\n            p.notBefore.length != 0 &&\\n            block.timestamp <= SiweParser.timestampFromIso(p.notBefore)\\n        ) {\\n            revert SiweAuth_NotBeforeInFuture();\\n        }\\n\\n        if (p.expirationTime.length != 0) {\\n            // Compute expected block number at expiration time.\\n            uint256 expirationTime = SiweParser.timestampFromIso(\\n                p.expirationTime\\n            );\\n            b.validUntil = expirationTime;\\n        } else {\\n            // Otherwise, just take the default validity.\\n            b.validUntil = block.timestamp + DEFAULT_VALIDITY;\\n        }\\n        if (block.timestamp >= b.validUntil) {\\n            revert SiweAuth_Expired();\\n        }\\n\\n        // Store statement from the SIWE message.\\n        b.statement = string(p.statement);\\n\\n        // Store resources from the SIWE message.\\n        b.resources = new string[](p.resources.length);\\n        for (uint256 i = 0; i < p.resources.length; i++) {\\n            b.resources[i] = string(p.resources[i]);\\n        }\\n\\n        bytes memory encB = Sapphire.encrypt(\\n            _authTokenEncKey,\\n            0,\\n            abi.encode(b),\\n            \\\"\\\"\\n        );\\n        return encB;\\n    }\\n\\n    /**\\n     * @notice Return the domain associated with the dApp.\\n     * @return The domain string\\n     */\\n    function domain() public view returns (string memory) {\\n        return _domain;\\n    }\\n\\n    /**\\n     * @notice Get the authenticated address from a token\\n     * @param token The authentication token\\n     * @return The authenticated user address or zero address if token is empty\\n     */\\n    function authMsgSender(bytes memory token)\\n        internal\\n        view\\n        override\\n        checkRevokedAuthToken(token)\\n        returns (address)\\n    {\\n        if (token.length == 0) {\\n            return address(0);\\n        }\\n\\n        AuthToken memory b = decodeAndValidateToken(token);\\n        return b.userAddr;\\n    }\\n\\n    /**\\n     * @notice Get the statement from the authentication token\\n     * @param token The authentication token\\n     * @return The statement string from the SIWE message\\n     */\\n    function getStatement(bytes memory token)\\n        internal\\n        view\\n        checkRevokedAuthToken(token)\\n        returns (string memory)\\n    {\\n        if (token.length == 0) {\\n            return \\\"\\\";\\n        }\\n\\n        AuthToken memory b = decodeAndValidateToken(token);\\n        return b.statement;\\n    }\\n\\n    /**\\n     * @notice Get all resources from the authentication token\\n     * @param token The authentication token\\n     * @return Array of resource URIs the token grants access to\\n     */\\n    function getResources(bytes memory token)\\n        internal\\n        view\\n        checkRevokedAuthToken(token)\\n        returns (string[] memory)\\n    {\\n        if (token.length == 0) {\\n            return new string[](0);\\n        }\\n\\n        AuthToken memory b = decodeAndValidateToken(token);\\n        return b.resources;\\n    }\\n\\n    /**\\n     * @notice Helper function to decrypt, decode and validate a token\\n     * @dev Performs token decoding as well as domain and validation\\n     * @param token The authentication token\\n     * @return The decoded and validated AuthToken struct\\n     */\\n    function decodeAndValidateToken(bytes memory token)\\n        internal\\n        view\\n        virtual\\n        returns (AuthToken memory)\\n    {\\n        bytes memory authTokenEncoded = Sapphire.decrypt(\\n            _authTokenEncKey,\\n            0,\\n            token,\\n            \\\"\\\"\\n        );\\n        AuthToken memory b = abi.decode(authTokenEncoded, (AuthToken));\\n\\n        // Validate domain\\n        if (keccak256(bytes(b.domain)) != keccak256(bytes(_domain))) {\\n            revert SiweAuth_DomainMismatch();\\n        }\\n\\n        // Validate expiry\\n        if (b.validUntil < block.timestamp) {\\n            revert SiweAuth_Expired();\\n        }\\n\\n        return b;\\n    }\\n}\\n\"\n    },\n    \"@oasisprotocol/sapphire-contracts/contracts/DateTime.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Utility for converting date and time to timestamp\\n * @notice Considers leap year, but not leap second.\\n * @custom:attribution https://github.com/pipermerriam/ethereum-datetime/blob/master/contracts/DateTime.sol\\n */\\nlibrary DateTime {\\n    uint16 private constant ORIGIN_YEAR = 1970;\\n\\n    function isLeapYear(uint16 year) internal pure returns (bool) {\\n        if (year % 4 != 0) {\\n            return false;\\n        }\\n        if (year % 100 != 0) {\\n            return true;\\n        }\\n        if (year % 400 != 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Convert year, month, day, hour, minute, second to Unix timestamp.\\n     * @dev Leap second is not supported.\\n     */\\n    function toTimestamp(\\n        uint16 year,\\n        uint8 month,\\n        uint8 day,\\n        uint8 hour,\\n        uint8 minute,\\n        uint8 second\\n    ) internal pure returns (uint256 timestamp) {\\n        uint16 i;\\n\\n        // Year\\n        // TODO: Rewrite to O(1) time implementation.\\n        for (i = ORIGIN_YEAR; i < year; i++) {\\n            if (isLeapYear(i)) {\\n                timestamp += 366 days;\\n            } else {\\n                timestamp += 365 days;\\n            }\\n        }\\n\\n        // Month\\n        // TODO: Use constants for monthDayCounts (hex-encoded string?), rewrite to O(1) time implementation.\\n        uint32[12] memory monthDayCounts;\\n        monthDayCounts[0] = 31;\\n        if (isLeapYear(year)) {\\n            monthDayCounts[1] = 29;\\n        } else {\\n            monthDayCounts[1] = 28;\\n        }\\n        monthDayCounts[2] = 31;\\n        monthDayCounts[3] = 30;\\n        monthDayCounts[4] = 31;\\n        monthDayCounts[5] = 30;\\n        monthDayCounts[6] = 31;\\n        monthDayCounts[7] = 31;\\n        monthDayCounts[8] = 30;\\n        monthDayCounts[9] = 31;\\n        monthDayCounts[10] = 30;\\n        monthDayCounts[11] = 31;\\n\\n        for (i = 1; i < month; i++) {\\n            timestamp += monthDayCounts[i - 1] * 1 days;\\n        }\\n\\n        // Day\\n        timestamp += uint32(day - 1) * 1 days;\\n\\n        // Hour\\n        timestamp += uint32(hour) * 1 hours;\\n\\n        // Minute\\n        timestamp += uint16(minute) * 1 minutes;\\n\\n        // Second\\n        timestamp += second;\\n\\n        return timestamp;\\n    }\\n}\\n\"\n    },\n    \"@oasisprotocol/sapphire-contracts/contracts/EthereumUtils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.0;\\n\\nimport {Sapphire} from \\\"./Sapphire.sol\\\";\\n\\nstruct SignatureRSV {\\n    bytes32 r;\\n    bytes32 s;\\n    uint256 v;\\n}\\n\\nlibrary EthereumUtils {\\n    uint256 internal constant K256_P =\\n        0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f;\\n\\n    // (p+1)//4\\n    uint256 internal constant K256_P_PLUS_1_OVER_4 =\\n        0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c;\\n\\n    address internal constant PRECOMPILE_BIGMODEXP = address(0x5);\\n\\n    error expmod_Error();\\n\\n    function expmod(\\n        uint256 base,\\n        uint256 exponent,\\n        uint256 modulus\\n    ) internal view returns (uint256 out) {\\n        (bool success, bytes memory result) = PRECOMPILE_BIGMODEXP.staticcall(\\n            abi.encodePacked(\\n                uint256(0x20), // length of base\\n                uint256(0x20), // length of exponent\\n                uint256(0x20), // length of modulus\\n                base,\\n                exponent,\\n                modulus\\n            )\\n        );\\n\\n        if (!success) revert expmod_Error();\\n\\n        out = uint256(bytes32(result));\\n    }\\n\\n    error k256DeriveY_Invalid_Prefix_Error();\\n\\n    /**\\n     * @notice Recover Y coordinate from X coordinate and sign bit.\\n     * @param prefix 0x02 or 0x03 indicates sign bit of compressed point.\\n     * @param x X coordinate.\\n     */\\n    function k256DeriveY(uint8 prefix, uint256 x)\\n        internal\\n        view\\n        returns (uint256 y)\\n    {\\n        if (prefix != 0x02 && prefix != 0x03)\\n            revert k256DeriveY_Invalid_Prefix_Error();\\n\\n        // x^3 + ax + b, where a=0, b=7\\n        y = addmod(mulmod(x, mulmod(x, x, K256_P), K256_P), 7, K256_P);\\n\\n        // find square root of quadratic residue\\n        y = expmod(y, K256_P_PLUS_1_OVER_4, K256_P);\\n\\n        // negate y if indicated by sign bit\\n        if ((y + prefix) % 2 != 0) {\\n            y = K256_P - y;\\n        }\\n    }\\n\\n    error k256Decompress_Invalid_Length_Error();\\n\\n    /**\\n     * @notice Decompress SEC P256 k1 point.\\n     * @param pk 33 byte compressed public key.\\n     * @return x X coordinate.\\n     * @return y Y coordinate.\\n     */\\n    function k256Decompress(bytes memory pk)\\n        internal\\n        view\\n        returns (uint256 x, uint256 y)\\n    {\\n        if (pk.length != 33) revert k256Decompress_Invalid_Length_Error();\\n        assembly {\\n            // skip 32 byte length prefix, plus one byte sign prefix\\n            x := mload(add(pk, 33))\\n        }\\n        y = k256DeriveY(uint8(pk[0]), x);\\n    }\\n\\n    function k256PubkeyToEthereumAddress(bytes memory pubkey)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        (uint256 x, uint256 y) = k256Decompress(pubkey);\\n        return toEthereumAddress(x, y);\\n    }\\n\\n    /**\\n     * @notice Convert SEC P256 k1 curve point to Ethereum address.\\n     * @param x X coordinate.\\n     * @param y Y coordinate.\\n     * @custom:see https://gavwood.com/paper.pdf (pp. 212)\\n     */\\n    function toEthereumAddress(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        bytes32 digest = keccak256(abi.encodePacked(x, y));\\n\\n        return address(uint160((uint256(digest) << 96) >> 96));\\n    }\\n\\n    error DER_Split_Error();\\n\\n    /**\\n     * @notice Extracts the `r` and `s` parameters from a DER encoded ECDSA\\n     * signature.\\n     *\\n     * The signature is an ASN1 encoded SEQUENCE of the variable length `r` and\\n     * `s` INTEGERs.\\n     *\\n     * ```\\n     * | 0x30 | len(z) | 0x02 | len(r) |  r   | 0x02 | len(s) |  s   | = hex value\\n     * |  1   |   1    |   1  |   1    | 1-33 |  1   |   1    | 1-33 | = byte length\\n     * ```\\n     *\\n     * If the highest bit of either `r` or `s` is set, it will be prefix padded\\n     * with a zero byte. There is exponentially decreasing probability that\\n     * either `r` or `s` will be below 32 bytes. There is a very high\\n     * probability that either `r` or `s` will be 33 bytes. This function only\\n     * works if either `r` or `s` are 256bits or lower.\\n     *\\n     * @param der DER encoded ECDSA signature\\n     * @return rsv ECDSA R point X coordinate, and S scalar\\n     * @custom:see https://bitcoin.stackexchange.com/questions/58853/how-do-you-figure-out-the-r-and-s-out-of-a-signature-using-python\\n     */\\n    function splitDERSignature(bytes memory der)\\n        internal\\n        pure\\n        returns (SignatureRSV memory rsv)\\n    {\\n        if (der.length < 8) revert DER_Split_Error();\\n        if (der[0] != 0x30) revert DER_Split_Error();\\n        if (der[2] != 0x02) revert DER_Split_Error();\\n\\n        uint256 zLen = uint8(der[1]);\\n        uint256 rLen = uint8(der[3]);\\n        if (rLen > 33) revert DER_Split_Error();\\n\\n        uint256 sOffset = 4 + rLen;\\n        uint256 sLen = uint8(der[sOffset + 1]);\\n        if (sLen > 33) revert DER_Split_Error();\\n        if (der[sOffset] != 0x02) revert DER_Split_Error();\\n\\n        if (rLen + sLen + 4 != zLen) revert DER_Split_Error();\\n        if (der.length != zLen + 2) revert DER_Split_Error();\\n\\n        sOffset += 2;\\n        uint256 rOffset = 4;\\n\\n        if (rLen == 33) {\\n            if (der[4] != 0x00) revert DER_Split_Error();\\n            rOffset += 1;\\n            rLen -= 1;\\n        }\\n\\n        if (sLen == 33) {\\n            if (der[sOffset] != 0x00) revert DER_Split_Error();\\n            sOffset += 1;\\n            sLen -= 1;\\n        }\\n\\n        bytes32 r;\\n        bytes32 s;\\n\\n        assembly {\\n            r := mload(add(der, add(32, rOffset)))\\n            s := mload(add(der, add(32, sOffset)))\\n        }\\n\\n        // When length of either `r` or `s` is below 32 bytes\\n        // the 32 byte `mload` will suffix it with unknown stuff\\n        // shift right to remove the unknown stuff, prefixing with zeros instead\\n\\n        if (rLen < 32) {\\n            r >>= 8 * (32 - rLen);\\n        }\\n\\n        if (sLen < 32) {\\n            s >>= 8 * (32 - sLen);\\n        }\\n\\n        rsv.r = r;\\n        rsv.s = s;\\n    }\\n\\n    error recoverV_Error();\\n\\n    function recoverV(\\n        address pubkeyAddr,\\n        bytes32 digest,\\n        SignatureRSV memory rsv\\n    ) internal pure {\\n        rsv.v = 27;\\n\\n        if (ecrecover(digest, uint8(rsv.v), rsv.r, rsv.s) != pubkeyAddr) {\\n            rsv.v = 28;\\n\\n            if (ecrecover(digest, uint8(rsv.v), rsv.r, rsv.s) != pubkeyAddr) {\\n                revert recoverV_Error();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert a Secp256k1PrehashedKeccak256 signature to one accepted\\n     * by ecrecover.\\n     * @param pubkey 33 byte compressed public key.\\n     * @param digest 32 byte pre-hashed message digest.\\n     * @param signature ASN.1 DER encoded signature, as returned from\\n     * [`Sapphire.sign`](../Sapphire.sol/library.Sapphire.md#sign).\\n     * @return pubkeyAddr 20 byte Ethereum address.\\n     * @return rsv Ethereum EcDSA RSV signature values.\\n     * @custom:see https://gavwood.com/paper.pdf (pp. 206)\\n     */\\n    function toEthereumSignature(\\n        bytes memory pubkey,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) internal view returns (address pubkeyAddr, SignatureRSV memory rsv) {\\n        pubkeyAddr = k256PubkeyToEthereumAddress(pubkey);\\n\\n        rsv = splitDERSignature(signature);\\n\\n        recoverV(pubkeyAddr, digest, rsv);\\n    }\\n\\n    function sign(\\n        address pubkeyAddr,\\n        bytes32 secretKey,\\n        bytes32 digest\\n    ) internal view returns (SignatureRSV memory rsv) {\\n        bytes memory signature = Sapphire.sign(\\n            Sapphire.SigningAlg.Secp256k1PrehashedKeccak256,\\n            abi.encodePacked(secretKey),\\n            abi.encodePacked(digest),\\n            \\\"\\\"\\n        );\\n\\n        rsv = splitDERSignature(signature);\\n\\n        recoverV(pubkeyAddr, digest, rsv);\\n    }\\n\\n    /**\\n     * @notice Generate an Ethereum compatible SEC P256 k1 keypair and\\n     * corresponding public address.\\n     * @return pubkeyAddr Ethereum address.\\n     * @return secretKey Secret key used for signing.\\n     */\\n    function generateKeypair()\\n        internal\\n        view\\n        returns (address pubkeyAddr, bytes32 secretKey)\\n    {\\n        bytes memory randSeed = Sapphire.randomBytes(32, \\\"\\\");\\n\\n        secretKey = bytes32(randSeed);\\n\\n        (bytes memory pk, ) = Sapphire.generateSigningKeyPair(\\n            Sapphire.SigningAlg.Secp256k1PrehashedKeccak256,\\n            randSeed\\n        );\\n\\n        pubkeyAddr = k256PubkeyToEthereumAddress(pk);\\n    }\\n}\\n\"\n    },\n    \"@oasisprotocol/sapphire-contracts/contracts/Sapphire.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Sapphire\\n * @notice This library provides a number of convenient wrappers for\\n * cryptographic operations such as the x25519 key derivation, Deoxys-II-based\\n * encryption and decryption, signing key generation, message digest signing and\\n * verification, gas padding and hashing.\\n *\\n * Most of the mentioned functions are implemented as Sapphire's precompiles and\\n * are cheap to call.\\n *\\n * #### Calling Precompiles Manually\\n *\\n * You can override the wrappers and call Sapphire precompiles by dispatching\\n * calls to specific well-known contract addresses, as described below. The\\n * __Precompile address__ section of each function will show you the address\\n * of the corresponding precompile.\\n *\\n * Input parameters should be packed into a contiguous memory region with each\\n * chunk of data padded to 32 bytes as usual. The recommended way to construct\\n * parameter byte sequences in Solidity is with `abi.encode` and `abi.decode`,\\n * which will transparently handle things like putting `bytes` lengths in the\\n * correct position.\\n */\\nlibrary Sapphire {\\n    // Oasis-specific, confidential precompiles\\n    address internal constant RANDOM_BYTES =\\n        0x0100000000000000000000000000000000000001;\\n    address internal constant DERIVE_KEY =\\n        0x0100000000000000000000000000000000000002;\\n    address internal constant ENCRYPT =\\n        0x0100000000000000000000000000000000000003;\\n    address internal constant DECRYPT =\\n        0x0100000000000000000000000000000000000004;\\n    address internal constant GENERATE_SIGNING_KEYPAIR =\\n        0x0100000000000000000000000000000000000005;\\n    address internal constant SIGN_DIGEST =\\n        0x0100000000000000000000000000000000000006;\\n    address internal constant VERIFY_DIGEST =\\n        0x0100000000000000000000000000000000000007;\\n    address internal constant CURVE25519_PUBLIC_KEY =\\n        0x0100000000000000000000000000000000000008;\\n    address internal constant GAS_USED =\\n        0x0100000000000000000000000000000000000009;\\n    address internal constant PAD_GAS =\\n        0x010000000000000000000000000000000000000a;\\n\\n    // Oasis-specific, general precompiles\\n    address internal constant SHA512_256 =\\n        0x0100000000000000000000000000000000000101;\\n    address internal constant SHA512 =\\n        0x0100000000000000000000000000000000000102;\\n    address internal constant SHA384 =\\n        0x0100000000000000000000000000000000000104;\\n\\n    type Curve25519PublicKey is bytes32;\\n    type Curve25519SecretKey is bytes32;\\n\\n    enum SigningAlg {\\n        /// Ed25519 signature over the provided message using SHA-512/265 with a domain separator.\\n        /// Can be used to sign transactions for the Oasis consensus layer and SDK paratimes.\\n        Ed25519Oasis,\\n        /// Ed25519 signature over the provided message.\\n        Ed25519Pure,\\n        /// Ed25519 signature over the provided prehashed SHA-512 digest.\\n        Ed25519PrehashedSha512,\\n        /// Secp256k1 signature over the provided message using SHA-512/256 with a domain separator.\\n        /// Can be used to sign transactions for the Oasis consensus layer and SDK paratimes.\\n        Secp256k1Oasis,\\n        /// Secp256k1 over the provided Keccak256 digest.\\n        /// Can be used to sign transactions for Ethereum-compatible networks.\\n        Secp256k1PrehashedKeccak256,\\n        /// Secp256k1 signature over the provided SHA-256 digest.\\n        Secp256k1PrehashedSha256,\\n        /// Sr25519 signature over the provided message.\\n        Sr25519,\\n        /// Secp256r1 signature over the provided SHA-256 digest.\\n        Secp256r1PrehashedSha256,\\n        /// Secp384r1 signature over the provided SHA-384 digest.\\n        Secp384r1PrehashedSha384\\n    }\\n\\n    /**\\n     * @notice Generate `num_bytes` pseudo-random bytes, with an optional\\n     * personalization string (`pers`) added into the hashing algorithm to\\n     * increase domain separation when needed.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000001`\\n     *\\n     * #### Gas cost\\n     *\\n     * 10,000 minimum plus 240 per output word plus 60 per word of the\\n     * personalization string.\\n     *\\n     * #### Implementation details\\n     *\\n     * The mode (e.g. simulation or \\\"view call\\\" vs transaction execution) is fed\\n     * to TupleHash (among other block-dependent components) to derive the \\\"key\\n     * id\\\", which is then used to derive a per-block VRF key from\\n     * epoch-ephemeral entropy (using KMAC256 and cSHAKE) so a different key\\n     * id will result in a unique per-block VRF key. This per-block VRF key is\\n     * then used to create the per-block root RNG which is then used to derive\\n     * domain-separated (using Merlin transcripts) per-transaction random RNGs\\n     * which are then exposed via this precompile. The KMAC, cSHAKE and\\n     * TupleHash algorithms are SHA-3 derived functions defined in [NIST\\n     * Special Publication 800-185](https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-185.pdf).\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes memory randomPad = Sapphire.randomBytes(64, \\\"\\\");\\n     * ```\\n     *\\n     * @param numBytes The number of bytes to return.\\n     * @param pers An optional personalization string to increase domain\\n     *        separation.\\n     * @return The random bytes. If the number of bytes requested is too large\\n     *         (over 1024), a smaller amount (1024) will be returned.\\n     */\\n    function randomBytes(uint256 numBytes, bytes memory pers)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        (bool success, bytes memory entropy) = RANDOM_BYTES.staticcall(\\n            abi.encode(numBytes, pers)\\n        );\\n        require(success, \\\"randomBytes: failed\\\");\\n        return entropy;\\n    }\\n\\n    /**\\n     * @notice Generates a Curve25519 keypair.\\n     * @param pers An optional personalization string used to add domain\\n     * separation.\\n     * @return pk The Curve25519 public key. Useful for key exchange.\\n     * @return sk The Curve25519 secret key. Pairs well with\\n     * [deriveSymmetricKey](#derivesymmetrickey).\\n     */\\n    function generateCurve25519KeyPair(bytes memory pers)\\n        internal\\n        view\\n        returns (Curve25519PublicKey pk, Curve25519SecretKey sk)\\n    {\\n        bytes memory scalar = randomBytes(32, pers);\\n        // Twiddle some bits, as per RFC 7748 §5.\\n        scalar[0] &= 0xf8; // Make it a multiple of 8 to avoid small subgroup attacks.\\n        scalar[31] &= 0x7f; // Clamp to < 2^255 - 19\\n        scalar[31] |= 0x40; // Clamp to >= 2^254\\n        (bool success, bytes memory pkBytes) = CURVE25519_PUBLIC_KEY.staticcall(\\n            scalar\\n        );\\n        require(success, \\\"gen curve25519 pk: failed\\\");\\n        return (\\n            Curve25519PublicKey.wrap(bytes32(pkBytes)),\\n            Curve25519SecretKey.wrap(bytes32(scalar))\\n        );\\n    }\\n\\n    /**\\n     * @notice Derive a symmetric key from a pair of keys using x25519.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000002`\\n     *\\n     * #### Gas cost\\n     *\\n     * 100,000\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes32 publicKey = ... ;\\n     * bytes32 privateKey = ... ;\\n     * bytes32 symmetric = Sapphire.deriveSymmetricKey(publicKey, privateKey);\\n     * ```\\n     *\\n     * @param peerPublicKey The peer's public key.\\n     * @param secretKey Your secret key.\\n     * @return A derived symmetric key.\\n     */\\n    function deriveSymmetricKey(\\n        Curve25519PublicKey peerPublicKey,\\n        Curve25519SecretKey secretKey\\n    ) internal view returns (bytes32) {\\n        (bool success, bytes memory symmetric) = DERIVE_KEY.staticcall(\\n            abi.encode(peerPublicKey, secretKey)\\n        );\\n        require(success, \\\"deriveSymmetricKey: failed\\\");\\n        return bytes32(symmetric);\\n    }\\n\\n    /**\\n     * @notice Encrypt and authenticate the plaintext and additional data using\\n     * DeoxysII.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000003`\\n     *\\n     * #### Gas cost\\n     *\\n     * 50,000 minimum plus 100 per word of input\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes32 key = ... ;\\n     * bytes32 nonce = ... ;\\n     * bytes memory text = \\\"plain text\\\";\\n     * bytes memory ad = \\\"additional data\\\";\\n     * bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\\n     * bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\\n     * ```\\n     *\\n     * @param key The key to use for encryption.\\n     * @param nonce The nonce. Note that only the first 15 bytes of this\\n     * parameter are used.\\n     * @param plaintext The plaintext to encrypt and authenticate.\\n     * @param additionalData The additional data to authenticate.\\n     * @return The ciphertext with appended auth tag.\\n     */\\n    function encrypt(\\n        bytes32 key,\\n        bytes32 nonce,\\n        bytes memory plaintext,\\n        bytes memory additionalData\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory ciphertext) = ENCRYPT.staticcall(\\n            abi.encode(key, nonce, plaintext, additionalData)\\n        );\\n        require(success, \\\"encrypt: failed\\\");\\n        return ciphertext;\\n    }\\n\\n    /**\\n     * @notice Decrypt and authenticate the ciphertext and additional data using\\n     * DeoxysII. Reverts if the auth tag is incorrect.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000004`\\n     *\\n     * #### Gas cost\\n     *\\n     * 50,000 minimum plus 100 per word of input\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes32 key = ... ;\\n     * bytes32 nonce = ... ;\\n     * bytes memory text = \\\"plain text\\\";\\n     * bytes memory ad = \\\"additional data\\\";\\n     * bytes memory encrypted = Sapphire.encrypt(key, nonce, text, ad);\\n     * bytes memory decrypted = Sapphire.decrypt(key, nonce, encrypted, ad);\\n     * ```\\n     *\\n     * @param key The key to use for decryption.\\n     * @param nonce The nonce. Note that only the first 15 bytes of this\\n     * parameter are used.\\n     * @param ciphertext The ciphertext with tag to decrypt and authenticate.\\n     * @param additionalData The additional data to authenticate against the\\n     * ciphertext.\\n     * @return The original plaintext.\\n     */\\n    function decrypt(\\n        bytes32 key,\\n        bytes32 nonce,\\n        bytes memory ciphertext,\\n        bytes memory additionalData\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory plaintext) = DECRYPT.staticcall(\\n            abi.encode(key, nonce, ciphertext, additionalData)\\n        );\\n        require(success, \\\"decrypt: failed\\\");\\n        return plaintext;\\n    }\\n\\n    /**\\n     * @notice Generate a public/private key pair using the specified method and\\n     * seed. The available methods are items in the\\n     * [`Sapphire.SigningAlg`](#signingalg) enum. Note, however, that the\\n     * generation method ignores subvariants, so all three Ed25519-based are\\n     * equivalent, and all Secp256k1 & Secp256r1 based methods are equivalent.\\n     * Sr25519 is not available and will return an error.\\n     *\\n     * #### Precompile address\\n     * `0x0100000000000000000000000000000000000005`\\n     *\\n     * #### Gas Cost\\n     *\\n     * ##### Ed25519: 1,000 gas\\n     *\\n     * - `0` (`Ed25519Oasis`)\\n     * - `1` (`Ed25519Pure`)\\n     * - `2` (`Ed25519PrehashedSha512`)\\n     *\\n     * ##### Secp256k1: 1,500 gas.\\n     * - `3` (`Secp256k1Oasis`)\\n     * - `4` (`Secp256k1PrehashedKeccak256`)\\n     * - `5` (`Secp256k1PrehashedSha256`)\\n     *\\n     * ##### Secp256r1: 4,000 gas\\n     * - `7` (`Secp256r1PrehashedSha256`)\\n     *\\n     * ##### Secp384r1: 18,000 gas\\n     * - `8` (`Secp384r1PrehashedSha384`)\\n     *\\n     * #### Key Formats\\n     *\\n     * ##### Ed25519\\n     *\\n     * Public key: 32 bytes\\n     * Secret key: 32 bytes\\n     *\\n     * ##### Secp256k1 & Secp256r1\\n     *\\n     * Public key: 33 bytes, compressed format (`0x02` or `0x03` prefix, then 32\\n     * byte X coordinate).\\n     * Secret key: 32 bytes\\n     *\\n     * ##### Secp384r1\\n     *\\n     * Public key: 49 bytes, compressed format (`0x02` or `0x03` prefix, then 48\\n     * byte X coordinate).\\n     * Secret key: 48 bytes\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * bytes memory seed = hex\\\"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef\\\";\\n     * bytes memory publicKey;\\n     * bytes memory privateKey;\\n     * (publicKey, privateKey) = Sapphire.generateSigningKeyPair(Sapphire.SigningAlg.Ed25519Pure, seed);\\n     * ```\\n     *\\n     * @param alg The signing alg for which to generate a keypair.\\n     * @param seed The seed to use for generating the key pair. You can use the\\n     * `randomBytes` method if you don't already have a seed.\\n     * @return publicKey The public part of the keypair.\\n     * @return secretKey The secret part of the keypair.\\n     */\\n    function generateSigningKeyPair(SigningAlg alg, bytes memory seed)\\n        internal\\n        view\\n        returns (bytes memory publicKey, bytes memory secretKey)\\n    {\\n        (bool success, bytes memory keypair) = GENERATE_SIGNING_KEYPAIR\\n            .staticcall(abi.encode(alg, seed));\\n        require(success, \\\"gen signing keypair: failed\\\");\\n        return abi.decode(keypair, (bytes, bytes));\\n    }\\n\\n    /**\\n     * @notice Sign a message within the provided context using the specified\\n     * algorithm, and return the signature. The `context_or_digest` and\\n     * `messages` parameters change in meaning slightly depending on the method\\n     * requested. For methods that take a context in addition to the message you\\n     * must pass the context in the `context_or_digest` parameter and use\\n     * `message` as expected. For methods that take a pre-existing hash of the\\n     * message, pass that in `context_or_digest` and leave `message` empty.\\n     * Specifically the `Ed25519Oasis` and `Secp256k1Oasis` variants take both a\\n     * context and a message (each are variable length `bytes`), the context\\n     * serves as a domain separator.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000006`\\n     *\\n     * #### Gas cost\\n     *\\n     * See below for the method-dependent base cost, plus 8 gas per 32 bytes of\\n     * context and message except digest.\\n     *\\n     * #### Signing algorithms\\n     *\\n     * - `0` (`Ed25519Oasis`): 1,500 gas, variable length context and message.\\n     * - `1` (`Ed25519Pure`): 1,500 gas, empty context, variable length message.\\n     * - `2` (`Ed25519PrehashedSha512`): 1,500 gas, pre-existing SHA-512 hash\\n     *   (64 bytes) as context, empty message.\\n     * - `3` (`Secp256k1Oasis`): 3,000 gas, variable length context and message\\n     * - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas, pre-existing hash\\n     *   (32 bytes) as context, empty message.\\n     * - `5` (`Secp256k1PrehashedSha256`): 3,000 gas, pre-existing hash (32\\n     *   bytes) as context, empty message.\\n     * - `7` (`Secp256r1PrehashedSha256`): 9,000 gas, pre-existing hash (32\\n     *   bytes) as context, empty message.\\n     * - `8` (`Secp384r1PrehashedSha384`): 43,200 gas, pre-existing hash (32\\n     *   bytes) as context, empty message.\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * Sapphire.SigningAlg alg = Sapphire.SigningAlg.Ed25519Pure;\\n     * bytes memory pk;\\n     * bytes memory sk;\\n     * (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \\\"\\\"));\\n     * bytes memory signature = Sapphire.sign(alg, sk, \\\"\\\", \\\"signed message\\\");\\n     * ```\\n     *\\n     * @param alg The signing algorithm to use.\\n     * @param secretKey The secret key to use for signing. The key must be valid\\n     * for use with the requested algorithm.\\n     * @param contextOrHash Domain-Separator Context, or precomputed hash bytes.\\n     * @param message Message to sign, should be zero-length if precomputed hash\\n     * given.\\n     * @return signature The resulting signature.\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_sign\\n     */\\n    function sign(\\n        SigningAlg alg,\\n        bytes memory secretKey,\\n        bytes memory contextOrHash,\\n        bytes memory message\\n    ) internal view returns (bytes memory signature) {\\n        (bool success, bytes memory sig) = SIGN_DIGEST.staticcall(\\n            abi.encode(alg, secretKey, contextOrHash, message)\\n        );\\n        require(success, \\\"sign: failed\\\");\\n        return sig;\\n    }\\n\\n    /**\\n     * @notice Verifies that the provided digest was signed with using the\\n     * secret key corresponding to the provided private key and the specified\\n     * signing algorithm.\\n     *\\n     * The `method`, `context_or_digest` and `message` parameters have the same\\n     * meaning as described above in the [sign()](#sign) function.\\n     *\\n     * #### Precompile address\\n     *\\n     * `0x0100000000000000000000000000000000000007`\\n     *\\n     * #### Gas cost\\n     *\\n     * The algorithm-specific base cost below, with an additional **8 gas per\\n     * 32 bytes** of `context` and `message` for the `Ed25519Oasis`,\\n     * `Ed25519Pure` and `Secp256k1Oasis` algorithms.\\n     *\\n     * - `0` (`Ed25519Oasis`): 2,000 gas\\n     * - `1` (`Ed25519Pure`): 2,000 gas\\n     * - `2` (`Ed25519PrehashedSha512`): 2,000 gas\\n     * - `3` (`Secp256k1Oasis`): 3,000 gas\\n     * - `4` (`Secp256k1PrehashedKeccak256`): 3,000 gas\\n     * - `5` (`Secp256k1PrehashedSha256`): 3,000 gas\\n     * - `7` (`Secp256r1PrehashedSha256`): 7,900 gas\\n     * - `8` (`Secp384r1PrehashedSha384`): 37,920 gas\\n     *\\n     * #### Example\\n     *\\n     * ```solidity\\n     * Sapphire.SigningAlg alg = Sapphire.SigningAlg.Secp256k1PrehashedKeccak256;\\n     * bytes memory pk;\\n     * bytes memory sk;\\n     * bytes memory digest = abi.encodePacked(keccak256(\\\"signed message\\\"));\\n     * (pk, sk) = Sapphire.generateSigningKeyPair(alg, Sapphire.randomBytes(32, \\\"\\\"));\\n     * bytes memory signature = Sapphire.sign(alg, sk, digest, \\\"\\\");\\n     * require( Sapphire.verify(alg, pk, digest, \\\"\\\", signature) );\\n     * ```\\n     *\\n     * @param alg The signing algorithm by which the signature was generated.\\n     * @param publicKey The public key against which to check the signature.\\n     * @param contextOrHash Domain-Separator Context, or precomputed hash bytes\\n     * @param message The hash of the message that was signed, should be\\n     * zero-length if precomputed hash was given.\\n     * @param signature The signature to check.\\n     * @return verified Whether the signature is valid for the given parameters.\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/confidential.rs :: call_verify\\n     */\\n    function verify(\\n        SigningAlg alg,\\n        bytes memory publicKey,\\n        bytes memory contextOrHash,\\n        bytes memory message,\\n        bytes memory signature\\n    ) internal view returns (bool verified) {\\n        (bool success, bytes memory v) = VERIFY_DIGEST.staticcall(\\n            abi.encode(alg, publicKey, contextOrHash, message, signature)\\n        );\\n        require(success, \\\"verify: failed\\\");\\n        return abi.decode(v, (bool));\\n    }\\n\\n    /**\\n     * @notice Set the current transactions gas usage to a specific amount\\n     * @dev Will cause a reversion if the current usage is more than the amount.\\n     * @param toAmount Gas usage will be set to this amount\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_pad_gas\\n     *\\n     */\\n    function padGas(uint128 toAmount) internal view {\\n        (bool success, ) = PAD_GAS.staticcall(abi.encode(toAmount));\\n        require(success, \\\"verify: failed\\\");\\n    }\\n\\n    /**\\n     * @notice Returns the amount of gas currently used by the transaction\\n     * @custom:see @oasisprotocol/oasis-sdk :: precompile/gas.rs :: call_gas_used\\n     */\\n    function gasUsed() internal view returns (uint64) {\\n        (bool success, bytes memory v) = GAS_USED.staticcall(\\\"\\\");\\n        require(success, \\\"gasused: failed\\\");\\n        return abi.decode(v, (uint64));\\n    }\\n}\\n\\n/**\\n * @notice Hash the input data with SHA-512/256, according to\\n * [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\\n *\\n * #### Precompile address\\n *\\n * `0x0100000000000000000000000000000000000102`\\n *\\n * #### Gas cost\\n *\\n * 115 gas, then 13 gas per word\\n *\\n * #### Example\\n *\\n * ```solidity\\n * bytes32 result = sha512_256(abi.encodePacked(\\\"input data\\\"));\\n * ```\\n *\\n * #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\\n *\\n * [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\\n * attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\\n * relevant if you are computing the hash of a secret message. The\\n * [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\\n * vulnerable to length-extension attacks.\\n *\\n * @param input Bytes to hash.\\n * @return result 32 byte digest.\\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512_256\\n */\\nfunction sha512_256(bytes memory input) view returns (bytes32 result) {\\n    (bool success, bytes memory output) = Sapphire.SHA512_256.staticcall(input);\\n\\n    require(success, \\\"sha512_256\\\");\\n\\n    return bytes32(output);\\n}\\n\\n/**\\n * @notice Hash the input data with SHA-512, according to\\n * [NIST.FIPS.180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf)\\n *\\n * #### Precompile address\\n *\\n * `0x0100000000000000000000000000000000000101`\\n *\\n * #### Warning: SHA-512 vs SHA-512/256 Length-Extension Attacks\\n *\\n * [SHA-512](function.sha512.md#sha512) is vulnerable to [length-extension\\n * attacks](https://en.wikipedia.org/wiki/Length_extension_attack), which are\\n * relevant if you are computing the hash of a secret message. The\\n * [SHA-512/256](function.sha512_256.md#sha512_256) variant is **not**\\n * vulnerable to length-extension attacks.\\n *\\n * #### Gas Cost\\n *\\n * 115 gas, then 13 gas per word\\n *\\n * #### Example\\n *\\n * ```solidity\\n * bytes memory result = sha512(abi.encodePacked(\\\"input data\\\"));\\n * ```\\n *\\n * @param input Bytes to hash.\\n * @return output 64 byte digest.\\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha512\\n */\\nfunction sha512(bytes memory input) view returns (bytes memory output) {\\n    bool success;\\n\\n    (success, output) = Sapphire.SHA512.staticcall(input);\\n\\n    require(success, \\\"sha512\\\");\\n}\\n\\n/**\\n * @notice Hash the input data with SHA-384.\\n * @param input Bytes to hash.\\n * @return output 48 byte digest.\\n * @custom:standard https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\\n * @custom:see @oasisprotocol/oasis-sdk :: precompile/sha2.rs :: call_sha384\\n */\\nfunction sha384(bytes memory input) view returns (bytes memory output) {\\n    bool success;\\n\\n    (success, output) = Sapphire.SHA384.staticcall(input);\\n\\n    require(success, \\\"sha384\\\");\\n}\\n\"\n    },\n    \"@oasisprotocol/sapphire-contracts/contracts/SiweParser.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport {DateTime} from \\\"./DateTime.sol\\\";\\n\\nstruct ParsedSiweMessage {\\n    bytes schemeDomain;\\n    address addr;\\n    bytes statement;\\n    bytes uri;\\n    bytes version;\\n    uint256 chainId;\\n    bytes nonce;\\n    bytes issuedAt;\\n    bytes expirationTime;\\n    bytes notBefore;\\n    bytes requestId;\\n    bytes[] resources;\\n}\\n\\n/**\\n * @title On-chain parser for EIP-4361 SIWE message\\n * @notice Call parseSiweMsg() and provide the EIP-4361 SIWE message. The parser\\n * will generate the ParsedSiweMessage struct which you can then use to\\n * extract the authentication information in your on-chain contract.\\n */\\nlibrary SiweParser {\\n    /// Invalid length of the hex-encoded address\\n    error SiweParser_InvalidAddressLength();\\n    /// Invalid length of the nonce\\n    error SiweParser_InvalidNonce();\\n\\n    /**\\n     * @notice Convert string containing hex address without 0x prefix to solidity address object.\\n     */\\n    function _hexStringToAddress(bytes memory s)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        if (s.length != 40) {\\n            revert SiweParser_InvalidAddressLength();\\n        }\\n\\n        bytes memory r = new bytes(s.length / 2);\\n        for (uint256 i = 0; i < s.length / 2; ++i) {\\n            r[i] = bytes1(\\n                _fromHexChar(uint8(s[2 * i])) *\\n                    16 +\\n                    _fromHexChar(uint8(s[2 * i + 1]))\\n            );\\n        }\\n        return address(bytes20(r));\\n    }\\n\\n    function _fromHexChar(uint8 c) internal pure returns (uint8) {\\n        if (bytes1(c) >= bytes1(\\\"0\\\") && bytes1(c) <= bytes1(\\\"9\\\")) {\\n            return c - uint8(bytes1(\\\"0\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"a\\\") && bytes1(c) <= bytes1(\\\"f\\\")) {\\n            return 10 + c - uint8(bytes1(\\\"a\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"A\\\") && bytes1(c) <= bytes1(\\\"F\\\")) {\\n            return 10 + c - uint8(bytes1(\\\"A\\\"));\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Substring.\\n     */\\n    function _substr(\\n        bytes memory str,\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex && i < str.length; i++) {\\n            result[i - startIndex] = str[i];\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @notice String to Uint using decimal format. No error handling.\\n     */\\n    function _parseUint(bytes memory b) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            result = result * 10 + (uint256(uint8(b[i])) - 0x30);\\n        }\\n        return (result);\\n    }\\n\\n    /**\\n     * @notice Parse \\\"NAME: VALUE\\\" in str starting at index i and ending at \\\\n or end of bytes.\\n     * @return VALUE and new i, if NAME matched; otherwise empty value and old i.\\n     */\\n    function _parseField(\\n        bytes calldata str,\\n        string memory name,\\n        uint256 i\\n    ) internal pure returns (bytes memory, uint256) {\\n        uint256 j = i;\\n        for (; j < str.length; j++) {\\n            if (str[j] == \\\":\\\") {\\n                // Delimiter found, check the name.\\n                if (keccak256(_substr(str, i, j)) != keccak256(bytes(name))) {\\n                    return (\\\"\\\", i);\\n                }\\n\\n                // Skip :\\n                j++;\\n                if (j < str.length && str[j] == \\\" \\\") {\\n                    // Skip blank\\n                    j++;\\n                }\\n\\n                i = j;\\n                break;\\n            }\\n        }\\n\\n        for (; j < str.length; j++) {\\n            if (str[j] == 0x0a) {\\n                return (_substr(str, i, j), j + 1);\\n            }\\n        }\\n        return (_substr(str, i, j), j);\\n    }\\n\\n    /**\\n     * @notice Parse bullets, one per line in str starting at i.\\n     * @return Array of parsed values and a new i.\\n     */\\n    function _parseArray(bytes calldata str, uint256 i)\\n        internal\\n        pure\\n        returns (bytes[] memory, uint256)\\n    {\\n        // First count the number of resources.\\n        uint256 j = i;\\n        uint256 count = 0;\\n        for (; j < str.length - 1; j++) {\\n            if (str[j] == \\\"-\\\" && str[j + 1] == \\\" \\\") {\\n                j += 2;\\n                count++;\\n            } else {\\n                break;\\n            }\\n            while (j < str.length && str[j] != 0x0a) {\\n                j++;\\n            }\\n        }\\n\\n        // Then build an array.\\n        bytes[] memory values = new bytes[](count);\\n        j = i;\\n        for (uint256 c = 0; j < str.length - 1 && c != count; j++) {\\n            if (str[j] == \\\"-\\\" && str[j + 1] == \\\" \\\") {\\n                i = j + 2;\\n            }\\n            while (j < str.length && str[j] != 0x0a) {\\n                j++;\\n            }\\n            values[c] = _substr(str, i, j);\\n            c++;\\n            if (j == str.length) {\\n                j--; // Subtract 1 because of the outer loop.\\n            }\\n        }\\n        return (values, j);\\n    }\\n\\n    /**\\n     * @notice Parse SIWE message.\\n     * @return ParsedSiweMessage struct with populated fields from the message.\\n     */\\n    function parseSiweMsg(bytes calldata siweMsg)\\n        internal\\n        pure\\n        returns (ParsedSiweMessage memory)\\n    {\\n        ParsedSiweMessage memory p;\\n        uint256 i = 0;\\n\\n        // dApp Domain.\\n        for (; i < siweMsg.length; i++) {\\n            if (siweMsg[i] == \\\" \\\") {\\n                p.schemeDomain = _substr(siweMsg, 0, i);\\n                break;\\n            }\\n        }\\n\\n        i += 50; // \\\" wants you to sign in with your Ethereum account:\\\\n\\\"\\n\\n        // Address.\\n        // TODO: Verify the mixed-case checksum.\\n        p.addr = _hexStringToAddress(_substr(siweMsg, i += 2, i += 40));\\n        i += 2; // End of address new line + New line.\\n\\n        // (Optional) statement.\\n        if (i < siweMsg.length && siweMsg[i] != \\\"\\\\n\\\") {\\n            for (uint256 j = i; j < siweMsg.length; j++) {\\n                if (siweMsg[j] == 0x0a) {\\n                    p.statement = _substr(siweMsg, i, j);\\n                    i = j + 1; // End of statement new line.\\n                    break;\\n                }\\n            }\\n        }\\n\\n        i++; // New line.\\n\\n        (p.uri, i) = _parseField(siweMsg, \\\"URI\\\", i);\\n        (p.version, i) = _parseField(siweMsg, \\\"Version\\\", i);\\n        bytes memory chainId;\\n        (chainId, i) = _parseField(siweMsg, \\\"Chain ID\\\", i);\\n        p.chainId = _parseUint(chainId);\\n        (p.nonce, i) = _parseField(siweMsg, \\\"Nonce\\\", i);\\n        if (p.nonce.length < 8) {\\n            revert SiweParser_InvalidNonce();\\n        }\\n        (p.issuedAt, i) = _parseField(siweMsg, \\\"Issued At\\\", i);\\n        (p.expirationTime, i) = _parseField(siweMsg, \\\"Expiration Time\\\", i);\\n        (p.notBefore, i) = _parseField(siweMsg, \\\"Not Before\\\", i);\\n        (p.requestId, i) = _parseField(siweMsg, \\\"Request ID\\\", i);\\n\\n        // Parse resources, if they exist.\\n        uint256 newI;\\n        (, newI) = _parseField(siweMsg, \\\"Resources\\\", i);\\n        if (newI != i) {\\n            (p.resources, i) = _parseArray(siweMsg, newI);\\n        }\\n\\n        return p;\\n    }\\n\\n    /**\\n     * @notice Parse RFC 3339 (ISO 8601) string to timestamp.\\n     */\\n    function timestampFromIso(bytes memory str)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return\\n            DateTime.toTimestamp(\\n                uint16(_parseUint(_substr(str, 0, 4))),\\n                uint8(_parseUint(_substr(str, 5, 7))),\\n                uint8(_parseUint(_substr(str, 8, 10))),\\n                uint8(_parseUint(_substr(str, 11, 13))),\\n                uint8(_parseUint(_substr(str, 14, 16))),\\n                uint8(_parseUint(_substr(str, 17, 19)))\\n            );\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Create2} from \\\"../utils/Create2.sol\\\";\\nimport {Errors} from \\\"../utils/Errors.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    error CloneArgumentsTooLong();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        return clone(implementation, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-clone-address-}[clone], but with a `value` parameter to send native currency\\n     * to the new contract.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function clone(address implementation, uint256 value) internal returns (address instance) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(value, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple times will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        return cloneDeterministic(implementation, salt, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-cloneDeterministic-address-bytes32-}[cloneDeterministic], but with\\n     * a `value` parameter to send native currency to the new contract.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function cloneDeterministic(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 value\\n    ) internal returns (address instance) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(value, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := and(keccak256(add(ptr, 0x43), 0x55), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\\n     * access the arguments within the implementation, use {fetchCloneArgs}.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     */\\n    function cloneWithImmutableArgs(address implementation, bytes memory args) internal returns (address instance) {\\n        return cloneWithImmutableArgs(implementation, args, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-cloneWithImmutableArgs-address-bytes-}[cloneWithImmutableArgs], but with a `value`\\n     * parameter to send native currency to the new contract.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function cloneWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        uint256 value\\n    ) internal returns (address instance) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\\n        assembly (\\\"memory-safe\\\") {\\n            instance := create(value, add(bytecode, 0x20), mload(bytecode))\\n        }\\n        if (instance == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\\n     * access the arguments within the implementation, use {fetchCloneArgs}.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy the clone. Using the same\\n     * `implementation`, `args` and `salt` multiple times will revert, since the clones cannot be deployed twice\\n     * at the same address.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     */\\n    function cloneDeterministicWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt\\n    ) internal returns (address instance) {\\n        return cloneDeterministicWithImmutableArgs(implementation, args, salt, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-cloneDeterministicWithImmutableArgs-address-bytes-bytes32-}[cloneDeterministicWithImmutableArgs],\\n     * but with a `value` parameter to send native currency to the new contract.\\n     *\\n     * WARNING: This function does not check if `implementation` has code. A clone that points to an address\\n     * without code cannot be initialized. Initialization calls may appear to be successful when, in reality, they\\n     * have no effect and leave the clone uninitialized, allowing a third party to initialize it later.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function cloneDeterministicWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt,\\n        uint256 value\\n    ) internal returns (address instance) {\\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\\n        return Create2.deploy(value, salt, bytecode);\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\\n     */\\n    function predictDeterministicAddressWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\\n        return Create2.computeAddress(salt, keccak256(bytecode), deployer);\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\\n     */\\n    function predictDeterministicAddressWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddressWithImmutableArgs(implementation, args, salt, address(this));\\n    }\\n\\n    /**\\n     * @dev Get the immutable args attached to a clone.\\n     *\\n     * - If `instance` is a clone that was deployed using `clone` or `cloneDeterministic`, this\\n     *   function will return an empty array.\\n     * - If `instance` is a clone that was deployed using `cloneWithImmutableArgs` or\\n     *   `cloneDeterministicWithImmutableArgs`, this function will return the args array used at\\n     *   creation.\\n     * - If `instance` is NOT a clone deployed using this library, the behavior is undefined. This\\n     *   function should only be used to check addresses that are known to be clones.\\n     */\\n    function fetchCloneArgs(address instance) internal view returns (bytes memory) {\\n        bytes memory result = new bytes(instance.code.length - 45); // revert if length is too short\\n        assembly (\\\"memory-safe\\\") {\\n            extcodecopy(instance, add(result, 32), 45, mload(result))\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Helper that prepares the initcode of the proxy with immutable args.\\n     *\\n     * An assembly variant of this function requires copying the `args` array, which can be efficiently done using\\n     * `mcopy`. Unfortunately, that opcode is not available before cancun. A pure solidity implementation using\\n     * abi.encodePacked is more expensive but also more portable and easier to review.\\n     *\\n     * NOTE: https://eips.ethereum.org/EIPS/eip-170[EIP-170] limits the length of the contract code to 24576 bytes.\\n     * With the proxy code taking 45 bytes, that limits the length of the immutable args to 24531 bytes.\\n     */\\n    function _cloneCodeWithImmutableArgs(\\n        address implementation,\\n        bytes memory args\\n    ) private pure returns (bytes memory) {\\n        if (args.length > 24531) revert CloneArgumentsTooLong();\\n        return\\n            abi.encodePacked(\\n                hex\\\"61\\\",\\n                uint16(args.length + 45),\\n                hex\\\"3d81600a3d39f3363d3d373d3d3d363d73\\\",\\n                implementation,\\n                hex\\\"5af43d82803e903d91602b57fd5bf3\\\",\\n                args\\n            );\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Create2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n            // if no address was created, and returndata is not empty, bubble revert\\n            if and(iszero(addr), not(iszero(returndatasize()))) {\\n                let p := mload(0x40)\\n                returndatacopy(p, 0, returndatasize())\\n                revert(p, returndatasize())\\n            }\\n        }\\n        if (addr == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Errors.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2²⁵⁶ + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2²⁵⁶ + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2²⁵⁶ + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2²⁵⁶ - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2²⁵⁶ - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\\n            // This is going to be our x_0 (and ε_0)\\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\\n            //              = ((x_n² + a) / (2 * x_n))² - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\\n            //              = (x_n² - a)² / (2 * x_n)²\\n            //              = ((x_n² - a) / (2 * x_n))²\\n            //              ≥ 0\\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\\n            //         = | ε_n² / (2 * x_n) |\\n            //         = ε_n² / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // ε_1 = ε_0² / | (2 * x_0) |\\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\\n            //     ≤ 2**(e-3) / 3\\n            //     ≤ 2**(e-3-log2(3))\\n            //     ≤ 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\\n            //         ≤ 2**(2*e-2*k) / 2**e\\n            //         ≤ 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\\n\\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Panic.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n    uint256 private constant SPECIAL_CHARS_LOOKUP =\\n        (1 << 0x08) | // backspace\\n            (1 << 0x09) | // tab\\n            (1 << 0x0a) | // newline\\n            (1 << 0x0c) | // form feed\\n            (1 << 0x0d) | // carriage return\\n            (1 << 0x22) | // double quote\\n            (1 << 0x5c); // backslash\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(add(buffer, 0x20), length)\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint-string-uint256-uint256} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guarantees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress-string} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress-string-uint256-uint256} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Escape special characters in JSON strings. This can be useful to prevent JSON injection in NFT metadata.\\n     *\\n     * WARNING: This function should only be used in double quoted JSON strings. Single quotes are not escaped.\\n     *\\n     * NOTE: This function escapes all unicode characters, and not just the ones in ranges defined in section 2.5 of\\n     * RFC-4627 (U+0000 to U+001F, U+0022 and U+005C). ECMAScript's `JSON.parse` does recover escaped unicode\\n     * characters that are not in this range, but other tooling may provide different results.\\n     */\\n    function escapeJSON(string memory input) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(input);\\n        bytes memory output = new bytes(2 * buffer.length); // worst case scenario\\n        uint256 outputLength = 0;\\n\\n        for (uint256 i; i < buffer.length; ++i) {\\n            bytes1 char = bytes1(_unsafeReadBytesOffset(buffer, i));\\n            if (((SPECIAL_CHARS_LOOKUP & (1 << uint8(char))) != 0)) {\\n                output[outputLength++] = \\\"\\\\\\\\\\\";\\n                if (char == 0x08) output[outputLength++] = \\\"b\\\";\\n                else if (char == 0x09) output[outputLength++] = \\\"t\\\";\\n                else if (char == 0x0a) output[outputLength++] = \\\"n\\\";\\n                else if (char == 0x0c) output[outputLength++] = \\\"f\\\";\\n                else if (char == 0x0d) output[outputLength++] = \\\"r\\\";\\n                else if (char == 0x5c) output[outputLength++] = \\\"\\\\\\\\\\\";\\n                else if (char == 0x22) {\\n                    // solhint-disable-next-line quotes\\n                    output[outputLength++] = '\\\"';\\n                }\\n            } else {\\n                output[outputLength++] = char;\\n            }\\n        }\\n        // write the actual length and deallocate unused memory\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(output, outputLength)\\n            mstore(0x40, add(output, shl(5, shr(5, add(outputLength, 63)))))\\n        }\\n\\n        return string(output);\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(add(buffer, 0x20), offset))\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/ContractFactory.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * Contract Factory that creates individual user contracts for mental health AI assistant\\n * Uses minimal proxy pattern for gas efficiency\\n * @author BuidlGuidl\\n */\\ncontract ContractFactory is Ownable {\\n    // Core addresses\\n    address public subscriptionContract;\\n    address public userContractTemplate;\\n    \\n    // User contract registry\\n    mapping(address => address) public userContracts; // user => contract\\n    mapping(address => address) public contractOwners; // contract => user\\n    mapping(address => bool) public isUserContract; // contract => isUserContract\\n    \\n    // Statistics\\n    uint256 public totalUserContracts;\\n    uint256 public factoryVersion = 1;\\n    \\n    // Events\\n    event UserContractCreated(address indexed user, address indexed userContract, uint256 subscriptionId, uint256 timestamp);\\n    event SubscriptionContractUpdated(address indexed oldContract, address indexed newContract);\\n    event UserContractTemplateUpdated(address indexed oldTemplate, address indexed newTemplate);\\n    event FactoryVersionUpdated(uint256 oldVersion, uint256 newVersion);\\n    \\n    // Errors\\n    error UserAlreadyHasContract();\\n    error InvalidUserAddress();\\n    error InvalidSubscriptionContract();\\n    error InvalidTemplateAddress();\\n    error ContractCreationFailed();\\n    error UnauthorizedCaller();\\n    \\n    // Modifiers\\n    modifier onlySubscriptionContract() {\\n        if (msg.sender != subscriptionContract) {\\n            revert UnauthorizedCaller();\\n        }\\n        _;\\n    }\\n    \\n    modifier validAddress(address _address) {\\n        if (_address == address(0)) {\\n            revert InvalidUserAddress();\\n        }\\n        _;\\n    }\\n    \\n    /**\\n     * Constructor\\n     * @param _owner Owner of the factory contract\\n     * @param _userContractTemplate Address of the user contract template\\n     */\\n    constructor(address _owner, address _userContractTemplate) Ownable(_owner) {\\n        if (_userContractTemplate == address(0)) {\\n            revert InvalidTemplateAddress();\\n        }\\n        userContractTemplate = _userContractTemplate;\\n        console.log(\\\"ContractFactory deployed by:\\\", _owner);\\n        console.log(\\\"User contract template:\\\", _userContractTemplate);\\n    }\\n    \\n    /**\\n     * Create a new user contract for a user\\n     * Only callable by subscription contract\\n     * @param user Address of the user\\n     * @param subscriptionId Subscription ID from subscription contract\\n     * @return Address of the created user contract\\n     */\\n    function createUserContract(address user, uint256 subscriptionId) \\n        external \\n        onlySubscriptionContract \\n        validAddress(user) \\n        returns (address) \\n    {\\n        // Check if user already has a contract\\n        address existingContract = userContracts[user];\\n        if (existingContract != address(0)) {\\n            console.log(\\\"User already has contract, returning existing:\\\", existingContract);\\n            return existingContract; // Return existing contract instead of reverting\\n        }\\n        \\n        // Clone the user contract template\\n        address userContract = Clones.clone(userContractTemplate);\\n        \\n        // Validate contract creation\\n        if (userContract == address(0)) {\\n            revert ContractCreationFailed();\\n        }\\n        \\n        // Initialize the user contract\\n        UserContract(userContract).initialize(user, subscriptionId);\\n        \\n        // Update registry\\n        userContracts[user] = userContract;\\n        contractOwners[userContract] = user;\\n        isUserContract[userContract] = true;\\n        totalUserContracts++;\\n        \\n        console.log(\\\"Created NEW user contract for:\\\", user);\\n        console.log(\\\"Contract address:\\\", userContract);\\n        console.log(\\\"Subscription ID:\\\", subscriptionId);\\n        \\n        emit UserContractCreated(user, userContract, subscriptionId, block.timestamp);\\n        \\n        return userContract;\\n    }\\n    \\n    /**\\n     * Get user contract address\\n     * @param user Address of the user\\n     * @return Address of the user's contract\\n     */\\n    function getUserContract(address user) external view returns (address) {\\n        return userContracts[user];\\n    }\\n    \\n    /**\\n     * Check if address is a user contract\\n     * @param contractAddress Address to check\\n     * @return True if it's a user contract\\n     */\\n    function checkIsUserContract(address contractAddress) external view returns (bool) {\\n        return isUserContract[contractAddress];\\n    }\\n    \\n    /**\\n     * Get total number of user contracts created\\n     * @return Total number of user contracts\\n     */\\n    function getTotalUserContracts() external view returns (uint256) {\\n        return totalUserContracts;\\n    }\\n    \\n    /**\\n     * Set subscription contract address\\n     * Only callable by owner\\n     * @param _subscriptionContract Address of the subscription contract\\n     */\\n    function setSubscriptionContract(address _subscriptionContract) external onlyOwner validAddress(_subscriptionContract) {\\n        address oldContract = subscriptionContract;\\n        subscriptionContract = _subscriptionContract;\\n        \\n        console.log(\\\"Updated subscription contract from:\\\", oldContract, \\\"to:\\\", _subscriptionContract);\\n        emit SubscriptionContractUpdated(oldContract, _subscriptionContract);\\n    }\\n    \\n    /**\\n     * Set user contract template address\\n     * Only callable by owner\\n     * @param _template Address of the user contract template\\n     */\\n    function setUserContractTemplate(address _template) external onlyOwner validAddress(_template) {\\n        address oldTemplate = userContractTemplate;\\n        userContractTemplate = _template;\\n        \\n        console.log(\\\"Updated user contract template from:\\\", oldTemplate, \\\"to:\\\", _template);\\n        emit UserContractTemplateUpdated(oldTemplate, _template);\\n    }\\n    \\n    /**\\n     * Upgrade factory version\\n     * Only callable by owner\\n     * @param _newVersion New factory version\\n     */\\n    function upgradeFactoryVersion(uint256 _newVersion) external onlyOwner {\\n        uint256 oldVersion = factoryVersion;\\n        factoryVersion = _newVersion;\\n        \\n        console.log(\\\"Upgraded factory version from:\\\", oldVersion, \\\"to:\\\", _newVersion);\\n        emit FactoryVersionUpdated(oldVersion, _newVersion);\\n    }\\n    \\n    /**\\n     * Get factory information\\n     * @return _subscriptionContract Subscription contract address\\n     * @return _userContractTemplate User contract template address\\n     * @return _totalUserContracts Total number of user contracts\\n     * @return _factoryVersion Factory version\\n     */\\n    function getFactoryInfo() external view returns (\\n        address _subscriptionContract,\\n        address _userContractTemplate,\\n        uint256 _totalUserContracts,\\n        uint256 _factoryVersion\\n    ) {\\n        return (subscriptionContract, userContractTemplate, totalUserContracts, factoryVersion);\\n    }\\n}\\n\\n/**\\n * Interface for UserContract to enable initialization\\n */\\ninterface UserContract {\\n    function initialize(address user, uint256 subscriptionId) external;\\n} \"\n    },\n    \"contracts/OwnerMessage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {SiweAuth} from \\\"@oasisprotocol/sapphire-contracts/contracts/auth/SiweAuth.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract OwnerMessage is SiweAuth {\\n    address private _owner;\\n    string private _message;\\n\\n    modifier onlyOwner(bytes memory token) {\\n        if (msg.sender != _owner && authMsgSender(token) != _owner) {\\n            revert(\\\"Not the owner\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor(string memory initialMessage, string memory domain, address customOwner) SiweAuth(domain) {\\n        _owner = customOwner != address(0) ? customOwner : msg.sender;\\n        _message = initialMessage;\\n        console.log(\\\"OwnerMessage deployed by:\\\", msg.sender);\\n        console.log(\\\"Contract owner set to:\\\", _owner);\\n        console.log(\\\"Initial message:\\\", initialMessage);\\n        console.log(\\\"Domain:\\\", domain);\\n    }\\n\\n    function getMessage(bytes memory token) external view onlyOwner(token) returns (string memory) {\\n        console.log(\\\"getMessage called by:\\\", msg.sender);\\n        console.log(\\\"Token length:\\\", token.length);\\n        return _message;\\n    }\\n\\n    function setMessage(string calldata newMessage, bytes memory token) external onlyOwner(token) {\\n        console.log(\\\"setMessage called by:\\\", msg.sender);\\n        console.log(\\\"New message:\\\", newMessage);\\n        _message = newMessage;\\n    }\\n\\n    function owner() external view returns (address) {\\n        return _owner;\\n    }\\n}\\n\"\n    },\n    \"contracts/SubscriptionContract.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// Useful for debugging. Remove when deploying to a live network.\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * Interface for ContractFactory\\n */\\ninterface ContractFactory {\\n    function createUserContract(address user, uint256 subscriptionId) external returns (address);\\n}\\n\\n/**\\n * A smart contract that handles subscription payments in ROSE tokens\\n * Users pay 1 ROSE token to subscribe to the service\\n * @author BuidlGuidl\\n */\\ncontract SubscriptionContract {\\n    // State Variables\\n    address public immutable owner;\\n    uint256 public subscriptionPrice = 1 ether; // 1 ROSE token\\n    uint256 public totalSubscribers = 0;\\n    address public contractFactory; // Contract factory address\\n    \\n    // Subscription tracking\\n    mapping(address => bool) public subscribers;\\n    mapping(address => uint256) public subscriptionTimestamp;\\n    mapping(address => uint256) public subscriptionCount;\\n    \\n    // Events\\n    event SubscriptionPurchased(address indexed subscriber, uint256 amount, uint256 timestamp);\\n    event SubscriptionCancelled(address indexed subscriber, uint256 timestamp);\\n    event PriceUpdated(uint256 newPrice, uint256 timestamp);\\n    event FundsWithdrawn(address indexed owner, uint256 amount, uint256 timestamp);\\n    event ContractFactoryUpdated(address indexed oldFactory, address indexed newFactory);\\n    event UserContractCreated(address indexed subscriber, address indexed userContract, uint256 timestamp);\\n\\n    // Constructor\\n    constructor(address _owner) {\\n        owner = _owner;\\n        console.log(\\\"SubscriptionContract deployed by:\\\", _owner);\\n    }\\n\\n    // Modifier\\n    modifier isOwner() {\\n        require(msg.sender == owner, \\\"Not the Owner\\\");\\n        _;\\n    }\\n\\n\\n\\n    modifier isSubscribed() {\\n        require(subscribers[msg.sender], \\\"Not subscribed\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Function to subscribe to the service\\n     * Users can subscribe multiple times to extend their subscription\\n     * Requires exactly 1 ROSE token payment per subscription\\n     */\\n    function subscribe() public payable {\\n        require(msg.value >= subscriptionPrice, \\\"Insufficient payment: 1 ROSE token required\\\");\\n        \\n        console.log(\\\"New subscription from:\\\", msg.sender, \\\"Amount:\\\", msg.value);\\n        \\n        // Track subscription - first time subscribers increment total count\\n        if (!subscribers[msg.sender]) {\\n            totalSubscribers += 1;\\n        }\\n        \\n        // Mark user as subscribed and update timestamp\\n        subscribers[msg.sender] = true;\\n        subscriptionTimestamp[msg.sender] = block.timestamp;\\n        subscriptionCount[msg.sender] += 1;\\n        \\n        // Create user contract if factory is set\\n        if (contractFactory != address(0)) {\\n            try ContractFactory(contractFactory).createUserContract(msg.sender, subscriptionCount[msg.sender]) returns (address userContract) {\\n                console.log(\\\"Created user contract for:\\\", msg.sender, \\\"at:\\\", userContract);\\n                emit UserContractCreated(msg.sender, userContract, block.timestamp);\\n            } catch {\\n                console.log(\\\"Failed to create user contract for:\\\", msg.sender);\\n            }\\n        }\\n        \\n        // Refund excess payment if any\\n        if (msg.value > subscriptionPrice) {\\n            uint256 refund = msg.value - subscriptionPrice;\\n            (bool refundSuccess, ) = msg.sender.call{value: refund}(\\\"\\\");\\n            require(refundSuccess, \\\"Refund failed\\\");\\n        }\\n        \\n        emit SubscriptionPurchased(msg.sender, subscriptionPrice, block.timestamp);\\n    }\\n\\n    /**\\n     * Function to cancel subscription\\n     * No refund - subscription remains valid until cancellation\\n     */\\n    function cancelSubscription() public isSubscribed {\\n        subscribers[msg.sender] = false;\\n        totalSubscribers -= 1;\\n        \\n        emit SubscriptionCancelled(msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * Check if an address is subscribed\\n     */\\n    function isUserSubscribed(address _user) public view returns (bool) {\\n        return subscribers[_user];\\n    }\\n\\n    /**\\n     * Get subscription timestamp for a user\\n     */\\n    function getSubscriptionTime(address _user) public view returns (uint256) {\\n        require(subscribers[_user], \\\"User not subscribed\\\");\\n        return subscriptionTimestamp[_user];\\n    }\\n\\n    /**\\n     * Get subscription count for a user\\n     */\\n    function getSubscriptionCount(address _user) public view returns (uint256) {\\n        return subscriptionCount[_user];\\n    }\\n\\n    /**\\n     * Owner function to update subscription price\\n     */\\n    function setSubscriptionPrice(uint256 _newPrice) public isOwner {\\n        require(_newPrice > 0, \\\"Price must be greater than 0\\\");\\n        subscriptionPrice = _newPrice;\\n        emit PriceUpdated(_newPrice, block.timestamp);\\n    }\\n\\n    /**\\n     * Owner function to withdraw collected subscription fees\\n     */\\n    function withdraw() public isOwner {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0, \\\"No funds to withdraw\\\");\\n        \\n        (bool success, ) = owner.call{value: balance}(\\\"\\\");\\n        require(success, \\\"Withdrawal failed\\\");\\n        \\n        emit FundsWithdrawn(owner, balance, block.timestamp);\\n    }\\n\\n    /**\\n     * Get contract balance\\n     */\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * Set contract factory address\\n     * Only callable by owner\\n     */\\n    function setContractFactory(address _contractFactory) public isOwner {\\n        require(_contractFactory != address(0), \\\"Invalid factory address\\\");\\n        address oldFactory = contractFactory;\\n        contractFactory = _contractFactory;\\n        \\n        console.log(\\\"Updated contract factory from:\\\", oldFactory, \\\"to:\\\", _contractFactory);\\n        emit ContractFactoryUpdated(oldFactory, _contractFactory);\\n    }\\n\\n    /**\\n     * Function that allows the contract to receive ROSE tokens\\n     */\\n    receive() external payable {\\n        console.log(\\\"Received ROSE tokens:\\\", msg.value, \\\"from:\\\", msg.sender);\\n    }\\n}\"\n    },\n    \"contracts/UserContract.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SiweAuth} from \\\"@oasisprotocol/sapphire-contracts/contracts/auth/SiweAuth.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * User Contract for storing encrypted chat data\\n * Each user gets their own contract for privacy\\n * @author BuidlGuidl\\n */\\ncontract UserContract is Ownable, SiweAuth {\\n    constructor(string memory domain) Ownable(msg.sender) SiweAuth(domain) {}\\n    // User data\\n    address public user;\\n    uint256 public subscriptionId;\\n    uint256 public createdAt;\\n    bool public isInitialized;\\n    \\n    // Chat session management\\n    struct ChatSession {\\n        bytes32 sessionId;\\n        uint256 createdAt;\\n        uint256 lastActivity;\\n        bool isActive;\\n        uint256 messageCount;\\n    }\\n    \\n    // Chat message structure\\n    struct ChatMessage {\\n        bytes encryptedUserMessage;\\n        bytes encryptedAIResponse;\\n        uint256 timestamp;\\n        uint256 messageOrder;\\n    }\\n    \\n    // Chat summary structure\\n    struct ChatSummary {\\n        bytes32 sessionId;\\n        bytes encryptedSummary;\\n        uint256 createdAt;\\n        uint256 messageCount;\\n    }\\n    \\n    // Storage mappings\\n    mapping(bytes32 => ChatSession) public chatSessions;\\n    mapping(bytes32 => ChatMessage[]) public chatMessages;\\n    mapping(bytes32 => ChatSummary) public chatSummaries;\\n    mapping(bytes32 => uint256) public sessionMessageCount;\\n    bytes32[] public userSessionIds;\\n    \\n    // TEE contract access (for AI processing)\\n    address public teeContract;\\n    \\n    // Events\\n    event ChatSessionCreated(address indexed user, bytes32 indexed sessionId, uint256 timestamp);\\n    event ChatMessageStored(address indexed user, bytes32 indexed sessionId, uint256 messageOrder, uint256 timestamp);\\n    event ChatSessionClosed(address indexed user, bytes32 indexed sessionId, uint256 timestamp);\\n    event ChatSummaryStored(address indexed user, bytes32 indexed sessionId, uint256 timestamp);\\n    event TEEContractUpdated(address indexed oldTEE, address indexed newTEE);\\n    event UserContractInitialized(address indexed user, uint256 subscriptionId, uint256 timestamp);\\n    \\n    // Errors\\n    error ContractNotInitialized();\\n    error SessionNotFound();\\n    error SessionAlreadyExists();\\n    error UnauthorizedAccess();\\n    error InvalidSessionId();\\n    error InvalidMessageOrder();\\n    \\n    // Modifiers\\n    modifier onlyInitialized() {\\n        if (!isInitialized) {\\n            revert ContractNotInitialized();\\n        }\\n        _;\\n    }\\n    \\n    modifier onlyUser(bytes memory token) {\\n        if (msg.sender != user && authMsgSender(token) != user) {\\n            revert UnauthorizedAccess();\\n        }\\n        _;\\n    }\\n    \\n    modifier onlyUserDirect() {\\n        if (msg.sender != user) {\\n            revert UnauthorizedAccess();\\n        }\\n        _;\\n    }\\n    \\n    modifier onlyTEE() {\\n        if (msg.sender != teeContract) {\\n            revert UnauthorizedAccess();\\n        }\\n        _;\\n    }\\n    \\n    modifier validSessionId(bytes32 sessionId) {\\n        if (sessionId == bytes32(0)) {\\n            revert InvalidSessionId();\\n        }\\n        _;\\n    }\\n    \\n    /**\\n     * Initialize the user contract\\n     * Can only be called once by the factory\\n     */\\n    function initialize(address _user, uint256 _subscriptionId) external {\\n        require(!isInitialized, \\\"Already initialized\\\");\\n        require(_user != address(0), \\\"Invalid user address\\\");\\n        \\n        user = _user;\\n        subscriptionId = _subscriptionId;\\n        createdAt = block.timestamp;\\n        isInitialized = true;\\n        \\n        emit UserContractInitialized(_user, _subscriptionId, block.timestamp);\\n    }\\n    \\n    /**\\n     * Create a new chat session\\n     * @return sessionId The new session ID\\n     */\\n    function createNewSession() external onlyUserDirect onlyInitialized returns (bytes32) {\\n        uint256 sessionCounter = userSessionIds.length;\\n        bytes32 sessionId = keccak256(abi.encodePacked(user, block.timestamp, sessionCounter));\\n        \\n        // Ensure unique session ID\\n        while (chatSessions[sessionId].createdAt != 0) {\\n            sessionCounter++;\\n            sessionId = keccak256(abi.encodePacked(user, block.timestamp, sessionCounter));\\n        }\\n        \\n        ChatSession memory newSession = ChatSession({\\n            sessionId: sessionId,\\n            createdAt: block.timestamp,\\n            lastActivity: block.timestamp,\\n            isActive: true,\\n            messageCount: 0\\n        });\\n        \\n        chatSessions[sessionId] = newSession;\\n        userSessionIds.push(sessionId);\\n        sessionMessageCount[sessionId] = 0;\\n        \\n        emit ChatSessionCreated(user, sessionId, block.timestamp);\\n        \\n        return sessionId;\\n    }\\n    \\n    /**\\n     * Store a chat message in a session\\n     * @param sessionId The session ID\\n     * @param encryptedUserMessage Encrypted user message\\n     * @param encryptedAIResponse Encrypted AI response\\n     */\\n    function storeChatMessage(\\n        bytes32 sessionId,\\n        bytes calldata encryptedUserMessage,\\n        bytes calldata encryptedAIResponse\\n    ) external onlyUserDirect onlyInitialized validSessionId(sessionId) {\\n        require(chatSessions[sessionId].createdAt != 0, \\\"Session not found\\\");\\n        require(chatSessions[sessionId].isActive, \\\"Session is closed\\\");\\n        \\n        uint256 messageOrder = sessionMessageCount[sessionId];\\n        \\n        ChatMessage memory newMessage = ChatMessage({\\n            encryptedUserMessage: encryptedUserMessage,\\n            encryptedAIResponse: encryptedAIResponse,\\n            timestamp: block.timestamp,\\n            messageOrder: messageOrder\\n        });\\n        \\n        chatMessages[sessionId].push(newMessage);\\n        sessionMessageCount[sessionId]++;\\n        chatSessions[sessionId].lastActivity = block.timestamp;\\n        chatSessions[sessionId].messageCount++;\\n        \\n        emit ChatMessageStored(user, sessionId, messageOrder, block.timestamp);\\n    }\\n    \\n    /**\\n     * Store a chat summary (called by user with SIWE authentication)\\n     * @param sessionId The session ID\\n     * @param encryptedSummary Encrypted summary from AI\\n     * @param token SIWE authentication token\\n     */\\n    function storeChatSummary(\\n        bytes32 sessionId,\\n        bytes calldata encryptedSummary,\\n        bytes memory token\\n    ) external onlyUser(token) onlyInitialized validSessionId(sessionId) {\\n        require(chatSessions[sessionId].createdAt != 0, \\\"Session not found\\\");\\n        \\n        ChatSummary memory summary = ChatSummary({\\n            sessionId: sessionId,\\n            encryptedSummary: encryptedSummary,\\n            createdAt: block.timestamp,\\n            messageCount: chatSessions[sessionId].messageCount\\n        });\\n        \\n        chatSummaries[sessionId] = summary;\\n        \\n        emit ChatSummaryStored(user, sessionId, block.timestamp);\\n    }\\n    \\n    /**\\n     * Get chat history for a session\\n     * @param sessionId The session ID\\n     * @return Array of chat messages\\n     */\\n    function getChatHistory(bytes32 sessionId) external view onlyUserDirect onlyInitialized validSessionId(sessionId) returns (ChatMessage[] memory) {\\n        require(chatSessions[sessionId].createdAt != 0, \\\"Session not found\\\");\\n        return chatMessages[sessionId];\\n    }\\n    \\n    /**\\n     * Get chat summary for a session\\n     * @param sessionId The session ID\\n     * @return Chat summary\\n     */\\n    function getChatSummary(bytes32 sessionId, bytes memory token) external view onlyUser(token) onlyInitialized validSessionId(sessionId) returns (ChatSummary memory) {\\n        require(chatSessions[sessionId].createdAt != 0, \\\"Session not found\\\");\\n        return chatSummaries[sessionId];\\n    }\\n    \\n    /**\\n     * Get session information\\n     * @param sessionId The session ID\\n     * @return Session information\\n     */\\n    function getSessionInfo(bytes32 sessionId) external view onlyUserDirect onlyInitialized validSessionId(sessionId) returns (ChatSession memory) {\\n        require(chatSessions[sessionId].createdAt != 0, \\\"Session not found\\\");\\n        return chatSessions[sessionId];\\n    }\\n    \\n    /**\\n     * Get all active sessions for the user\\n     * @return Array of active session IDs\\n     */\\n    function getActiveSessions() external view onlyUserDirect onlyInitialized returns (bytes32[] memory) {\\n        bytes32[] memory activeSessions = new bytes32[](userSessionIds.length);\\n        uint256 activeCount = 0;\\n        \\n        for (uint256 i = 0; i < userSessionIds.length; i++) {\\n            bytes32 sessionId = userSessionIds[i];\\n            if (chatSessions[sessionId].isActive) {\\n                activeSessions[activeCount] = sessionId;\\n                activeCount++;\\n            }\\n        }\\n        \\n        // Resize array to actual count\\n        bytes32[] memory result = new bytes32[](activeCount);\\n        for (uint256 i = 0; i < activeCount; i++) {\\n            result[i] = activeSessions[i];\\n        }\\n        \\n        return result;\\n    }\\n    \\n    /**\\n     * Close a chat session\\n     * @param sessionId The session ID to close\\n     */\\n    function closeSession(bytes32 sessionId) external onlyUserDirect onlyInitialized validSessionId(sessionId) {\\n        require(chatSessions[sessionId].createdAt != 0, \\\"Session not found\\\");\\n        require(chatSessions[sessionId].isActive, \\\"Session already closed\\\");\\n        \\n        chatSessions[sessionId].isActive = false;\\n        chatSessions[sessionId].lastActivity = block.timestamp;\\n        \\n        emit ChatSessionClosed(user, sessionId, block.timestamp);\\n    }\\n    \\n    /**\\n     * Delete a session and all its data\\n     * @param sessionId The session ID to delete\\n     */\\n    function deleteSession(bytes32 sessionId) external onlyUserDirect onlyInitialized validSessionId(sessionId) {\\n        require(chatSessions[sessionId].createdAt != 0, \\\"Session not found\\\");\\n        \\n        // Remove from userSessionIds array\\n        for (uint256 i = 0; i < userSessionIds.length; i++) {\\n            if (userSessionIds[i] == sessionId) {\\n                userSessionIds[i] = userSessionIds[userSessionIds.length - 1];\\n                userSessionIds.pop();\\n                break;\\n            }\\n        }\\n        \\n        // Clear session data\\n        delete chatSessions[sessionId];\\n        delete chatMessages[sessionId];\\n        delete chatSummaries[sessionId];\\n        delete sessionMessageCount[sessionId];\\n    }\\n    \\n    /**\\n     * Set TEE contract address (for AI processing)\\n     * @param _teeContract TEE contract address\\n     */\\n    function setTEEContract(address _teeContract) external onlyOwner {\\n        require(_teeContract != address(0), \\\"Invalid TEE contract address\\\");\\n        address oldTEE = teeContract;\\n        teeContract = _teeContract;\\n        \\n        emit TEEContractUpdated(oldTEE, _teeContract);\\n    }\\n    \\n    /**\\n     * Get user contract information\\n     * @return _user User address\\n     * @return _subscriptionId Subscription ID\\n     * @return _createdAt Contract creation timestamp\\n     * @return _totalSessions Total number of sessions\\n     */\\n    function getUserInfo() external view onlyUserDirect onlyInitialized returns (\\n        address _user,\\n        uint256 _subscriptionId,\\n        uint256 _createdAt,\\n        uint256 _totalSessions\\n    ) {\\n        return (user, subscriptionId, createdAt, userSessionIds.length);\\n    }\\n    \\n    /**\\n     * Get total message count for a session\\n     * @param sessionId The session ID\\n     * @return Message count\\n     */\\n    function getSessionMessageCount(bytes32 sessionId) external view onlyUserDirect onlyInitialized validSessionId(sessionId) returns (uint256) {\\n        return sessionMessageCount[sessionId];\\n    }\\n    \\n    /**\\n     * Get all session IDs for the user\\n     * @return Array of session IDs\\n     */\\n    function getAllSessionIds(bytes memory token) external view onlyUser(token) onlyInitialized returns (bytes32[] memory) {\\n        return userSessionIds;\\n    }\\n} \"\n    },\n    \"contracts/YourContract.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// Useful for debugging. Remove when deploying to a live network.\\nimport \\\"hardhat/console.sol\\\";\\n\\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * A smart contract that allows changing a state variable of the contract and tracking the changes\\n * It also allows the owner to withdraw the Ether in the contract\\n * @author BuidlGuidl\\n */\\ncontract YourContract {\\n    // State Variables\\n    address public immutable owner;\\n    string public greeting = \\\"Building Unstoppable Apps!!!\\\";\\n    bool public premium = false;\\n    uint256 public totalCounter = 0;\\n    mapping(address => uint) public userGreetingCounter;\\n\\n    // Events: a way to emit log statements from smart contract that can be listened to by external parties\\n    event GreetingChange(address indexed greetingSetter, string newGreeting, bool premium, uint256 value);\\n\\n    // Constructor: Called once on contract deployment\\n    // Check packages/hardhat/deploy/00_deploy_your_contract.ts\\n    constructor(address _owner) {\\n        owner = _owner;\\n    }\\n\\n    // Modifier: used to define a set of rules that must be met before or after a function is executed\\n    // Check the withdraw() function\\n    modifier isOwner() {\\n        // msg.sender: predefined variable that represents address of the account that called the current function\\n        require(msg.sender == owner, \\\"Not the Owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Function that allows anyone to change the state variable \\\"greeting\\\" of the contract and increase the counters\\n     *\\n     * @param _newGreeting (string memory) - new greeting to save on the contract\\n     */\\n    function setGreeting(string memory _newGreeting) public payable {\\n        // Print data to the hardhat chain console. Remove when deploying to a live network.\\n        console.log(\\\"Setting new greeting '%s' from %s\\\", _newGreeting, msg.sender);\\n\\n        // Change state variables\\n        greeting = _newGreeting;\\n        totalCounter += 1;\\n        userGreetingCounter[msg.sender] += 1;\\n\\n        // msg.value: built-in global variable that represents the amount of ether sent with the transaction\\n        if (msg.value > 0) {\\n            premium = true;\\n        } else {\\n            premium = false;\\n        }\\n\\n        // emit: keyword used to trigger an event\\n        emit GreetingChange(msg.sender, _newGreeting, msg.value > 0, msg.value);\\n    }\\n\\n    /**\\n     * Function that allows the owner to withdraw all the Ether in the contract\\n     * The function can only be called by the owner of the contract as defined by the isOwner modifier\\n     */\\n    function withdraw() public isOwner {\\n        (bool success, ) = owner.call{ value: address(this).balance }(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /**\\n     * Function that allows the contract to receive ETH\\n     */\\n    receive() external payable {}\\n}\\n\"\n    },\n    \"hardhat/console.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"evmVersion\": \"paris\",\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "14fe59eb59231d721e7554ea36d87a87",
      "transactionHash": "0x388c00aa777188bdaf93420171ebc6dc00cd29855a2207b61cb7af1e9c413dd9",
      "args": [
        "localhost:3000"
      ]
    },
    "decoded": {
      "from": "0x0020cE4969A6Ec50885E083784A495483Db7A62c",
      "gasPrice": "100000000000",
      "maxFeePerGas": "100000000000",
      "maxPriorityFeePerGas": "100000000000",
      "gasLimit": "3000000",
      "to": null,
      "value": "0",
      "nonce": 128,
      "data": "",
      "r": "0xed00c43cb8b64f0ac918691a36054e0989a7101ed6d8f7e3f70e6569620a786f",
      "s": "0x38e0d62ff74961e36a26b69563f595c5b7a904892d4acc863804f060abcf2b8f",
      "v": 46625,
      "chainId": 23295
    }
  }
}